// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using System;
using System.Data;
using System.Linq;
using DatPhatAcc.AccountingDbContext;

namespace DatPhatAcc.AccountingDbContext
{
    public partial class ACCOUNTINGContext
    {

        [DbFunction("Checkcatalog", "dbo")]
        public static string Checkcatalog(string Cataloginputtype, string CatalogID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("CheckcatalogID", "dbo")]
        public static bool? CheckcatalogID(string Cataloginputtype, string CatalogID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("CheckTransGoods", "dbo")]
        public static bool? CheckTransGoods(string GoodID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("CsvToVarchar", "dbo")]
        public IQueryable<CsvToVarcharResult> CsvToVarchar(string Array)
        {
            return FromExpression(() => CsvToVarchar(Array));
        }

        [DbFunction("CsvToVarchar2", "dbo")]
        public IQueryable<CsvToVarchar2Result> CsvToVarchar2(string Array)
        {
            return FromExpression(() => CsvToVarchar2(Array));
        }

        [DbFunction("FomulaSeparator", "dbo")]
        public IQueryable<FomulaSeparatorResult> FomulaSeparator(string Array)
        {
            return FromExpression(() => FomulaSeparator(Array));
        }

        [DbFunction("GetDateCode", "dbo")]
        public static string GetDateCode(string vInput, int? vType)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetIdFromSign", "dbo")]
        public static string GetIdFromSign(Guid? IncidentID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetStringSyncTime", "dbo")]
        public static string GetStringSyncTime()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetStringSysTime", "dbo")]
        public static string GetStringSysTime()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("GetStringTime", "dbo")]
        public static string GetStringTime()
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("StringToDate", "dbo")]
        public static string StringToDate(string Array)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("StringToDate11", "dbo")]
        public IQueryable<StringToDate11Result> StringToDate11(string Array)
        {
            return FromExpression(() => StringToDate11(Array));
        }

        [DbFunction("StringToFullDate", "dbo")]
        public static DateTime? StringToFullDate(string Array)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("StringToTime", "dbo")]
        public static string StringToTime(string Array)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("TCVN2Unicode", "dbo")]
        public static string TCVN2Unicode(string strInput)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Transactions.ResumQuantity", "dbo")]
        public static int? TransactionsResumQuantity(string TransactionID, string ItemCode, string BigUnitID)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        [DbFunction("Unicode2TCVN", "dbo")]
        public static string Unicode2TCVN(string strInput)
        {
            throw new NotSupportedException("This method can only be called from Entity Framework Core queries");
        }

        protected void OnModelCreatingGeneratedFunctions(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CsvToVarcharResult>().HasNoKey();
            modelBuilder.Entity<CsvToVarchar2Result>().HasNoKey();
            modelBuilder.Entity<FomulaSeparatorResult>().HasNoKey();
            modelBuilder.Entity<StringToDate11Result>().HasNoKey();
        }
    }
}
