// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using DatPhatAcc.AccountingDbContext;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DatPhatAcc.AccountingDbContext
{
    public partial class ACCOUNTINGContext
    {
        private IACCOUNTINGContextProcedures _procedures;

        public virtual IACCOUNTINGContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ACCOUNTINGContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IACCOUNTINGContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AccountingBusinessGetHrSalarySheetDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetHrSalarySheetsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetRetailTranDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetRetailTranDetailByGoodResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetRetailTranDetailByPacketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetRetailTranPromoDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTranferBalanceAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTranferBalanceAccount_20191105Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTranferBalanceAccountTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionAccountingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionDetails_save_20190911Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionDetails_tmpResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionExpiredDateDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionExpiredDateDetailsAllResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionExpiredDateDetailsAll_save_20190911Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionFeeDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingBusinessGetTransactionWarrantyDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ACCOUNTINGBUSINESSGETVOUCHERDETAILResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ACCOUNTINGBUSINESSGETVOUCHERSResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBalanceSheetDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBalanceSheetDetailsForBANGCANDOIKETOANResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBalanceSheetDetailsForTranferResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBalanceSheetDetailsForTranfer_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBalanceSheetDetailsForTranferTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBalanceSheetDetailsTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBANGCANDOIKETOANResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportBANGCANDOIKETOAN_TESTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendor_bkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendor_save_20190710Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendor_tempResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendor_testResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetail_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetail_save20190623Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetail_save20191125Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetail2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetailTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorDetailtest2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorForSOCANDOIKETOANResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDebtVendorTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccount_loitondau_20200603Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccount_save20190702Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccount_TMPOLDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccount11111Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccountParamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportDetailByOneAccountTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportGeneralDiaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportGetTransactionDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportItemSummaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportLUUCHUYENTIENTEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportSumaryFeeIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportSumaryFeeID_testResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportSummarizingBusinessResultsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportSummarizingBusinessResultsTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportSummarizingBusinessResultsTest2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccount_1111111Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccount_bkResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccount_bk_20201225Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccount_save_20190704Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccount1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingReportTotalByOneAccountTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AccountingSystemCheckDeleteAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractAppendixByContractNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractDetailByContractNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractDetailByCustomerIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractDetailNotByAppendixNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractPaymentByContractNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractPaymentNotByAppendixNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesGetContractsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesgetStationsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesgetStationsByUserIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesgetStationsByUserNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CategoriesgetStationsByZoneIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GETXNTKHOResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportAccumulationDetailByCustomerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportAccumulationTotalReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportGoodFlagResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportGoodFlag_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportInner_SumResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportRateAutoExportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportRateAutoExport_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportRateAutoExportTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportRetailSummaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportRetailSummaryNotPayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportWholesaleResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsExportWholesale_SumResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsImportImpSummaryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsImportINNER_SUM2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsImportSummaryFromProviderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsStockOverMaxMinResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ReportsStockOverMaxMin_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonBarcoderotateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonBarcoderotate_PacketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonBarcoderotate_Packet_printstampResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonchangesysdateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonchangesysdateAutoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonCheckcatalogResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonCheckIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonFomulaSeparatorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonFomulaSeparatorForBANGCANDOIKETOANResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonFomulaSeparatorForLUUCHUYENTIENTEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonGetAmountFromAccountingForBANGCANDOIKETOANResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonListAccountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemCommonListContractByCustomersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemConfigurationgetSysParamsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemConfigurationgetSysParamsByAllParamsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemConfigurationgetSysParamsByParamNameResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemConfigurationgetSysParamsByParamNameParamTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemConfigurationgetSysParamsByParamTypeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemLogginggetLogsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemLogginggetLogsByControlIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemLogginggetLogsByFormIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemLogginggetLogsByStationIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemLogginggetLogsByUserIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemLogginggetLogsByZoneIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemMenusgetMenusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemMenusgetMenusByAllParamsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemMenusgetMenusByUserIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemMenusgetMenusByUserIDMenuIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemMenusgetMenusByUserIDZoneIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemSecuritygetPermmissionFromRoleByUserIDRoleIDZoneIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockAutProcessNegtiveResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockCreateEndingInventResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListChangePriceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListChangePricePacketsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListChangePriceTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListForOrderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListForOrder_testResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListForOrdertessResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListForOrdertestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListForScanResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetListGoodFlagResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetMinMaxResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGetMinMaxTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockGoodDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockInventory_updateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoExportSaleByOrderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoExportSaleByOrder_loiResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoExportSaleByOrder2020Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoExportSaleByOrderTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoImportByInstockResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoOrdersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockMakeAutoOrdersTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockReblanceStatisticResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockReblanceStatistic_devResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockReblanceStatistic_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemstockReCaculatePriceSplitNegativeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemstockSetmarkinfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_backup20170907Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_backup20190302Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_bakResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_codingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_ducResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_stockInDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo_withcutTransactionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfo2222Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfoAfterExpResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinforExportSaleByOrder_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinforExportSaleByOrderTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinforOrderResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinforRetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockStockinfoSumbyGoodResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockSummaryXNTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockSummaryXNT_testResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockSummaryXNTTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SystemStockSummaryXNTTest2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<TOOLSQTYMINMAXResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeCategorySyncgetCategoriesReferResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeCategorySyncgetCategoriesRefer2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeCategorySyncgetNewCategoriesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeCategorySyncgetNewCategories2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeChangePriceSyncGetChangePriceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeOrdersSyncgetOrderDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizePromotionSyncGetPromotionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizePromotionSyncGetPromotionByZoneResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeTransactionsSyncGetTransactionsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ToolsSynchronizeTransactionsSyncgetTransDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TRANSACTIONADJUSTMENTINVENTORYGETGOODSBYCONDITIONResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TransactionsImportImportRetailgetPacketDetailResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ACCOUNTINGContextProcedures : IACCOUNTINGContextProcedures
    {
        private readonly ACCOUNTINGContext _context;

        public ACCOUNTINGContextProcedures(ACCOUNTINGContext context)
        {
            _context = context;
        }

        public virtual async Task<int> AccountingBusinessCreateMarkDateAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 40,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Accounting.Business.CreateMarkDate] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetHrSalarySheetDetailsResult>> AccountingBusinessGetHrSalarySheetDetailsAsync(string SalarySheetID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SalarySheetID",
                    Size = 100,
                    Value = SalarySheetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetHrSalarySheetDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetHrSalarySheetDetails] @SalarySheetID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetHrSalarySheetsResult>> AccountingBusinessGetHrSalarySheetsAsync(string Status, string StartDate, string EndDate, string SalarySheetID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 16,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SalarySheetID",
                    Size = 100,
                    Value = SalarySheetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetHrSalarySheetsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetHrSalarySheets] @Status, @StartDate, @EndDate, @SalarySheetID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetRetailTranDetailResult>> AccountingBusinessGetRetailTranDetailAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetRetailTranDetailResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetRetailTranDetail] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetRetailTranDetailByGoodResult>> AccountingBusinessGetRetailTranDetailByGoodAsync(string GoodID, string Barcode, string ZoneID, string WholeSale, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "GoodID",
                    Size = 18,
                    Value = GoodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Barcode",
                    Size = 40,
                    Value = Barcode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WholeSale",
                    Size = 4,
                    Value = WholeSale ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetRetailTranDetailByGoodResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetRetailTranDetailByGood] @GoodID, @Barcode, @ZoneID, @WholeSale", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetRetailTranDetailByPacketResult>> AccountingBusinessGetRetailTranDetailByPacketAsync(string PacketID, string WholeSale, string TransactionID, string PacketDetail, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PacketID",
                    Size = 16,
                    Value = PacketID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WholeSale",
                    Size = 4,
                    Value = WholeSale ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PacketDetail",
                    Size = 4,
                    Value = PacketDetail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 4,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetRetailTranDetailByPacketResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetRetailTranDetailByPacket] @PacketID, @WholeSale, @TransactionID, @PacketDetail, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetRetailTranPromoDetailResult>> AccountingBusinessGetRetailTranPromoDetailAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetRetailTranPromoDetailResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetRetailTranPromoDetail] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTranferBalanceAccountResult>> AccountingBusinessGetTranferBalanceAccountAsync(string ImExpMethodCode, string DateFrom, string DateTo, string ZoneID, DataTable TempTranfer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ImExpMethodCode",
                    Size = 100,
                    Value = ImExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 16,
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 16,
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TempTranfer",
                    Value = TempTranfer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TblTempTranfer]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTranferBalanceAccountResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTranferBalanceAccount] @ImExpMethodCode, @DateFrom, @DateTo, @ZoneID, @TempTranfer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTranferBalanceAccount_20191105Result>> AccountingBusinessGetTranferBalanceAccount_20191105Async(string ImExpMethodCode, string DateFrom, string DateTo, string ZoneID, DataTable TempTranfer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ImExpMethodCode",
                    Size = 100,
                    Value = ImExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 16,
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 16,
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TempTranfer",
                    Value = TempTranfer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TblTempTranfer]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTranferBalanceAccount_20191105Result>("EXEC @returnValue = [dbo].[Accounting.Business.GetTranferBalanceAccount_20191105] @ImExpMethodCode, @DateFrom, @DateTo, @ZoneID, @TempTranfer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTranferBalanceAccountTestResult>> AccountingBusinessGetTranferBalanceAccountTestAsync(string ImExpMethodCode, string DateFrom, string DateTo, string ZoneID, DataTable TempTranfer, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ImExpMethodCode",
                    Size = 100,
                    Value = ImExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 16,
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 16,
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TempTranfer",
                    Value = TempTranfer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[TblTempTranfer]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTranferBalanceAccountTestResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTranferBalanceAccountTest] @ImExpMethodCode, @DateFrom, @DateTo, @ZoneID, @TempTranfer", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionAccountingResult>> AccountingBusinessGetTransactionAccountingAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 40,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionAccountingResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionAccounting] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionDetailsResult>> AccountingBusinessGetTransactionDetailsAsync(string TransactionID, string StockCheck, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockCheck",
                    Size = 4,
                    Value = StockCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionDetails] @TransactionID, @StockCheck", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionDetails_save_20190911Result>> AccountingBusinessGetTransactionDetails_save_20190911Async(string TransactionID, string StockCheck, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockCheck",
                    Size = 4,
                    Value = StockCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionDetails_save_20190911Result>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionDetails_save_20190911] @TransactionID, @StockCheck", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionDetails_tmpResult>> AccountingBusinessGetTransactionDetails_tmpAsync(string TransactionID, string StockCheck, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockCheck",
                    Size = 4,
                    Value = StockCheck ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionDetails_tmpResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionDetails_tmp] @TransactionID, @StockCheck", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionExpiredDateDetailsResult>> AccountingBusinessGetTransactionExpiredDateDetailsAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionExpiredDateDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionExpiredDateDetails] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionExpiredDateDetailsAllResult>> AccountingBusinessGetTransactionExpiredDateDetailsAllAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionExpiredDateDetailsAllResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionExpiredDateDetailsAll] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionExpiredDateDetailsAll_save_20190911Result>> AccountingBusinessGetTransactionExpiredDateDetailsAll_save_20190911Async(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionExpiredDateDetailsAll_save_20190911Result>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionExpiredDateDetailsAll_save_20190911] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionFeeDetailsResult>> AccountingBusinessGetTransactionFeeDetailsAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionFeeDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionFeeDetails] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionsResult>> AccountingBusinessGetTransactionsAsync(string ZoneID, string TransCode, string Status, string StartDate, string EndDate, string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 40,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 16,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactions] @ZoneID, @TransCode, @Status, @StartDate, @EndDate, @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingBusinessGetTransactionWarrantyDetailsResult>> AccountingBusinessGetTransactionWarrantyDetailsAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingBusinessGetTransactionWarrantyDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Business.GetTransactionWarrantyDetails] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACCOUNTINGBUSINESSGETVOUCHERDETAILResult>> ACCOUNTINGBUSINESSGETVOUCHERDETAILAsync(string VouchersID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VouchersID",
                    Size = 40,
                    Value = VouchersID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACCOUNTINGBUSINESSGETVOUCHERDETAILResult>("EXEC @returnValue = [dbo].[ACCOUNTING.BUSINESS.GETVOUCHERDETAIL] @VouchersID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACCOUNTINGBUSINESSGETVOUCHERSResult>> ACCOUNTINGBUSINESSGETVOUCHERSAsync(string ZoneID, string VouchersType, string Status, string StartDate, string EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VouchersType",
                    Size = 40,
                    Value = VouchersType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 16,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACCOUNTINGBUSINESSGETVOUCHERSResult>("EXEC @returnValue = [dbo].[ACCOUNTING.BUSINESS.GETVOUCHERS] @ZoneID, @VouchersType, @Status, @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBalanceSheetDetailsResult>> AccountingReportBalanceSheetDetailsAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBalanceSheetDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Report.BalanceSheetDetails] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBalanceSheetDetailsForBANGCANDOIKETOANResult>> AccountingReportBalanceSheetDetailsForBANGCANDOIKETOANAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TableDateName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableDateName",
                    Size = 400,
                    Value = TableDateName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBalanceSheetDetailsForBANGCANDOIKETOANResult>("EXEC @returnValue = [dbo].[Accounting.Report.BalanceSheetDetailsForBANGCANDOIKETOAN] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TableDateName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBalanceSheetDetailsForTranferResult>> AccountingReportBalanceSheetDetailsForTranferAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBalanceSheetDetailsForTranferResult>("EXEC @returnValue = [dbo].[Accounting.Report.BalanceSheetDetailsForTranfer] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBalanceSheetDetailsForTranfer_oldResult>> AccountingReportBalanceSheetDetailsForTranfer_oldAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBalanceSheetDetailsForTranfer_oldResult>("EXEC @returnValue = [dbo].[Accounting.Report.BalanceSheetDetailsForTranfer_old] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBalanceSheetDetailsForTranferTestResult>> AccountingReportBalanceSheetDetailsForTranferTestAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBalanceSheetDetailsForTranferTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.BalanceSheetDetailsForTranferTest] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBalanceSheetDetailsTestResult>> AccountingReportBalanceSheetDetailsTestAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBalanceSheetDetailsTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.BalanceSheetDetailsTest] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBANGCANDOIKETOANResult>> AccountingReportBANGCANDOIKETOANAsync(string FromDate, string ToDate, string CircularsNumber, string FormNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CircularsNumber",
                    Size = 100,
                    Value = CircularsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormNumber",
                    Size = 100,
                    Value = FormNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBANGCANDOIKETOANResult>("EXEC @returnValue = [dbo].[Accounting.Report.BANGCANDOIKETOAN] @FromDate, @ToDate, @CircularsNumber, @FormNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportBANGCANDOIKETOAN_TESTResult>> AccountingReportBANGCANDOIKETOAN_TESTAsync(string FromDate, string ToDate, string CircularsNumber, string FormNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CircularsNumber",
                    Size = 100,
                    Value = CircularsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormNumber",
                    Size = 100,
                    Value = FormNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportBANGCANDOIKETOAN_TESTResult>("EXEC @returnValue = [dbo].[Accounting.Report.BANGCANDOIKETOAN_TEST] @FromDate, @ToDate, @CircularsNumber, @FormNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorResult>> AccountingReportDebtVendorAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendor] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendor_bkResult>> AccountingReportDebtVendor_bkAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendor_bkResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendor_bk] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendor_save_20190710Result>> AccountingReportDebtVendor_save_20190710Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendor_save_20190710Result>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendor_save_20190710] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendor_tempResult>> AccountingReportDebtVendor_tempAsync(string FromDate, string EndDate, string CustomerID, string AccountNumber, string ZoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendor_tempResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendor_temp] @FromDate, @EndDate, @CustomerID, @AccountNumber, @ZoneID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendor_testResult>> AccountingReportDebtVendor_testAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendor_testResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendor_test] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetailResult>> AccountingReportDebtVendorDetailAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TypeReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeReport",
                    Size = 40,
                    Value = TypeReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetailResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetail] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TypeReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetail_oldResult>> AccountingReportDebtVendorDetail_oldAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetail_oldResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetail_old] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetail_save20190623Result>> AccountingReportDebtVendorDetail_save20190623Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetail_save20190623Result>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetail_save20190623] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetail_save20191125Result>> AccountingReportDebtVendorDetail_save20191125Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetail_save20191125Result>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetail_save20191125] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetail2Result>> AccountingReportDebtVendorDetail2Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TypeReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeReport",
                    Size = 40,
                    Value = TypeReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetail2Result>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetail2] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TypeReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetailTestResult>> AccountingReportDebtVendorDetailTestAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TypeReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeReport",
                    Size = 40,
                    Value = TypeReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetailTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetailTest] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TypeReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorDetailtest2Result>> AccountingReportDebtVendorDetailtest2Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TypeReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeReport",
                    Size = 40,
                    Value = TypeReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorDetailtest2Result>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorDetailtest2] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TypeReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorForSOCANDOIKETOANResult>> AccountingReportDebtVendorForSOCANDOIKETOANAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<decimal?> SummaryEndCredit, OutputParameter<decimal?> SummaryEndDedit, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterSummaryEndCredit = new SqlParameter
            {
                ParameterName = "SummaryEndCredit",
                Precision = 22,
                Scale = 8,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = SummaryEndCredit?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterSummaryEndDedit = new SqlParameter
            {
                ParameterName = "SummaryEndDedit",
                Precision = 22,
                Scale = 8,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = SummaryEndDedit?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterSummaryEndCredit,
                parameterSummaryEndDedit,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorForSOCANDOIKETOANResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorForSOCANDOIKETOAN] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @SummaryEndCredit OUTPUT, @SummaryEndDedit OUTPUT", sqlParameters, cancellationToken);

            SummaryEndCredit.SetValue(parameterSummaryEndCredit.Value);
            SummaryEndDedit.SetValue(parameterSummaryEndDedit.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDebtVendorTestResult>> AccountingReportDebtVendorTestAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDebtVendorTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.DebtVendorTest] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccountResult>> AccountingReportDetailByOneAccountAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccountResult>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccount] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccount_loitondau_20200603Result>> AccountingReportDetailByOneAccount_loitondau_20200603Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccount_loitondau_20200603Result>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccount_loitondau_20200603] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccount_save20190702Result>> AccountingReportDetailByOneAccount_save20190702Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccount_save20190702Result>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccount_save20190702] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccount_TMPOLDResult>> AccountingReportDetailByOneAccount_TMPOLDAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccount_TMPOLDResult>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccount_TMPOLD] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccount11111Result>> AccountingReportDetailByOneAccount11111Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccount11111Result>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccount11111] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccountParamResult>> AccountingReportDetailByOneAccountParamAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccountParamResult>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccountParam] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportDetailByOneAccountTestResult>> AccountingReportDetailByOneAccountTestAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportDetailByOneAccountTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.DetailByOneAccountTest] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportGeneralDiaryResult>> AccountingReportGeneralDiaryAsync(string FromDate, string ToDate, string AccountNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportGeneralDiaryResult>("EXEC @returnValue = [dbo].[Accounting.Report.GeneralDiary] @FromDate, @ToDate, @AccountNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportGetTransactionDetailsResult>> AccountingReportGetTransactionDetailsAsync(string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 100,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportGetTransactionDetailsResult>("EXEC @returnValue = [dbo].[Accounting.Report.GetTransactionDetails] @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportItemSummaryResult>> AccountingReportItemSummaryAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TypeReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeReport",
                    Size = 40,
                    Value = TypeReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportItemSummaryResult>("EXEC @returnValue = [dbo].[Accounting.Report.ItemSummary] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TypeReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportLUUCHUYENTIENTEResult>> AccountingReportLUUCHUYENTIENTEAsync(string FromDate, string ToDate, string CircularsNumber, string FormNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CircularsNumber",
                    Size = 100,
                    Value = CircularsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormNumber",
                    Size = 100,
                    Value = FormNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportLUUCHUYENTIENTEResult>("EXEC @returnValue = [dbo].[Accounting.Report.LUUCHUYENTIENTE] @FromDate, @ToDate, @CircularsNumber, @FormNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportSumaryFeeIDResult>> AccountingReportSumaryFeeIDAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, string TypeReport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 8000,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 8000,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 8000,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 8000,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 8000,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 8000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 8000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 8000,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 8000,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 8000,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 8000,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 8000,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeReport",
                    Size = 40,
                    Value = TypeReport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportSumaryFeeIDResult>("EXEC @returnValue = [dbo].[Accounting.Report.SumaryFeeID] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount, @TypeReport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportSumaryFeeID_testResult>> AccountingReportSumaryFeeID_testAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, string ReciprocalAccount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportSumaryFeeID_testResult>("EXEC @returnValue = [dbo].[Accounting.Report.SumaryFeeID_test] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @ReciprocalAccount", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportSummarizingBusinessResultsResult>> AccountingReportSummarizingBusinessResultsAsync(string FromDate, string ToDate, string CircularsNumber, string FormNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CircularsNumber",
                    Size = 100,
                    Value = CircularsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormNumber",
                    Size = 100,
                    Value = FormNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportSummarizingBusinessResultsResult>("EXEC @returnValue = [dbo].[Accounting.Report.SummarizingBusinessResults] @FromDate, @ToDate, @CircularsNumber, @FormNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportSummarizingBusinessResultsTestResult>> AccountingReportSummarizingBusinessResultsTestAsync(string FromDate, string ToDate, string CircularsNumber, string FormNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CircularsNumber",
                    Size = 100,
                    Value = CircularsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormNumber",
                    Size = 100,
                    Value = FormNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportSummarizingBusinessResultsTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.SummarizingBusinessResultsTest] @FromDate, @ToDate, @CircularsNumber, @FormNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportSummarizingBusinessResultsTest2Result>> AccountingReportSummarizingBusinessResultsTest2Async(string FromDate, string ToDate, string CircularsNumber, string FormNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CircularsNumber",
                    Size = 100,
                    Value = CircularsNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormNumber",
                    Size = 100,
                    Value = FormNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportSummarizingBusinessResultsTest2Result>("EXEC @returnValue = [dbo].[Accounting.Report.SummarizingBusinessResultsTest2] @FromDate, @ToDate, @CircularsNumber, @FormNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccountResult>> AccountingReportTotalByOneAccountAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, bool? Check, OutputParameter<decimal?> DebitStartValue, OutputParameter<decimal?> CreditStartValue, OutputParameter<decimal?> DebitEndValue, OutputParameter<decimal?> CreditEndValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDebitStartValue = new SqlParameter
            {
                ParameterName = "DebitStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditStartValue = new SqlParameter
            {
                ParameterName = "CreditStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterDebitEndValue = new SqlParameter
            {
                ParameterName = "DebitEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditEndValue = new SqlParameter
            {
                ParameterName = "CreditEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterDebitStartValue,
                parameterCreditStartValue,
                parameterDebitEndValue,
                parameterCreditEndValue,
                new SqlParameter
                {
                    ParameterName = "Check",
                    Value = Check ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccountResult>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccount] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @DebitStartValue OUTPUT, @CreditStartValue OUTPUT, @DebitEndValue OUTPUT, @CreditEndValue OUTPUT, @Check", sqlParameters, cancellationToken);

            DebitStartValue.SetValue(parameterDebitStartValue.Value);
            CreditStartValue.SetValue(parameterCreditStartValue.Value);
            DebitEndValue.SetValue(parameterDebitEndValue.Value);
            CreditEndValue.SetValue(parameterCreditEndValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccount_1111111Result>> AccountingReportTotalByOneAccount_1111111Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, bool? Check, OutputParameter<decimal?> DebitStartValue, OutputParameter<decimal?> CreditStartValue, OutputParameter<decimal?> DebitEndValue, OutputParameter<decimal?> CreditEndValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDebitStartValue = new SqlParameter
            {
                ParameterName = "DebitStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditStartValue = new SqlParameter
            {
                ParameterName = "CreditStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterDebitEndValue = new SqlParameter
            {
                ParameterName = "DebitEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditEndValue = new SqlParameter
            {
                ParameterName = "CreditEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterDebitStartValue,
                parameterCreditStartValue,
                parameterDebitEndValue,
                parameterCreditEndValue,
                new SqlParameter
                {
                    ParameterName = "Check",
                    Value = Check ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccount_1111111Result>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccount_1111111] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @DebitStartValue OUTPUT, @CreditStartValue OUTPUT, @DebitEndValue OUTPUT, @CreditEndValue OUTPUT, @Check", sqlParameters, cancellationToken);

            DebitStartValue.SetValue(parameterDebitStartValue.Value);
            CreditStartValue.SetValue(parameterCreditStartValue.Value);
            DebitEndValue.SetValue(parameterDebitEndValue.Value);
            CreditEndValue.SetValue(parameterCreditEndValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccount_bkResult>> AccountingReportTotalByOneAccount_bkAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, bool? Check, OutputParameter<decimal?> DebitStartValue, OutputParameter<decimal?> CreditStartValue, OutputParameter<decimal?> DebitEndValue, OutputParameter<decimal?> CreditEndValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDebitStartValue = new SqlParameter
            {
                ParameterName = "DebitStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditStartValue = new SqlParameter
            {
                ParameterName = "CreditStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterDebitEndValue = new SqlParameter
            {
                ParameterName = "DebitEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditEndValue = new SqlParameter
            {
                ParameterName = "CreditEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterDebitStartValue,
                parameterCreditStartValue,
                parameterDebitEndValue,
                parameterCreditEndValue,
                new SqlParameter
                {
                    ParameterName = "Check",
                    Value = Check ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccount_bkResult>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccount_bk] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @DebitStartValue OUTPUT, @CreditStartValue OUTPUT, @DebitEndValue OUTPUT, @CreditEndValue OUTPUT, @Check", sqlParameters, cancellationToken);

            DebitStartValue.SetValue(parameterDebitStartValue.Value);
            CreditStartValue.SetValue(parameterCreditStartValue.Value);
            DebitEndValue.SetValue(parameterDebitEndValue.Value);
            CreditEndValue.SetValue(parameterCreditEndValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccount_bk_20201225Result>> AccountingReportTotalByOneAccount_bk_20201225Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, bool? Check, OutputParameter<decimal?> DebitStartValue, OutputParameter<decimal?> CreditStartValue, OutputParameter<decimal?> DebitEndValue, OutputParameter<decimal?> CreditEndValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDebitStartValue = new SqlParameter
            {
                ParameterName = "DebitStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditStartValue = new SqlParameter
            {
                ParameterName = "CreditStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterDebitEndValue = new SqlParameter
            {
                ParameterName = "DebitEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditEndValue = new SqlParameter
            {
                ParameterName = "CreditEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterDebitStartValue,
                parameterCreditStartValue,
                parameterDebitEndValue,
                parameterCreditEndValue,
                new SqlParameter
                {
                    ParameterName = "Check",
                    Value = Check ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccount_bk_20201225Result>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccount_bk_20201225] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @DebitStartValue OUTPUT, @CreditStartValue OUTPUT, @DebitEndValue OUTPUT, @CreditEndValue OUTPUT, @Check", sqlParameters, cancellationToken);

            DebitStartValue.SetValue(parameterDebitStartValue.Value);
            CreditStartValue.SetValue(parameterCreditStartValue.Value);
            DebitEndValue.SetValue(parameterDebitEndValue.Value);
            CreditEndValue.SetValue(parameterCreditEndValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccount_save_20190704Result>> AccountingReportTotalByOneAccount_save_20190704Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccount_save_20190704Result>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccount_save_20190704] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccount1Result>> AccountingReportTotalByOneAccount1Async(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, bool? Check, OutputParameter<decimal?> DebitStartValue, OutputParameter<decimal?> CreditStartValue, OutputParameter<decimal?> DebitEndValue, OutputParameter<decimal?> CreditEndValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDebitStartValue = new SqlParameter
            {
                ParameterName = "DebitStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditStartValue = new SqlParameter
            {
                ParameterName = "CreditStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterDebitEndValue = new SqlParameter
            {
                ParameterName = "DebitEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditEndValue = new SqlParameter
            {
                ParameterName = "CreditEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterDebitStartValue,
                parameterCreditStartValue,
                parameterDebitEndValue,
                parameterCreditEndValue,
                new SqlParameter
                {
                    ParameterName = "Check",
                    Value = Check ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccount1Result>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccount1] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @DebitStartValue OUTPUT, @CreditStartValue OUTPUT, @DebitEndValue OUTPUT, @CreditEndValue OUTPUT, @Check", sqlParameters, cancellationToken);

            DebitStartValue.SetValue(parameterDebitStartValue.Value);
            CreditStartValue.SetValue(parameterCreditStartValue.Value);
            DebitEndValue.SetValue(parameterDebitEndValue.Value);
            CreditEndValue.SetValue(parameterCreditEndValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingReportTotalByOneAccountTestResult>> AccountingReportTotalByOneAccountTestAsync(string FromDate, string EndDate, string ObjectValue, string AccountNumber, string ZoneID, string GroupBy, string ObjectType, string ReciprocalAccount, string FeeID, string ToolID, string BankAccountNumber, string ContractID, string FeeAllocationID, string SupplyID, string StockID, string StaffID, string CustomerID, string IncidentID, string ProvisionID, string FixedAssetID, string BranchID, string GroupID, string AccVoucherNoID, string PromotionID, string MemberID, bool? Check, OutputParameter<decimal?> DebitStartValue, OutputParameter<decimal?> CreditStartValue, OutputParameter<decimal?> DebitEndValue, OutputParameter<decimal?> CreditEndValue, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDebitStartValue = new SqlParameter
            {
                ParameterName = "DebitStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditStartValue = new SqlParameter
            {
                ParameterName = "CreditStartValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditStartValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterDebitEndValue = new SqlParameter
            {
                ParameterName = "DebitEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DebitEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterCreditEndValue = new SqlParameter
            {
                ParameterName = "CreditEndValue",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = CreditEndValue?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectValue",
                    Size = 8000,
                    Value = ObjectValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectType",
                    Size = 40,
                    Value = ObjectType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeID",
                    Size = 100,
                    Value = FeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToolID",
                    Size = 100,
                    Value = ToolID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountNumber",
                    Size = 100,
                    Value = BankAccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ContractID",
                    Size = 100,
                    Value = ContractID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FeeAllocationID",
                    Size = 100,
                    Value = FeeAllocationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 100,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 100,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 100,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 100,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 100,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProvisionID",
                    Size = 100,
                    Value = ProvisionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FixedAssetID",
                    Size = 100,
                    Value = FixedAssetID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 100,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 100,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccVoucherNoID",
                    Size = 100,
                    Value = AccVoucherNoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PromotionID",
                    Size = 100,
                    Value = PromotionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MemberID",
                    Size = 100,
                    Value = MemberID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterDebitStartValue,
                parameterCreditStartValue,
                parameterDebitEndValue,
                parameterCreditEndValue,
                new SqlParameter
                {
                    ParameterName = "Check",
                    Value = Check ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingReportTotalByOneAccountTestResult>("EXEC @returnValue = [dbo].[Accounting.Report.TotalByOneAccountTest] @FromDate, @EndDate, @ObjectValue, @AccountNumber, @ZoneID, @GroupBy, @ObjectType, @ReciprocalAccount, @FeeID, @ToolID, @BankAccountNumber, @ContractID, @FeeAllocationID, @SupplyID, @StockID, @StaffID, @CustomerID, @IncidentID, @ProvisionID, @FixedAssetID, @BranchID, @GroupID, @AccVoucherNoID, @PromotionID, @MemberID, @DebitStartValue OUTPUT, @CreditStartValue OUTPUT, @DebitEndValue OUTPUT, @CreditEndValue OUTPUT, @Check", sqlParameters, cancellationToken);

            DebitStartValue.SetValue(parameterDebitStartValue.Value);
            CreditStartValue.SetValue(parameterCreditStartValue.Value);
            DebitEndValue.SetValue(parameterDebitEndValue.Value);
            CreditEndValue.SetValue(parameterCreditEndValue.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AccountingSystemCheckDeleteAccountResult>> AccountingSystemCheckDeleteAccountAsync(string AccountNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AccountingSystemCheckDeleteAccountResult>("EXEC @returnValue = [dbo].[Accounting.System.CheckDeleteAccount] @AccountNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> CategoriesGetAppendixNumberAsync(string ContractNumber, OutputParameter<string> AppendixNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAppendixNumber = new SqlParameter
            {
                ParameterName = "AppendixNumber",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AppendixNumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 100,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterAppendixNumber,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Categories.GetAppendixNumber] @ContractNumber, @AppendixNumber OUTPUT", sqlParameters, cancellationToken);

            AppendixNumber.SetValue(parameterAppendixNumber.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractAppendixByContractNumberResult>> CategoriesGetContractAppendixByContractNumberAsync(string ContractNumber, string AppendixNumber, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 2000,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AppendixNumber",
                    Size = 400,
                    Value = AppendixNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractAppendixByContractNumberResult>("EXEC @returnValue = [dbo].[Categories.GetContractAppendixByContractNumber] @ContractNumber, @AppendixNumber, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractDetailByContractNumberResult>> CategoriesGetContractDetailByContractNumberAsync(string ContractNumber, string AppendixNumber, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 2000,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AppendixNumber",
                    Size = 400,
                    Value = AppendixNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractDetailByContractNumberResult>("EXEC @returnValue = [dbo].[Categories.GetContractDetailByContractNumber] @ContractNumber, @AppendixNumber, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractDetailByCustomerIDResult>> CategoriesGetContractDetailByCustomerIDAsync(string CustomerID, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 2000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractDetailByCustomerIDResult>("EXEC @returnValue = [dbo].[Categories.GetContractDetailByCustomerID] @CustomerID, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractDetailNotByAppendixNumberResult>> CategoriesGetContractDetailNotByAppendixNumberAsync(string ContractNumber, string AppendixNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 2000,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AppendixNumber",
                    Size = 400,
                    Value = AppendixNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractDetailNotByAppendixNumberResult>("EXEC @returnValue = [dbo].[Categories.GetContractDetailNotByAppendixNumber] @ContractNumber, @AppendixNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractPaymentByContractNumberResult>> CategoriesGetContractPaymentByContractNumberAsync(string ContractNumber, string AppendixNumber, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 2000,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AppendixNumber",
                    Size = 400,
                    Value = AppendixNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractPaymentByContractNumberResult>("EXEC @returnValue = [dbo].[Categories.GetContractPaymentByContractNumber] @ContractNumber, @AppendixNumber, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractPaymentNotByAppendixNumberResult>> CategoriesGetContractPaymentNotByAppendixNumberAsync(string ContractNumber, string AppendixNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 2000,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AppendixNumber",
                    Size = 400,
                    Value = AppendixNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractPaymentNotByAppendixNumberResult>("EXEC @returnValue = [dbo].[Categories.GetContractPaymentNotByAppendixNumber] @ContractNumber, @AppendixNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesGetContractsResult>> CategoriesGetContractsAsync(string ContractNumber, string CustomerID, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ContractNumber",
                    Size = 2000,
                    Value = ContractNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 2000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesGetContractsResult>("EXEC @returnValue = [dbo].[Categories.GetContracts] @ContractNumber, @CustomerID, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesgetStationsResult>> CategoriesgetStationsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesgetStationsResult>("EXEC @returnValue = [dbo].[Categories.getStations]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesgetStationsByUserIDResult>> CategoriesgetStationsByUserIDAsync(string UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesgetStationsByUserIDResult>("EXEC @returnValue = [dbo].[Categories.getStationsByUserID] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesgetStationsByUserNameResult>> CategoriesgetStationsByUserNameAsync(string UserName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserName",
                    Size = 40,
                    Value = UserName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesgetStationsByUserNameResult>("EXEC @returnValue = [dbo].[Categories.getStationsByUserName] @UserName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CategoriesgetStationsByZoneIDResult>> CategoriesgetStationsByZoneIDAsync(string ZoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 8,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CategoriesgetStationsByZoneIDResult>("EXEC @returnValue = [dbo].[Categories.getStationsByZoneID] @ZoneID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GETXNTKHOResult>> GETXNTKHOAsync(DateTime? Tungay, DateTime? Denngay, string Makho, string Masieuthi, string Manhacc, string Manganhhang, string Manhomhang, string Dbxntname, string Madonvi, string TABLE_NAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Tungay",
                    Value = Tungay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Denngay",
                    Value = Denngay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Makho",
                    Size = 8000,
                    Value = Makho ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Masieuthi",
                    Size = 8000,
                    Value = Masieuthi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Manhacc",
                    Size = 8000,
                    Value = Manhacc ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Manganhhang",
                    Size = 8000,
                    Value = Manganhhang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Manhomhang",
                    Size = 8000,
                    Value = Manhomhang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Dbxntname",
                    Size = 8000,
                    Value = Dbxntname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Madonvi",
                    Size = 8000,
                    Value = Madonvi ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TABLE_NAME",
                    Size = 8000,
                    Value = TABLE_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GETXNTKHOResult>("EXEC @returnValue = [dbo].[GETXNTKHO] @Tungay, @Denngay, @Makho, @Masieuthi, @Manhacc, @Manganhhang, @Manhomhang, @Dbxntname, @Madonvi, @TABLE_NAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportAccumulationDetailByCustomerResult>> ReportsExportAccumulationDetailByCustomerAsync(string CusId, string Fromdate, string Todate, string CusCardNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 8000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusCardNo",
                    Size = 40,
                    Value = CusCardNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportAccumulationDetailByCustomerResult>("EXEC @returnValue = [dbo].[Reports.Export.AccumulationDetailByCustomer] @CusId, @Fromdate, @Todate, @CusCardNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportAccumulationTotalReportResult>> ReportsExportAccumulationTotalReportAsync(string CusId, string CusCardNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 8000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusCardNo",
                    Size = 40,
                    Value = CusCardNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportAccumulationTotalReportResult>("EXEC @returnValue = [dbo].[Reports.Export.AccumulationTotalReport] @CusId, @CusCardNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportCUSTOMER_SUMAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.CUSTOMER_SUM] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportGoodFlagResult>> ReportsExportGoodFlagAsync(string FromDate, string ToDate, string GoodsID, string Brand, string Group, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 2000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportGoodFlagResult>("EXEC @returnValue = [dbo].[Reports.Export.GoodFlag] @FromDate, @ToDate, @GoodsID, @Brand, @Group, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportGoodFlag_oldResult>> ReportsExportGoodFlag_oldAsync(string FromDate, string ToDate, string GoodsID, string Brand, string Group, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 2000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 2000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportGoodFlag_oldResult>("EXEC @returnValue = [dbo].[Reports.Export.GoodFlag_old] @FromDate, @ToDate, @GoodsID, @Brand, @Group, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportINNERAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string SupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 2000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.INNER] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @SupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportInner_SumResult>> ReportsExportInner_SumAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportInner_SumResult>("EXEC @returnValue = [dbo].[Reports.Export.Inner_Sum] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportRateAutoExportResult>> ReportsExportRateAutoExportAsync(string FromDate, string ToDate, string Stock, string GoodsID, string Brand, string Group, string ObjOrderid, string SupId, string OrderID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 2000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 2000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 2000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 2000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjOrderid",
                    Size = 2000,
                    Value = ObjOrderid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 2000,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportRateAutoExportResult>("EXEC @returnValue = [dbo].[Reports.Export.RateAutoExport] @FromDate, @ToDate, @Stock, @GoodsID, @Brand, @Group, @ObjOrderid, @SupId, @OrderID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportRateAutoExport_oldResult>> ReportsExportRateAutoExport_oldAsync(string FromDate, string ToDate, string Stock, string GoodsID, string Brand, string Group, string ObjOrderid, string SupId, string OrderID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 2000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 2000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 2000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 2000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjOrderid",
                    Size = 2000,
                    Value = ObjOrderid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 2000,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportRateAutoExport_oldResult>("EXEC @returnValue = [dbo].[Reports.Export.RateAutoExport_old] @FromDate, @ToDate, @Stock, @GoodsID, @Brand, @Group, @ObjOrderid, @SupId, @OrderID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportRateAutoExportTestResult>> ReportsExportRateAutoExportTestAsync(string FromDate, string ToDate, string Stock, string GoodsID, string Brand, string Group, string ObjOrderid, string SupId, string OrderID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 2000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 2000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 2000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 2000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjOrderid",
                    Size = 2000,
                    Value = ObjOrderid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 2000,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportRateAutoExportTestResult>("EXEC @returnValue = [dbo].[Reports.Export.RateAutoExportTest] @FromDate, @ToDate, @Stock, @GoodsID, @Brand, @Group, @ObjOrderid, @SupId, @OrderID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportRETAILAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, string SupId, string TransactionID, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 8000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 8000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 2000,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.RETAIL] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode, @SupId, @TransactionID, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportRETAIL_NEGATIVEAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 8000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 8000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.RETAIL_NEGATIVE] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportRETAIL_SUMAsync(string ZoneId, string StockId, string StationId, string UserID, string FromDate, string ToDate, string TransCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StationId",
                    Size = 2000,
                    Value = StationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.RETAIL_SUM] @ZoneId, @StockId, @StationId, @UserID, @FromDate, @ToDate, @TransCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportRETAILNotPayAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, string SupId, string TransactionID, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 8000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 8000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 2000,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.RETAILNotPay] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode, @SupId, @TransactionID, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportRetailSummaryResult>> ReportsExportRetailSummaryAsync(string FromDate, string ToDate, string Stock, string GoodsID, string Brand, string Group, string TranCode, string SupId, string TransactionID, string Groupby, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 2000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranCode",
                    Size = 2000,
                    Value = TranCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 8000,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportRetailSummaryResult>("EXEC @returnValue = [dbo].[Reports.Export.RetailSummary] @FromDate, @ToDate, @Stock, @GoodsID, @Brand, @Group, @TranCode, @SupId, @TransactionID, @Groupby, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportRetailSummaryNotPayResult>> ReportsExportRetailSummaryNotPayAsync(string FromDate, string ToDate, string Stock, string GoodsID, string Brand, string Group, string TranCode, string SupId, string UserId, string TransactionID, string Groupby, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 2000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranCode",
                    Size = 2000,
                    Value = TranCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 8000,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 8000,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportRetailSummaryNotPayResult>("EXEC @returnValue = [dbo].[Reports.Export.RetailSummaryNotPay] @FromDate, @ToDate, @Stock, @GoodsID, @Brand, @Group, @TranCode, @SupId, @UserId, @TransactionID, @Groupby, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportTOCUSTOMERAsync(string ZoneID, string StockID, string CusID, string GoodID, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string SupId, string StaffID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 2000,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 2000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusID",
                    Size = 2000,
                    Value = CusID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodID",
                    Size = 2000,
                    Value = GoodID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 2000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.TOCUSTOMER] @ZoneID, @StockID, @CusID, @GoodID, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @SupId, @StaffID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsExportTOPROVIDERAsync(string ZoneId, string StockId, string SupId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Export.TOPROVIDER] @ZoneId, @StockId, @SupId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportWholesaleResult>> ReportsExportWholesaleAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string StaffID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StaffID",
                    Size = 2000,
                    Value = StaffID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportWholesaleResult>("EXEC @returnValue = [dbo].[Reports.Export.Wholesale] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @StaffID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsExportWholesale_SumResult>> ReportsExportWholesale_SumAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsExportWholesale_SumResult>("EXEC @returnValue = [dbo].[Reports.Export.Wholesale_Sum] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsImportCUSTOMER_SUMAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Import.CUSTOMER_SUM] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsImportFROMPROVIDERAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Import.FROMPROVIDER] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsImportImpSummaryResult>> ReportsImportImpSummaryAsync(string FromDate, string ToDate, string Stock, string GoodsID, string Brand, string Group, string TranCode, string SupId, string TransactionID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 2000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranCode",
                    Size = 2000,
                    Value = TranCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 8000,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsImportImpSummaryResult>("EXEC @returnValue = [dbo].[Reports.Import.ImpSummary] @FromDate, @ToDate, @Stock, @GoodsID, @Brand, @Group, @TranCode, @SupId, @TransactionID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsImportINNERAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string SupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 2000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Import.INNER] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @SupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsImportINNER_SUMAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Import.INNER_SUM] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsImportINNER_SUM2Result>> ReportsImportINNER_SUM2Async(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsImportINNER_SUM2Result>("EXEC @returnValue = [dbo].[Reports.Import.INNER_SUM2] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsImportRETAILAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, string TransactionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 2000,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Import.RETAIL] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode, @TransactionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsImportRETAIL_SUMAsync(string ZoneId, string StockId, string StationId, string UserID, string FromDate, string ToDate, string TransCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StationId",
                    Size = 2000,
                    Value = StationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Import.RETAIL_SUM] @ZoneId, @StockId, @StationId, @UserID, @FromDate, @ToDate, @TransCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsImportSummaryFromProviderResult>> ReportsImportSummaryFromProviderAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsImportSummaryFromProviderResult>("EXEC @returnValue = [dbo].[Reports.Import.SummaryFromProvider] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsStockNEGATIVEAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string TransCode, string SupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 8000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 8000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 8000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 8000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 8000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Stock.NEGATIVE] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @TransCode, @SupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsStockOverMaxMinResult>> ReportsStockOverMaxMinAsync(string StockID1, string Brand1, string Group1, string SupID1, string GoodsID1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockID1",
                    Size = 8000,
                    Value = StockID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand1",
                    Size = 8000,
                    Value = Brand1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group1",
                    Size = 8000,
                    Value = Group1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID1",
                    Size = 8000,
                    Value = SupID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID1",
                    Size = 8000,
                    Value = GoodsID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsStockOverMaxMinResult>("EXEC @returnValue = [dbo].[Reports.StockOverMaxMin] @StockID1, @Brand1, @Group1, @SupID1, @GoodsID1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportsStockOverMaxMin_oldResult>> ReportsStockOverMaxMin_oldAsync(string StockID1, string Brand1, string Group1, string SupID1, string GoodsID1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockID1",
                    Size = 8000,
                    Value = StockID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand1",
                    Size = 8000,
                    Value = Brand1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group1",
                    Size = 8000,
                    Value = Group1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID1",
                    Size = 8000,
                    Value = SupID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID1",
                    Size = 8000,
                    Value = GoodsID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportsStockOverMaxMin_oldResult>("EXEC @returnValue = [dbo].[Reports.StockOverMaxMin_old] @StockID1, @Brand1, @Group1, @SupID1, @GoodsID1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsTransCHECKSTATISTICAsync(string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Trans.CHECKSTATISTIC] @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsTransGETDETAIL_EXPAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Trans.GETDETAIL_EXP] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsTransGETDETAIL_IMPAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, string SupID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 2000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Trans.GETDETAIL_IMP] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode, @SupID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsTransGetRetailsAsync(string ZoneId, string GoodId, string BranchID, string GroupID, string SupplierID, string TuNgay, string DenNgay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Size = 200,
                    Value = SupplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TuNgay",
                    Size = 16,
                    Value = TuNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DenNgay",
                    Size = 16,
                    Value = DenNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Trans.GetRetails] @ZoneId, @GoodId, @BranchID, @GroupID, @SupplierID, @TuNgay, @DenNgay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ReportsTransferINZONEAsync(string ZoneId, string StockId, string CusId, string GoodId, string BranchID, string GroupID, string UserID, string FromDate, string ToDate, string TransCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Reports.Transfer.INZONE] @ZoneId, @StockId, @CusId, @GoodId, @BranchID, @GroupID, @UserID, @FromDate, @ToDate, @TransCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> set_trannumberAsync(string vctype, string vcode_type, OutputParameter<string> plast_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterplast_num = new SqlParameter
            {
                ParameterName = "plast_num",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = plast_num?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vctype",
                    Size = 20,
                    Value = vctype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "vcode_type",
                    Size = 20,
                    Value = vcode_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterplast_num,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[set_trannumber] @vctype, @vcode_type, @plast_num OUTPUT", sqlParameters, cancellationToken);

            plast_num.SetValue(parameterplast_num.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonAddzeroAsync(int? vlen, int? vnum, OutputParameter<string> outnumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameteroutnumber = new SqlParameter
            {
                ParameterName = "outnumber",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = outnumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vlen",
                    Value = vlen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "vnum",
                    Value = vnum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameteroutnumber,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.Addzero] @vlen, @vnum, @outnumber OUTPUT", sqlParameters, cancellationToken);

            outnumber.SetValue(parameteroutnumber.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonBarcoderotateResult>> SystemCommonBarcoderotateAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonBarcoderotateResult>("EXEC @returnValue = [dbo].[System.Common.Barcoderotate]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonBarcoderotate_PacketResult>> SystemCommonBarcoderotate_PacketAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonBarcoderotate_PacketResult>("EXEC @returnValue = [dbo].[System.Common.Barcoderotate_Packet]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonBarcoderotate_Packet_printstampResult>> SystemCommonBarcoderotate_Packet_printstampAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonBarcoderotate_Packet_printstampResult>("EXEC @returnValue = [dbo].[System.Common.Barcoderotate_Packet_printstamp]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonchangesysdateResult>> SystemCommonchangesysdateAsync(string changgeto, OutputParameter<string> newdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternewdate = new SqlParameter
            {
                ParameterName = "newdate",
                Size = 16,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = newdate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "changgeto",
                    Size = 16,
                    Value = changgeto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameternewdate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonchangesysdateResult>("EXEC @returnValue = [dbo].[System.Common.changesysdate] @changgeto, @newdate OUTPUT", sqlParameters, cancellationToken);

            newdate.SetValue(parameternewdate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonchangesysdateAutoResult>> SystemCommonchangesysdateAutoAsync(string changgeto, OutputParameter<string> newdate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameternewdate = new SqlParameter
            {
                ParameterName = "newdate",
                Size = 16,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = newdate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "changgeto",
                    Size = 16,
                    Value = changgeto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameternewdate,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonchangesysdateAutoResult>("EXEC @returnValue = [dbo].[System.Common.changesysdateAuto] @changgeto, @newdate OUTPUT", sqlParameters, cancellationToken);

            newdate.SetValue(parameternewdate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonCheckcatalogResult>> SystemCommonCheckcatalogAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonCheckcatalogResult>("EXEC @returnValue = [dbo].[System.Common.Checkcatalog]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonCheckIDResult>> SystemCommonCheckIDAsync(string pcode_type, OutputParameter<string> plast_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterplast_num = new SqlParameter
            {
                ParameterName = "plast_num",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = plast_num?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pcode_type",
                    Size = 20,
                    Value = pcode_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterplast_num,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonCheckIDResult>("EXEC @returnValue = [dbo].[System.Common.CheckID] @pcode_type, @plast_num OUTPUT", sqlParameters, cancellationToken);

            plast_num.SetValue(parameterplast_num.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonFomulaSeparatorResult>> SystemCommonFomulaSeparatorAsync(string Array, string Fromdate, string Todate, string VReciprocalAccount, string PS_SD, string IncidentSign, string ValueSign, string CheckDate, OutputParameter<decimal?> KQ, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterKQ = new SqlParameter
            {
                ParameterName = "KQ",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = KQ?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Array",
                    Size = 400,
                    Value = Array ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VReciprocalAccount",
                    Size = 400,
                    Value = VReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterKQ,
                new SqlParameter
                {
                    ParameterName = "PS_SD",
                    Size = 16,
                    Value = PS_SD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentSign",
                    Size = 400,
                    Value = IncidentSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValueSign",
                    Size = 400,
                    Value = ValueSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CheckDate",
                    Size = 40,
                    Value = CheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonFomulaSeparatorResult>("EXEC @returnValue = [dbo].[System.Common.FomulaSeparator] @Array, @Fromdate, @Todate, @VReciprocalAccount, @KQ OUTPUT, @PS_SD, @IncidentSign, @ValueSign, @CheckDate", sqlParameters, cancellationToken);

            KQ.SetValue(parameterKQ.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonFomulaSeparator2Async(string Array, DataTable SummarizingBusinesType, OutputParameter<decimal?> KQ, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterKQ = new SqlParameter
            {
                ParameterName = "KQ",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = KQ?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Array",
                    Size = 400,
                    Value = Array ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SummarizingBusinesType",
                    Value = SummarizingBusinesType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[SummarizingBusinesType]",
                },
                parameterKQ,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.FomulaSeparator2] @Array, @SummarizingBusinesType, @KQ OUTPUT", sqlParameters, cancellationToken);

            KQ.SetValue(parameterKQ.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonFomulaSeparatorForBANGCANDOIKETOANResult>> SystemCommonFomulaSeparatorForBANGCANDOIKETOANAsync(string Array, string Fromdate, string Todate, string VReciprocalAccount, string PS_SD, string IncidentSign, string ValueSign, string CheckDate, OutputParameter<decimal?> KQ, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterKQ = new SqlParameter
            {
                ParameterName = "KQ",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = KQ?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Array",
                    Size = 400,
                    Value = Array ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VReciprocalAccount",
                    Size = 400,
                    Value = VReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterKQ,
                new SqlParameter
                {
                    ParameterName = "PS_SD",
                    Size = 16,
                    Value = PS_SD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentSign",
                    Size = 400,
                    Value = IncidentSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValueSign",
                    Size = 400,
                    Value = ValueSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CheckDate",
                    Size = 40,
                    Value = CheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonFomulaSeparatorForBANGCANDOIKETOANResult>("EXEC @returnValue = [dbo].[System.Common.FomulaSeparatorForBANGCANDOIKETOAN] @Array, @Fromdate, @Todate, @VReciprocalAccount, @KQ OUTPUT, @PS_SD, @IncidentSign, @ValueSign, @CheckDate", sqlParameters, cancellationToken);

            KQ.SetValue(parameterKQ.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonFomulaSeparatorForLUUCHUYENTIENTEResult>> SystemCommonFomulaSeparatorForLUUCHUYENTIENTEAsync(string Array, string Fromdate, string Todate, string VReciprocalAccount, string PS_SD, string IncidentSign, string ValueSign, string CheckDate, OutputParameter<decimal?> KQ, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterKQ = new SqlParameter
            {
                ParameterName = "KQ",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = KQ?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Array",
                    Size = 400,
                    Value = Array ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VReciprocalAccount",
                    Size = 400,
                    Value = VReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterKQ,
                new SqlParameter
                {
                    ParameterName = "PS_SD",
                    Size = 16,
                    Value = PS_SD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentSign",
                    Size = 400,
                    Value = IncidentSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValueSign",
                    Size = 400,
                    Value = ValueSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CheckDate",
                    Size = 40,
                    Value = CheckDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonFomulaSeparatorForLUUCHUYENTIENTEResult>("EXEC @returnValue = [dbo].[System.Common.FomulaSeparatorForLUUCHUYENTIENTE] @Array, @Fromdate, @Todate, @VReciprocalAccount, @KQ OUTPUT, @PS_SD, @IncidentSign, @ValueSign, @CheckDate", sqlParameters, cancellationToken);

            KQ.SetValue(parameterKQ.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonGetAmountFromAccountingAsync(string FromDate, string EndDate, string AccountNumber, string ReciprocalAccount, string TypeAcount, string PS_SD, string VIncidentSign, string ValueSign, string Negative, OutputParameter<decimal?> AmountOut, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAmountOut = new SqlParameter
            {
                ParameterName = "AmountOut",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AmountOut?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeAcount",
                    Size = 40,
                    Value = TypeAcount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PS_SD",
                    Size = 16,
                    Value = PS_SD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VIncidentSign",
                    Size = 400,
                    Value = VIncidentSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValueSign",
                    Size = 400,
                    Value = ValueSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Negative",
                    Size = 1,
                    Value = Negative ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterAmountOut,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.GetAmountFromAccounting] @FromDate, @EndDate, @AccountNumber, @ReciprocalAccount, @TypeAcount, @PS_SD, @VIncidentSign, @ValueSign, @Negative, @AmountOut OUTPUT", sqlParameters, cancellationToken);

            AmountOut.SetValue(parameterAmountOut.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonGetAmountFromAccountingForBANGCANDOIKETOANResult>> SystemCommonGetAmountFromAccountingForBANGCANDOIKETOANAsync(string FromDate, string EndDate, string AccountNumber, string ReciprocalAccount, string TypeAcount, string PS_SD, string VIncidentSign, string ValueSign, string Negative, OutputParameter<decimal?> AmountOut, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAmountOut = new SqlParameter
            {
                ParameterName = "AmountOut",
                Precision = 18,
                Scale = 6,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AmountOut?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 16,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountNumber",
                    Size = 400,
                    Value = AccountNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReciprocalAccount",
                    Size = 400,
                    Value = ReciprocalAccount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TypeAcount",
                    Size = 40,
                    Value = TypeAcount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PS_SD",
                    Size = 16,
                    Value = PS_SD ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VIncidentSign",
                    Size = 400,
                    Value = VIncidentSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ValueSign",
                    Size = 400,
                    Value = ValueSign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Negative",
                    Size = 1,
                    Value = Negative ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterAmountOut,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonGetAmountFromAccountingForBANGCANDOIKETOANResult>("EXEC @returnValue = [dbo].[System.Common.GetAmountFromAccountingForBANGCANDOIKETOAN] @FromDate, @EndDate, @AccountNumber, @ReciprocalAccount, @TypeAcount, @PS_SD, @VIncidentSign, @ValueSign, @Negative, @AmountOut OUTPUT", sqlParameters, cancellationToken);

            AmountOut.SetValue(parameterAmountOut.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommongetDateCodeAsync(int? vType, OutputParameter<string> vExpireDate, OutputParameter<string> vExpireCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametervExpireDate = new SqlParameter
            {
                ParameterName = "vExpireDate",
                Size = 16,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = vExpireDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parametervExpireCode = new SqlParameter
            {
                ParameterName = "vExpireCode",
                Size = 8,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = vExpireCode?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parametervExpireDate,
                parametervExpireCode,
                new SqlParameter
                {
                    ParameterName = "vType",
                    Value = vType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.getDateCode] @vExpireDate OUTPUT, @vExpireCode OUTPUT, @vType", sqlParameters, cancellationToken);

            vExpireDate.SetValue(parametervExpireDate.Value);
            vExpireCode.SetValue(parametervExpireCode.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommongetTrannumberAsync(string vctype, string vcode_type, string ZoneID, OutputParameter<string> plast_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterplast_num = new SqlParameter
            {
                ParameterName = "plast_num",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = plast_num?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vctype",
                    Size = 20,
                    Value = vctype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vcode_type",
                    Size = 20,
                    Value = vcode_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterplast_num,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.getTrannumber] @vctype, @vcode_type, @ZoneID, @plast_num OUTPUT", sqlParameters, cancellationToken);

            plast_num.SetValue(parameterplast_num.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommongetTrannumber1Async(string vctype, string vcode_type, OutputParameter<string> plast_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterplast_num = new SqlParameter
            {
                ParameterName = "plast_num",
                Size = 30,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = plast_num?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vctype",
                    Size = 20,
                    Value = vctype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vcode_type",
                    Size = 20,
                    Value = vcode_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterplast_num,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.getTrannumber1] @vctype, @vcode_type, @plast_num OUTPUT", sqlParameters, cancellationToken);

            plast_num.SetValue(parameterplast_num.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonLastBusinessDateAsync(string Fromdate, string Todate, OutputParameter<string> LastFromDate, OutputParameter<string> LastToDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterLastFromDate = new SqlParameter
            {
                ParameterName = "LastFromDate",
                Size = 32,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = LastFromDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterLastToDate = new SqlParameter
            {
                ParameterName = "LastToDate",
                Size = 32,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = LastToDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterLastFromDate,
                parameterLastToDate,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.LastBusinessDate] @Fromdate, @Todate, @LastFromDate OUTPUT, @LastToDate OUTPUT", sqlParameters, cancellationToken);

            LastFromDate.SetValue(parameterLastFromDate.Value);
            LastToDate.SetValue(parameterLastToDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonListAccountResult>> SystemCommonListAccountAsync(string AcountList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AcountList",
                    Size = 8000,
                    Value = AcountList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonListAccountResult>("EXEC @returnValue = [dbo].[System.Common.ListAccount] @AcountList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemCommonListContractByCustomersResult>> SystemCommonListContractByCustomersAsync(string CustomerID, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 2000,
                    Value = CustomerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemCommonListContractByCustomersResult>("EXEC @returnValue = [dbo].[System.Common.ListContractByCustomers] @CustomerID, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonset_trannumberAsync(string vctype, string vcode_type, string ZoneID, OutputParameter<string> plast_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterplast_num = new SqlParameter
            {
                ParameterName = "plast_num",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = plast_num?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vctype",
                    Size = 20,
                    Value = vctype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "vcode_type",
                    Size = 20,
                    Value = vcode_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterplast_num,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.set_trannumber] @vctype, @vcode_type, @ZoneID, @plast_num OUTPUT", sqlParameters, cancellationToken);

            plast_num.SetValue(parameterplast_num.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonset_trannumber1Async(string vctype, string vcode_type, OutputParameter<string> plast_num, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterplast_num = new SqlParameter
            {
                ParameterName = "plast_num",
                Size = 40,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = plast_num?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vctype",
                    Size = 20,
                    Value = vctype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "vcode_type",
                    Size = 20,
                    Value = vcode_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterplast_num,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.set_trannumber1] @vctype, @vcode_type, @plast_num OUTPUT", sqlParameters, cancellationToken);

            plast_num.SetValue(parameterplast_num.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemCommonset_VoucherNumberAsync(string VoucherTypeCategory, OutputParameter<string> VoucherNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterVoucherNumber = new SqlParameter
            {
                ParameterName = "VoucherNumber",
                Size = 100,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = VoucherNumber?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VoucherTypeCategory",
                    Size = 20,
                    Value = VoucherTypeCategory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterVoucherNumber,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Common.set_VoucherNumber] @VoucherTypeCategory, @VoucherNumber OUTPUT", sqlParameters, cancellationToken);

            VoucherNumber.SetValue(parameterVoucherNumber.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemConfigurationgetSysParamsResult>> SystemConfigurationgetSysParamsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemConfigurationgetSysParamsResult>("EXEC @returnValue = [dbo].[System.Configuration.getSysParams]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemConfigurationgetSysParamsByAllParamsResult>> SystemConfigurationgetSysParamsByAllParamsAsync(string SysParamName, int? SysParamType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SysParamName",
                    Size = 200,
                    Value = SysParamName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SysParamType",
                    Value = SysParamType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemConfigurationgetSysParamsByAllParamsResult>("EXEC @returnValue = [dbo].[System.Configuration.getSysParamsByAllParams] @SysParamName, @SysParamType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemConfigurationgetSysParamsByParamNameResult>> SystemConfigurationgetSysParamsByParamNameAsync(string SysParamName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SysParamName",
                    Size = 200,
                    Value = SysParamName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemConfigurationgetSysParamsByParamNameResult>("EXEC @returnValue = [dbo].[System.Configuration.getSysParamsByParamName] @SysParamName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemConfigurationgetSysParamsByParamNameParamTypeResult>> SystemConfigurationgetSysParamsByParamNameParamTypeAsync(string SysParamName, int? SysParamType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SysParamName",
                    Size = 200,
                    Value = SysParamName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SysParamType",
                    Value = SysParamType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemConfigurationgetSysParamsByParamNameParamTypeResult>("EXEC @returnValue = [dbo].[System.Configuration.getSysParamsByParamNameParamType] @SysParamName, @SysParamType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemConfigurationgetSysParamsByParamTypeResult>> SystemConfigurationgetSysParamsByParamTypeAsync(int? SysParamType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SysParamType",
                    Value = SysParamType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemConfigurationgetSysParamsByParamTypeResult>("EXEC @returnValue = [dbo].[System.Configuration.getSysParamsByParamType] @SysParamType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemLogginggetLogsResult>> SystemLogginggetLogsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemLogginggetLogsResult>("EXEC @returnValue = [dbo].[System.Logging.getLogs]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemLogginggetLogsByAllParamsAsync(DateTime? FDate, DateTime? TDate, string ZoneID, string StationID, string UserID, string FormID, string ControlID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FDate",
                    Value = FDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "TDate",
                    Value = TDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StationID",
                    Size = 6,
                    Value = StationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormID",
                    Size = 200,
                    Value = FormID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ControlID",
                    Size = 100,
                    Value = ControlID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Logging.getLogsByAllParams] @FDate, @TDate, @ZoneID, @StationID, @UserID, @FormID, @ControlID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemLogginggetLogsByControlIDResult>> SystemLogginggetLogsByControlIDAsync(string ControlID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ControlID",
                    Size = 100,
                    Value = ControlID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemLogginggetLogsByControlIDResult>("EXEC @returnValue = [dbo].[System.Logging.getLogsByControlID] @ControlID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemLogginggetLogsByFormIDResult>> SystemLogginggetLogsByFormIDAsync(string FormID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FormID",
                    Size = 200,
                    Value = FormID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemLogginggetLogsByFormIDResult>("EXEC @returnValue = [dbo].[System.Logging.getLogsByFormID] @FormID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemLogginggetLogsByStationIDResult>> SystemLogginggetLogsByStationIDAsync(string StationID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StationID",
                    Size = 6,
                    Value = StationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemLogginggetLogsByStationIDResult>("EXEC @returnValue = [dbo].[System.Logging.getLogsByStationID] @StationID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemLogginggetLogsByUserIDResult>> SystemLogginggetLogsByUserIDAsync(string UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemLogginggetLogsByUserIDResult>("EXEC @returnValue = [dbo].[System.Logging.getLogsByUserID] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemLogginggetLogsByZoneIDResult>> SystemLogginggetLogsByZoneIDAsync(string ZoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemLogginggetLogsByZoneIDResult>("EXEC @returnValue = [dbo].[System.Logging.getLogsByZoneID] @ZoneID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemMenusgetMenusResult>> SystemMenusgetMenusAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemMenusgetMenusResult>("EXEC @returnValue = [dbo].[System.Menus.getMenus]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemMenusgetMenusByAllParamsResult>> SystemMenusgetMenusByAllParamsAsync(string UserID, string MenuID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MenuID",
                    Size = 100,
                    Value = MenuID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemMenusgetMenusByAllParamsResult>("EXEC @returnValue = [dbo].[System.Menus.getMenusByAllParams] @UserID, @MenuID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemMenusgetMenusByUserIDResult>> SystemMenusgetMenusByUserIDAsync(string UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemMenusgetMenusByUserIDResult>("EXEC @returnValue = [dbo].[System.Menus.getMenusByUserID] @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemMenusgetMenusByUserIDMenuIDResult>> SystemMenusgetMenusByUserIDMenuIDAsync(string UserID, string MenuID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MenuID",
                    Size = 100,
                    Value = MenuID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemMenusgetMenusByUserIDMenuIDResult>("EXEC @returnValue = [dbo].[System.Menus.getMenusByUserIDMenuID] @UserID, @MenuID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemMenusgetMenusByUserIDZoneIDResult>> SystemMenusgetMenusByUserIDZoneIDAsync(string UserID, string ZoneID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 100,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemMenusgetMenusByUserIDZoneIDResult>("EXEC @returnValue = [dbo].[System.Menus.getMenusByUserIDZoneID] @UserID, @ZoneID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemSecuritygetPermmissionFromRoleByUserIDRoleIDZoneIDResult>> SystemSecuritygetPermmissionFromRoleByUserIDRoleIDZoneIDAsync(string RoleID, string ZoneID, string UserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleID",
                    Size = 6,
                    Value = RoleID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneID",
                    Size = 4,
                    Value = ZoneID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 10,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemSecuritygetPermmissionFromRoleByUserIDRoleIDZoneIDResult>("EXEC @returnValue = [dbo].[System.Security.getPermmissionFromRoleByUserIDRoleIDZoneID] @RoleID, @ZoneID, @UserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockAutProcessNegtiveResult>> SystemStockAutProcessNegtiveAsync(string STOCKRETAIL, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "STOCKRETAIL",
                    Size = 8000,
                    Value = STOCKRETAIL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockAutProcessNegtiveResult>("EXEC @returnValue = [dbo].[System.Stock.AutProcessNegtive] @STOCKRETAIL", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockCreateEndingInventResult>> SystemStockCreateEndingInventAsync(string Fromdate, string TableOut, string Stock, string Brand, string Group, string SupID, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableOut",
                    Size = 100,
                    Value = TableOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockCreateEndingInventResult>("EXEC @returnValue = [dbo].[System.Stock.CreateEndingInvent] @Fromdate, @TableOut, @Stock, @Brand, @Group, @SupID, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemStockCreateMarkinfoAsync(string Fromdate, string TableOut, string Stock, string Brand, string Group, string SupID, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableOut",
                    Size = 100,
                    Value = TableOut ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Stock.CreateMarkinfo] @Fromdate, @TableOut, @Stock, @Brand, @Group, @SupID, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListChangePriceResult>> SystemStockGetListChangePriceAsync(string Fromdate, string StockID, string TransID, string CreatedBy, string GoodsID, DataTable CategoryGoodIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransID",
                    Size = 8000,
                    Value = TransID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 8000,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryGoodIDs",
                    Value = CategoryGoodIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategoryGoodID]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListChangePriceResult>("EXEC @returnValue = [dbo].[System.Stock.GetListChangePrice] @Fromdate, @StockID, @TransID, @CreatedBy, @GoodsID, @CategoryGoodIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListChangePricePacketsResult>> SystemStockGetListChangePricePacketsAsync(string TransID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransID",
                    Size = 8000,
                    Value = TransID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListChangePricePacketsResult>("EXEC @returnValue = [dbo].[System.Stock.GetListChangePricePackets] @TransID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListChangePriceTestResult>> SystemStockGetListChangePriceTestAsync(string Fromdate, string StockID, string TransID, string CreatedBy, string GoodsID, DataTable CategoryGoodIDs, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransID",
                    Size = 8000,
                    Value = TransID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Size = 8000,
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryGoodIDs",
                    Value = CategoryGoodIDs ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategoryGoodID]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListChangePriceTestResult>("EXEC @returnValue = [dbo].[System.Stock.GetListChangePriceTest] @Fromdate, @StockID, @TransID, @CreatedBy, @GoodsID, @CategoryGoodIDs", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListForOrderResult>> SystemStockGetListForOrderAsync(string Fromdate, string Todate, string StockID, string SupplyID, string Brand, string Group, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListForOrderResult>("EXEC @returnValue = [dbo].[System.Stock.GetListForOrder] @Fromdate, @Todate, @StockID, @SupplyID, @Brand, @Group, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListForOrder_testResult>> SystemStockGetListForOrder_testAsync(string Fromdate, string Todate, string StockID, string SupplyID, string Brand, string Group, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListForOrder_testResult>("EXEC @returnValue = [dbo].[System.Stock.GetListForOrder_test] @Fromdate, @Todate, @StockID, @SupplyID, @Brand, @Group, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListForOrdertessResult>> SystemStockGetListForOrdertessAsync(string Fromdate, string Todate, string StockID, string SupplyID, string Brand, string Group, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListForOrdertessResult>("EXEC @returnValue = [dbo].[System.Stock.GetListForOrdertess] @Fromdate, @Todate, @StockID, @SupplyID, @Brand, @Group, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListForOrdertestResult>> SystemStockGetListForOrdertestAsync(string Fromdate, string Todate, string StockID, string SupplyID, string Brand, string Group, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListForOrdertestResult>("EXEC @returnValue = [dbo].[System.Stock.GetListForOrdertest] @Fromdate, @Todate, @StockID, @SupplyID, @Brand, @Group, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListForScanResult>> SystemStockGetListForScanAsync(string TransID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransID",
                    Size = 8000,
                    Value = TransID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListForScanResult>("EXEC @returnValue = [dbo].[System.Stock.GetListForScan] @TransID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetListGoodFlagResult>> SystemStockGetListGoodFlagAsync(string SupplyID, string Brand, string Group, string GoodsID, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 10,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetListGoodFlagResult>("EXEC @returnValue = [dbo].[System.Stock.GetListGoodFlag] @SupplyID, @Brand, @Group, @GoodsID, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetMinMaxResult>> SystemStockGetMinMaxAsync(string QtyMinMaxId, string StockID, string SupplyID, string Brand, string Group, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QtyMinMaxId",
                    Size = 20,
                    Value = QtyMinMaxId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetMinMaxResult>("EXEC @returnValue = [dbo].[System.Stock.GetMinMax] @QtyMinMaxId, @StockID, @SupplyID, @Brand, @Group, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGetMinMaxTestResult>> SystemStockGetMinMaxTestAsync(string QtyMinMaxId, string StockID, string SupplyID, string Brand, string Group, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QtyMinMaxId",
                    Size = 20,
                    Value = QtyMinMaxId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGetMinMaxTestResult>("EXEC @returnValue = [dbo].[System.Stock.GetMinMaxTest] @QtyMinMaxId, @StockID, @SupplyID, @Brand, @Group, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockGoodDetailResult>> SystemStockGoodDetailAsync(string FromDate, string Todate, string StockID, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockGoodDetailResult>("EXEC @returnValue = [dbo].[System.Stock.GoodDetail] @FromDate, @Todate, @StockID, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockInventory_updateResult>> SystemStockInventory_updateAsync(string TransID, string Table, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransID",
                    Size = 40,
                    Value = TransID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Table",
                    Size = 200,
                    Value = Table ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockInventory_updateResult>("EXEC @returnValue = [dbo].[System.Stock.Inventory_update] @TransID, @Table", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoExportSaleByOrderResult>> SystemStockMakeAutoExportSaleByOrderAsync(string OrderID, string StockID, string SupplyID, string CreateByID, string ImpExpMethodCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 60,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImpExpMethodCode",
                    Size = 100,
                    Value = ImpExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoExportSaleByOrderResult>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoExportSaleByOrder] @OrderID, @StockID, @SupplyID, @CreateByID, @ImpExpMethodCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoExportSaleByOrder_loiResult>> SystemStockMakeAutoExportSaleByOrder_loiAsync(string OrderID, string StockID, string SupplyID, string CreateByID, string ImpExpMethodCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 60,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImpExpMethodCode",
                    Size = 100,
                    Value = ImpExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoExportSaleByOrder_loiResult>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoExportSaleByOrder_loi] @OrderID, @StockID, @SupplyID, @CreateByID, @ImpExpMethodCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoExportSaleByOrder2020Result>> SystemStockMakeAutoExportSaleByOrder2020Async(string OrderID, string StockID, string SupplyID, string CreateByID, string ImpExpMethodCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 60,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImpExpMethodCode",
                    Size = 100,
                    Value = ImpExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoExportSaleByOrder2020Result>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoExportSaleByOrder2020] @OrderID, @StockID, @SupplyID, @CreateByID, @ImpExpMethodCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoExportSaleByOrderTestResult>> SystemStockMakeAutoExportSaleByOrderTestAsync(string OrderID, string StockID, string SupplyID, string CreateByID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "OrderID",
                    Size = 60,
                    Value = OrderID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoExportSaleByOrderTestResult>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoExportSaleByOrderTest] @OrderID, @StockID, @SupplyID, @CreateByID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoImportByInstockResult>> SystemStockMakeAutoImportByInstockAsync(string StockID, string CreateByID, string ImpExpMethodCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImpExpMethodCode",
                    Size = 100,
                    Value = ImpExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoImportByInstockResult>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoImportByInstock] @StockID, @CreateByID, @ImpExpMethodCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoOrdersResult>> SystemStockMakeAutoOrdersAsync(string StockID, string SupplyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoOrdersResult>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoOrders] @StockID, @SupplyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockMakeAutoOrdersTestResult>> SystemStockMakeAutoOrdersTestAsync(string StockID, string SupplyID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StockID",
                    Size = 8000,
                    Value = StockID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockMakeAutoOrdersTestResult>("EXEC @returnValue = [dbo].[System.Stock.MakeAutoOrdersTest] @StockID, @SupplyID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockReblanceStatisticResult>> SystemStockReblanceStatisticAsync(string TransactionID, string ExpMethodCode, string ImpMethodCode, string IncidentID, string SupplyID, string CreateByID, OutputParameter<string> Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterStatus = new SqlParameter
            {
                ParameterName = "Status",
                Size = 8000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 60,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExpMethodCode",
                    Size = 8000,
                    Value = ExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImpMethodCode",
                    Size = 8000,
                    Value = ImpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterStatus,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockReblanceStatisticResult>("EXEC @returnValue = [dbo].[System.Stock.ReblanceStatistic] @TransactionID, @ExpMethodCode, @ImpMethodCode, @IncidentID, @SupplyID, @CreateByID, @Status OUTPUT", sqlParameters, cancellationToken);

            Status.SetValue(parameterStatus.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockReblanceStatistic_devResult>> SystemStockReblanceStatistic_devAsync(string TransactionID, string ExpMethodCode, string ImpMethodCode, string IncidentID, string SupplyID, string CreateByID, OutputParameter<string> Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterStatus = new SqlParameter
            {
                ParameterName = "Status",
                Size = 8000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 60,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExpMethodCode",
                    Size = 8000,
                    Value = ExpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ImpMethodCode",
                    Size = 8000,
                    Value = ImpMethodCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IncidentID",
                    Size = 8000,
                    Value = IncidentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterStatus,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockReblanceStatistic_devResult>("EXEC @returnValue = [dbo].[System.Stock.ReblanceStatistic_dev] @TransactionID, @ExpMethodCode, @ImpMethodCode, @IncidentID, @SupplyID, @CreateByID, @Status OUTPUT", sqlParameters, cancellationToken);

            Status.SetValue(parameterStatus.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockReblanceStatistic_oldResult>> SystemStockReblanceStatistic_oldAsync(string TransactionID, string SupplyID, string CreateByID, OutputParameter<string> Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterStatus = new SqlParameter
            {
                ParameterName = "Status",
                Size = 8000,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = Status?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 60,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupplyID",
                    Size = 8000,
                    Value = SupplyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateByID",
                    Size = 100,
                    Value = CreateByID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterStatus,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockReblanceStatistic_oldResult>("EXEC @returnValue = [dbo].[System.Stock.ReblanceStatistic_old] @TransactionID, @SupplyID, @CreateByID, @Status OUTPUT", sqlParameters, cancellationToken);

            Status.SetValue(parameterStatus.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemstockReCaculatePriceAsync(string Fromdate, string Zones, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zones",
                    Size = 4,
                    Value = Zones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.stock.ReCaculatePrice] @Fromdate, @Zones, @Stock, @Brand, @Group, @SupID, @GoodsID, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemstockReCaculatePriceSplitNegativeResult>> SystemstockReCaculatePriceSplitNegativeAsync(string Fromdate, string Zones, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Zones",
                    Size = 4,
                    Value = Zones ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemstockReCaculatePriceSplitNegativeResult>("EXEC @returnValue = [dbo].[System.stock.ReCaculatePriceSplitNegative] @Fromdate, @Zones, @Stock, @Brand, @Group, @SupID, @GoodsID, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemstockSetmarkinfoResult>> SystemstockSetmarkinfoAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemstockSetmarkinfoResult>("EXEC @returnValue = [dbo].[System.stock.Setmarkinfo] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfoResult>> SystemStockStockinfoAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfoResult>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_backup20170907Result>> SystemStockStockinfo_backup20170907Async(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_backup20170907Result>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_backup20170907] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_backup20190302Result>> SystemStockStockinfo_backup20190302Async(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_backup20190302Result>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_backup20190302] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_bakResult>> SystemStockStockinfo_bakAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_bakResult>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_bak] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_codingResult>> SystemStockStockinfo_codingAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_codingResult>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_coding] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_ducResult>> SystemStockStockinfo_ducAsync(string P_Fromdate, string P_Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "P_Fromdate",
                    Size = 16,
                    Value = P_Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "P_Todate",
                    Size = 16,
                    Value = P_Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_ducResult>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_duc] @P_Fromdate, @P_Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_stockInDetailResult>> SystemStockStockinfo_stockInDetailAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_stockInDetailResult>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_stockInDetail] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo_withcutTransactionResult>> SystemStockStockinfo_withcutTransactionAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo_withcutTransactionResult>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo_withcutTransaction] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo1Result>> SystemStockStockinfo1Async(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo1Result>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo1] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfo2222Result>> SystemStockStockinfo2222Async(string LFromdate, string LTodate, string Lcondition, string LStock, string LBrand, string LGroup, string LSupID, string LGoodsID, bool? LPreVat, bool? Linventory, string LGroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "LFromdate",
                    Size = 16,
                    Value = LFromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LTodate",
                    Size = 16,
                    Value = LTodate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Lcondition",
                    Size = 8000,
                    Value = Lcondition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LStock",
                    Size = 8000,
                    Value = LStock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LBrand",
                    Size = 8000,
                    Value = LBrand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LGroup",
                    Size = 8000,
                    Value = LGroup ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LSupID",
                    Size = 8000,
                    Value = LSupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LGoodsID",
                    Size = 8000,
                    Value = LGoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LPreVat",
                    Value = LPreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Linventory",
                    Value = Linventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "LGroupBy",
                    Size = 100,
                    Value = LGroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfo2222Result>("EXEC @returnValue = [dbo].[System.Stock.Stockinfo2222] @LFromdate, @LTodate, @Lcondition, @LStock, @LBrand, @LGroup, @LSupID, @LGoodsID, @LPreVat, @Linventory, @LGroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfoAfterExpResult>> SystemStockStockinfoAfterExpAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfoAfterExpResult>("EXEC @returnValue = [dbo].[System.Stock.StockinfoAfterExp] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemStockStockinforExportSaleByOrderAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Stock.StockinforExportSaleByOrder] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinforExportSaleByOrder_oldResult>> SystemStockStockinforExportSaleByOrder_oldAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinforExportSaleByOrder_oldResult>("EXEC @returnValue = [dbo].[System.Stock.StockinforExportSaleByOrder_old] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinforExportSaleByOrderTestResult>> SystemStockStockinforExportSaleByOrderTestAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinforExportSaleByOrderTestResult>("EXEC @returnValue = [dbo].[System.Stock.StockinforExportSaleByOrderTest] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinforOrderResult>> SystemStockStockinforOrderAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinforOrderResult>("EXEC @returnValue = [dbo].[System.Stock.StockinforOrder] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinforRetailsResult>> SystemStockStockinforRetailsAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, string TblName, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TblName",
                    Size = 200,
                    Value = TblName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinforRetailsResult>("EXEC @returnValue = [dbo].[System.Stock.StockinforRetails] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @TblName, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockStockinfoSumbyGoodResult>> SystemStockStockinfoSumbyGoodAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, string GroupBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "GroupBy",
                    Size = 100,
                    Value = GroupBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockStockinfoSumbyGoodResult>("EXEC @returnValue = [dbo].[System.Stock.StockinfoSumbyGood] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory, @GroupBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockSummaryXNTResult>> SystemStockSummaryXNTAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockSummaryXNTResult>("EXEC @returnValue = [dbo].[System.Stock.SummaryXNT] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockSummaryXNT_testResult>> SystemStockSummaryXNT_testAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockSummaryXNT_testResult>("EXEC @returnValue = [dbo].[System.Stock.SummaryXNT_test] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockSummaryXNTTestResult>> SystemStockSummaryXNTTestAsync(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockSummaryXNTTestResult>("EXEC @returnValue = [dbo].[System.Stock.SummaryXNTTest] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SystemStockSummaryXNTTest2Result>> SystemStockSummaryXNTTest2Async(string FromDate, string ToDate, string TransCode, string ZoneId, string StockId, string GoodId, string BranchID, string GroupID, string CusId, string TranID, string SupId, string UserID, string Groupby, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 16,
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 16,
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 16,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StockId",
                    Size = 2000,
                    Value = StockId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodId",
                    Size = 2000,
                    Value = GoodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BranchID",
                    Size = 2000,
                    Value = BranchID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GroupID",
                    Size = 2000,
                    Value = GroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CusId",
                    Size = 2000,
                    Value = CusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TranID",
                    Size = 2000,
                    Value = TranID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupId",
                    Size = 2000,
                    Value = SupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 2000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Groupby",
                    Size = 2000,
                    Value = Groupby ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SystemStockSummaryXNTTest2Result>("EXEC @returnValue = [dbo].[System.Stock.SummaryXNTTest2] @FromDate, @ToDate, @TransCode, @ZoneId, @StockId, @GoodId, @BranchID, @GroupID, @CusId, @TranID, @SupId, @UserID, @Groupby", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SystemStockUpdateChangePriceAsync(decimal? ExpWholePrice, decimal? ExpRetailPrice, string UserID, string GoodsID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExpWholePrice",
                    Precision = 19,
                    Scale = 4,
                    Value = ExpWholePrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "ExpRetailPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = ExpRetailPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 8000,
                    Value = UserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[System.Stock.UpdateChangePrice] @ExpWholePrice, @ExpRetailPrice, @UserID, @GoodsID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TOOLSQTYMINMAXResult>> TOOLSQTYMINMAXAsync(string QtyMinMaxId, string Status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QtyMinMaxId",
                    Size = 12,
                    Value = QtyMinMaxId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = Status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TOOLSQTYMINMAXResult>("EXEC @returnValue = [dbo].[TOOLS.QTYMINMAX] @QtyMinMaxId, @Status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeCategorySyncgetCategoriesReferResult>> ToolsSynchronizeCategorySyncgetCategoriesReferAsync(DataTable CategoryData, string TableName, string TableNameRefer, DataTable CategoryData2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableNameRefer",
                    Size = 100,
                    Value = TableNameRefer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryData2",
                    Value = CategoryData2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType2]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeCategorySyncgetCategoriesReferResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.CategorySync.getCategoriesRefer] @CategoryData, @TableName, @TableNameRefer, @CategoryData2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeCategorySyncgetCategoriesRefer2Result>> ToolsSynchronizeCategorySyncgetCategoriesRefer2Async(DataTable CategoryData3, string TableName, string TableNameRefer, DataTable CategoryData2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData3",
                    Value = CategoryData3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableNameRefer",
                    Size = 100,
                    Value = TableNameRefer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryData2",
                    Value = CategoryData2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType2]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeCategorySyncgetCategoriesRefer2Result>("EXEC @returnValue = [dbo].[Tools.Synchronize.CategorySync.getCategoriesRefer2] @CategoryData3, @TableName, @TableNameRefer, @CategoryData2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeCategorySyncgetNewCategoriesResult>> ToolsSynchronizeCategorySyncgetNewCategoriesAsync(DataTable CategoryData, string StartDate, string EndDate, int? DataFilter, string TableName, DataTable CategoryData2, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 28,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 28,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataFilter",
                    Value = DataFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CategoryData2",
                    Value = CategoryData2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType2]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeCategorySyncgetNewCategoriesResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.CategorySync.getNewCategories] @CategoryData, @StartDate, @EndDate, @DataFilter, @TableName, @CategoryData2", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeCategorySyncgetNewCategories2Result>> ToolsSynchronizeCategorySyncgetNewCategories2Async(DataTable CategoryData, string StartDate, string EndDate, int? DataFilter, string TableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType2]",
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 28,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 28,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataFilter",
                    Value = DataFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 28,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeCategorySyncgetNewCategories2Result>("EXEC @returnValue = [dbo].[Tools.Synchronize.CategorySync.getNewCategories2] @CategoryData, @StartDate, @EndDate, @DataFilter, @TableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeChangePriceSyncGetChangePriceResult>> ToolsSynchronizeChangePriceSyncGetChangePriceAsync(DataTable CategoryData, string StartDate, string EndDate, string TableName, int? DataFilter, string TransCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 28,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 28,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataFilter",
                    Value = DataFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeChangePriceSyncGetChangePriceResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.ChangePriceSync.GetChangePrice] @CategoryData, @StartDate, @EndDate, @TableName, @DataFilter, @TransCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeOrdersSyncgetOrderDetailResult>> ToolsSynchronizeOrdersSyncgetOrderDetailAsync(DataTable CategoryData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeOrdersSyncgetOrderDetailResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.OrdersSync.getOrderDetail] @CategoryData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizePromotionSyncGetPromotionResult>> ToolsSynchronizePromotionSyncGetPromotionAsync(DataTable CategoryData, string StartDate, string EndDate, string TableName, int? DataFilter, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 28,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 28,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataFilter",
                    Value = DataFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizePromotionSyncGetPromotionResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.PromotionSync.GetPromotion] @CategoryData, @StartDate, @EndDate, @TableName, @DataFilter", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizePromotionSyncGetPromotionByZoneResult>> ToolsSynchronizePromotionSyncGetPromotionByZoneAsync(DataTable CategoryData, string StartDate, string EndDate, string TableName, int? DataFilter, string ZoneId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 28,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 28,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataFilter",
                    Value = DataFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 4,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizePromotionSyncGetPromotionByZoneResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.PromotionSync.GetPromotionByZone] @CategoryData, @StartDate, @EndDate, @TableName, @DataFilter, @ZoneId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeTransactionsSyncGetTransactionsResult>> ToolsSynchronizeTransactionsSyncGetTransactionsAsync(DataTable CategoryData, string StartDate, string EndDate, string TableName, int? DataFilter, string TransCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 28,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 28,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 100,
                    Value = TableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DataFilter",
                    Value = DataFilter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 4,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeTransactionsSyncGetTransactionsResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.TransactionsSync.GetTransactions] @CategoryData, @StartDate, @EndDate, @TableName, @DataFilter, @TransCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ToolsSynchronizeTransactionsSyncgetTransDetailResult>> ToolsSynchronizeTransactionsSyncgetTransDetailAsync(DataTable CategoryData, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryData",
                    Value = CategoryData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[CategorySyncDataType]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ToolsSynchronizeTransactionsSyncgetTransDetailResult>("EXEC @returnValue = [dbo].[Tools.Synchronize.TransactionsSync.getTransDetail] @CategoryData", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TransTRANSACTIONIMPORTGETDATAAsync(string ZoneId, string TransCode, DateTime? TuNgay, DateTime? DenNgay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 2000,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TuNgay",
                    Value = TuNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DenNgay",
                    Value = DenNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Trans.TRANSACTION.IMPORTGETDATA] @ZoneId, @TransCode, @TuNgay, @DenNgay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TransactionAdjustmentChangePriceAsync(string TransCode, DateTime? TuNgay, DateTime? DenNgay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 2000,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TuNgay",
                    Value = TuNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DenNgay",
                    Value = DenNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[Transaction.Adjustment.ChangePrice] @TransCode, @TuNgay, @DenNgay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TRANSACTIONADJUSTMENTINVENTORYGETGOODSBYCONDITIONResult>> TRANSACTIONADJUSTMENTINVENTORYGETGOODSBYCONDITIONAsync(string Fromdate, string Todate, string condition, string Stock, string Brand, string Group, string SupID, string GoodsID, bool? PreVat, bool? inventory, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Fromdate",
                    Size = 16,
                    Value = Fromdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Todate",
                    Size = 16,
                    Value = Todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "condition",
                    Size = 8000,
                    Value = condition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Stock",
                    Size = 8000,
                    Value = Stock ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Brand",
                    Size = 8000,
                    Value = Brand ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Group",
                    Size = 8000,
                    Value = Group ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SupID",
                    Size = 8000,
                    Value = SupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "GoodsID",
                    Size = 8000,
                    Value = GoodsID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PreVat",
                    Value = PreVat ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "inventory",
                    Value = inventory ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TRANSACTIONADJUSTMENTINVENTORYGETGOODSBYCONDITIONResult>("EXEC @returnValue = [dbo].[TRANSACTION.ADJUSTMENT.INVENTORY.GETGOODSBYCONDITION] @Fromdate, @Todate, @condition, @Stock, @Brand, @Group, @SupID, @GoodsID, @PreVat, @inventory", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TRANSACTIONIMPORTORDERFROMPROVIDERAsync(string ZoneId, string TransCode, DateTime? TuNgay, DateTime? DenNgay, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ZoneId",
                    Size = 2000,
                    Value = ZoneId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TransCode",
                    Size = 2000,
                    Value = TransCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TuNgay",
                    Value = TuNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DenNgay",
                    Value = DenNgay ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TRANSACTION.IMPORT.ORDERFROMPROVIDER] @ZoneId, @TransCode, @TuNgay, @DenNgay", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TransactionsImportImportRetailgetPacketDetailResult>> TransactionsImportImportRetailgetPacketDetailAsync(string TransactionID, string PacketID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TransactionID",
                    Size = 40,
                    Value = TransactionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PacketID",
                    Size = 16,
                    Value = PacketID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TransactionsImportImportRetailgetPacketDetailResult>("EXEC @returnValue = [dbo].[Transactions.Import.ImportRetail.getPacketDetail] @TransactionID, @PacketID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
