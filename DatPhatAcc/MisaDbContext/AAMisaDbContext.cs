// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.EntityFrameworkCore;

namespace DatPhatAcc.MisaDbContext;

public partial class AAMisaDbContext : DbContext
{
    public AAMisaDbContext()
    {
    }

    public AAMisaDbContext(DbContextOptions<AAMisaDbContext> options)
        : base(options)
    {
    }

    #region
    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<AccountDefault> AccountDefaults { get; set; }

    public virtual DbSet<AccountObject> AccountObjects { get; set; }

    public virtual DbSet<AccountObjectBankAccount> AccountObjectBankAccounts { get; set; }

    public virtual DbSet<AccountObjectBelongToGroup> AccountObjectBelongToGroups { get; set; }

    public virtual DbSet<AccountObjectGroup> AccountObjectGroups { get; set; }

    public virtual DbSet<AccountObjectLedger> AccountObjectLedgers { get; set; }

    public virtual DbSet<AccountObjectShippingAddress> AccountObjectShippingAddresses { get; set; }

    public virtual DbSet<AccountTransfer> AccountTransfers { get; set; }

    public virtual DbSet<AgreementInfo> AgreementInfos { get; set; }

    public virtual DbSet<AgreementLastestInfo> AgreementLastestInfos { get; set; }

    public virtual DbSet<AmistaxAllOrg> AmistaxAllOrgs { get; set; }

    public virtual DbSet<AmistaxConfig> AmistaxConfigs { get; set; }

    public virtual DbSet<AmistaxOrg> AmistaxOrgs { get; set; }

    public virtual DbSet<AutoBusiness> AutoBusinesses { get; set; }

    public virtual DbSet<Badeposit> Badeposits { get; set; }

    public virtual DbSet<BadepositDetail> BadepositDetails { get; set; }

    public virtual DbSet<BadepositWithdrawList> BadepositWithdrawLists { get; set; }

    public virtual DbSet<BainternalTransfer> BainternalTransfers { get; set; }

    public virtual DbSet<BainternalTransferDetail> BainternalTransferDetails { get; set; }

    public virtual DbSet<Bank> Banks { get; set; }

    public virtual DbSet<BankAccount> BankAccounts { get; set; }

    public virtual DbSet<BankListAndSalesSummaryReport> BankListAndSalesSummaryReports { get; set; }

    public virtual DbSet<BankSupported> BankSupporteds { get; set; }

    public virtual DbSet<Bareconcile> Bareconciles { get; set; }

    public virtual DbSet<BareconcileTemporaryPaymentVoucher> BareconcileTemporaryPaymentVouchers { get; set; }

    public virtual DbSet<BareconcileTemporaryReceiptVoucher> BareconcileTemporaryReceiptVouchers { get; set; }

    public virtual DbSet<BawithDraw> BawithDraws { get; set; }

    public virtual DbSet<BawithDrawDetail> BawithDrawDetails { get; set; }

    public virtual DbSet<BawithDrawDetailSalary> BawithDrawDetailSalaries { get; set; }

    public virtual DbSet<BawithdrawDetailImportMultiTax> BawithdrawDetailImportMultiTaxes { get; set; }

    public virtual DbSet<BawithdrawDetailImportVat> BawithdrawDetailImportVats { get; set; }

    public virtual DbSet<BawithdrawDetailPersonalIncomeTax> BawithdrawDetailPersonalIncomeTaxes { get; set; }

    public virtual DbSet<BawithdrawDetailTax> BawithdrawDetailTaxes { get; set; }

    public virtual DbSet<BudgetItem> BudgetItems { get; set; }

    public virtual DbSet<Buexpenditure> Buexpenditures { get; set; }

    public virtual DbSet<BuexpenditureDetail> BuexpenditureDetails { get; set; }

    public virtual DbSet<BusinessType> BusinessTypes { get; set; }

    public virtual DbSet<BusinessTypeHiddenOption> BusinessTypeHiddenOptions { get; set; }

    public virtual DbSet<BusinessTypeVisible> BusinessTypeVisibles { get; set; }

    public virtual DbSet<Caaudit> Caaudits { get; set; }

    public virtual DbSet<CaauditDetail> CaauditDetails { get; set; }

    public virtual DbSet<CaauditMemberDetail> CaauditMemberDetails { get; set; }

    public virtual DbSet<CabareasonType> CabareasonTypes { get; set; }

    public virtual DbSet<Cacashbook> Cacashbooks { get; set; }

    public virtual DbSet<CacheMatchInventoryItem> CacheMatchInventoryItems { get; set; }

    public virtual DbSet<Capayment> Capayments { get; set; }

    public virtual DbSet<CapaymentDetail> CapaymentDetails { get; set; }

    public virtual DbSet<CapaymentDetailImportMultiTax> CapaymentDetailImportMultiTaxes { get; set; }

    public virtual DbSet<CapaymentDetailImportVat> CapaymentDetailImportVats { get; set; }

    public virtual DbSet<CapaymentDetailPersonalIncomeTax> CapaymentDetailPersonalIncomeTaxes { get; set; }

    public virtual DbSet<CapaymentDetailSalary> CapaymentDetailSalaries { get; set; }

    public virtual DbSet<CapaymentDetailTax> CapaymentDetailTaxes { get; set; }

    public virtual DbSet<Careceipt> Careceipts { get; set; }

    public virtual DbSet<CareceiptDetail> CareceiptDetails { get; set; }

    public virtual DbSet<CareceiptPaymentList> CareceiptPaymentLists { get; set; }

    public virtual DbSet<CareerHightest> CareerHightests { get; set; }

    public virtual DbSet<Ccy> Ccies { get; set; }

    public virtual DbSet<CcydetailExchangeRate> CcydetailExchangeRates { get; set; }

    public virtual DbSet<CertificateInfo> CertificateInfos { get; set; }

    public virtual DbSet<ChangeMobile> ChangeMobiles { get; set; }

    public virtual DbSet<CheckLedgerResult> CheckLedgerResults { get; set; }

    public virtual DbSet<CheckShowLicenseLastest> CheckShowLicenseLastests { get; set; }

    public virtual DbSet<CompanySearch> CompanySearches { get; set; }

    public virtual DbSet<ComparisonReport> ComparisonReports { get; set; }

    public virtual DbSet<ConfigChangePostAccount> ConfigChangePostAccounts { get; set; }

    public virtual DbSet<ConfigListCabaamount> ConfigListCabaamounts { get; set; }

    public virtual DbSet<ConfigListTable> ConfigListTables { get; set; }

    public virtual DbSet<ConfigListTableUpdateRule> ConfigListTableUpdateRules { get; set; }

    public virtual DbSet<ConfigTabVisibleByUser> ConfigTabVisibleByUsers { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractAttachment> ContractAttachments { get; set; }

    public virtual DbSet<ContractAttachmentFile> ContractAttachmentFiles { get; set; }

    public virtual DbSet<ContractDetailContact> ContractDetailContacts { get; set; }

    public virtual DbSet<ContractDetailExpense> ContractDetailExpenses { get; set; }

    public virtual DbSet<ContractDetailInventoryItem> ContractDetailInventoryItems { get; set; }

    public virtual DbSet<ContractDetailPayment> ContractDetailPayments { get; set; }

    public virtual DbSet<ContractDetailPaymentReference> ContractDetailPaymentReferences { get; set; }

    public virtual DbSet<ContractDetailRevenue> ContractDetailRevenues { get; set; }

    public virtual DbSet<ContractStatus> ContractStatuses { get; set; }

    public virtual DbSet<CustomFieldLedger> CustomFieldLedgers { get; set; }

    public virtual DbSet<CustomerProfileDatum> CustomerProfileData { get; set; }

    public virtual DbSet<CustomerProfileSyncTime> CustomerProfileSyncTimes { get; set; }

    public virtual DbSet<DataColumnDictionary> DataColumnDictionaries { get; set; }

    public virtual DbSet<DataTableDictionary> DataTableDictionaries { get; set; }

    public virtual DbSet<DboptionExtend> DboptionExtends { get; set; }

    public virtual DbSet<DbphysicalError> DbphysicalErrors { get; set; }

    public virtual DbSet<DeadlockInvoice> DeadlockInvoices { get; set; }

    public virtual DbSet<DebtAgreement> DebtAgreements { get; set; }

    public virtual DbSet<DebtList> DebtLists { get; set; }

    public virtual DbSet<DebtListDetail> DebtListDetails { get; set; }

    public virtual DbSet<DebtListDetailVoucher> DebtListDetailVouchers { get; set; }

    public virtual DbSet<DebtPeriod> DebtPeriods { get; set; }

    public virtual DbSet<Declaration03Dleinvoice> Declaration03Dleinvoices { get; set; }

    public virtual DbSet<Declaration03DleinvoiceDetail> Declaration03DleinvoiceDetails { get; set; }

    public virtual DbSet<DictionaryMobile> DictionaryMobiles { get; set; }

    public virtual DbSet<DocumentManager> DocumentManagers { get; set; }

    public virtual DbSet<EbbankBranch> EbbankBranches { get; set; }

    public virtual DbSet<EbbankReference> EbbankReferences { get; set; }

    public virtual DbSet<EbbeneficiaryAccount> EbbeneficiaryAccounts { get; set; }

    public virtual DbSet<EbhistoryTransaction> EbhistoryTransactions { get; set; }

    public virtual DbSet<EbhistoryTransactionSession> EbhistoryTransactionSessions { get; set; }

    public virtual DbSet<Ebreconciliation> Ebreconciliations { get; set; }

    public virtual DbSet<Ebrole> Ebroles { get; set; }

    public virtual DbSet<EbtransactionReference> EbtransactionReferences { get; set; }

    public virtual DbSet<EbtransferInfo> EbtransferInfos { get; set; }

    public virtual DbSet<EbtransferInfoAttachment> EbtransferInfoAttachments { get; set; }

    public virtual DbSet<EbtransferInfoLog> EbtransferInfoLogs { get; set; }

    public virtual DbSet<EbuserRegister> EbuserRegisters { get; set; }

    public virtual DbSet<EinvoiceHubMapping> EinvoiceHubMappings { get; set; }

    public virtual DbSet<EinvoiceHubPendingPublish> EinvoiceHubPendingPublishes { get; set; }

    public virtual DbSet<EinvoiceInfoNd123status> EinvoiceInfoNd123statuses { get; set; }

    public virtual DbSet<EinvoiceReplacement> EinvoiceReplacements { get; set; }

    public virtual DbSet<EinvoiceStatus> EinvoiceStatuses { get; set; }

    public virtual DbSet<EinvoiceSummary> EinvoiceSummaries { get; set; }

    public virtual DbSet<EinvoiceSummaryDetail> EinvoiceSummaryDetails { get; set; }

    public virtual DbSet<EinvoiceSummaryDetailReference> EinvoiceSummaryDetailReferences { get; set; }

    public virtual DbSet<EinvoiceSummaryReference> EinvoiceSummaryReferences { get; set; }

    public virtual DbSet<EiplaceHolderInvoice> EiplaceHolderInvoices { get; set; }

    public virtual DbSet<EiplaceHolderInvoiceDetail> EiplaceHolderInvoiceDetails { get; set; }

    public virtual DbSet<EmailBook> EmailBooks { get; set; }

    public virtual DbSet<EmailGroup> EmailGroups { get; set; }

    public virtual DbSet<EmailReference> EmailReferences { get; set; }

    public virtual DbSet<EmailTemplateApply> EmailTemplateApplies { get; set; }

    public virtual DbSet<EmailTemplateCustom> EmailTemplateCustoms { get; set; }

    public virtual DbSet<EmailTemplateList> EmailTemplateLists { get; set; }

    public virtual DbSet<EmployeeRelationship> EmployeeRelationships { get; set; }

    public virtual DbSet<EsignStatus> EsignStatuses { get; set; }

    public virtual DbSet<ExpenseItem> ExpenseItems { get; set; }

    public virtual DbSet<ExplorebarVisible> ExplorebarVisibles { get; set; }

    public virtual DbSet<ExternalDataChanged> ExternalDataChangeds { get; set; }

    public virtual DbSet<Faadjustment> Faadjustments { get; set; }

    public virtual DbSet<FaadjustmentDetail> FaadjustmentDetails { get; set; }

    public virtual DbSet<FaadjustmentDetailPost> FaadjustmentDetailPosts { get; set; }

    public virtual DbSet<FaadjustmentMemberDetail> FaadjustmentMemberDetails { get; set; }

    public virtual DbSet<Faaudit> Faaudits { get; set; }

    public virtual DbSet<FaauditDetail> FaauditDetails { get; set; }

    public virtual DbSet<FaauditMemberDetail> FaauditMemberDetails { get; set; }

    public virtual DbSet<FachangeFinancialLeasingToOwner> FachangeFinancialLeasingToOwners { get; set; }

    public virtual DbSet<FachangeFinancialLeasingToOwnerDetail> FachangeFinancialLeasingToOwnerDetails { get; set; }

    public virtual DbSet<Fadecrement> Fadecrements { get; set; }

    public virtual DbSet<FadecrementDetail> FadecrementDetails { get; set; }

    public virtual DbSet<FadecrementDetailPost> FadecrementDetailPosts { get; set; }

    public virtual DbSet<Fadepreciation> Fadepreciations { get; set; }

    public virtual DbSet<FadepreciationDetail> FadepreciationDetails { get; set; }

    public virtual DbSet<FadepreciationDetailAllocation> FadepreciationDetailAllocations { get; set; }

    public virtual DbSet<FadepreciationDetailPost> FadepreciationDetailPosts { get; set; }

    public virtual DbSet<Fatransfer> Fatransfers { get; set; }

    public virtual DbSet<FatransferDetail> FatransferDetails { get; set; }

    public virtual DbSet<FavoriteReportList> FavoriteReportLists { get; set; }

    public virtual DbSet<FileAttachment> FileAttachments { get; set; }

    public virtual DbSet<FixedAsset> FixedAssets { get; set; }

    public virtual DbSet<FixedAssetAttachment> FixedAssetAttachments { get; set; }

    public virtual DbSet<FixedAssetCategory> FixedAssetCategories { get; set; }

    public virtual DbSet<FixedAssetDetail> FixedAssetDetails { get; set; }

    public virtual DbSet<FixedAssetDetailAccessory> FixedAssetDetailAccessories { get; set; }

    public virtual DbSet<FixedAssetDetailAllocation> FixedAssetDetailAllocations { get; set; }

    public virtual DbSet<FixedAssetDetailBoardDelivery> FixedAssetDetailBoardDeliveries { get; set; }

    public virtual DbSet<FixedAssetDetailSource> FixedAssetDetailSources { get; set; }

    public virtual DbSet<FixedAssetLedger> FixedAssetLedgers { get; set; }

    public virtual DbSet<FormListParameter> FormListParameters { get; set; }

    public virtual DbSet<Frb03gtbussiness> Frb03gtbussinesses { get; set; }

    public virtual DbSet<Frb03opndetailByActivity> Frb03opndetailByActivities { get; set; }

    public virtual DbSet<Frb03reportDetailActivity> Frb03reportDetailActivities { get; set; }

    public virtual DbSet<Frb09dnnreportDetail> Frb09dnnreportDetails { get; set; }

    public virtual DbSet<Frb09dnntemplate> Frb09dnntemplates { get; set; }

    public virtual DbSet<Frb09dnntemplateDefault> Frb09dnntemplateDefaults { get; set; }

    public virtual DbSet<Frb09dnreportDetail> Frb09dnreportDetails { get; set; }

    public virtual DbSet<Frb09dnsnreportDetail> Frb09dnsnreportDetails { get; set; }

    public virtual DbSet<Frb09dnsntemplate> Frb09dnsntemplates { get; set; }

    public virtual DbSet<Frb09dnsntemplateDefault> Frb09dnsntemplateDefaults { get; set; }

    public virtual DbSet<Frb09dntemplate> Frb09dntemplates { get; set; }

    public virtual DbSet<Frb09dntemplateDefault> Frb09dntemplateDefaults { get; set; }

    public virtual DbSet<FrcostRevenueAndInterest> FrcostRevenueAndInterests { get; set; }

    public virtual DbSet<Frf01reportDetail> Frf01reportDetails { get; set; }

    public virtual DbSet<Frf04situationOfCooperativeMember> Frf04situationOfCooperativeMembers { get; set; }

    public virtual DbSet<Frf04situationOfCooperativeMemberDefault> Frf04situationOfCooperativeMemberDefaults { get; set; }

    public virtual DbSet<Frf04situationOfCooperativeMemberDetail> Frf04situationOfCooperativeMemberDetails { get; set; }

    public virtual DbSet<FrobligationToGovTemplate> FrobligationToGovTemplates { get; set; }

    public virtual DbSet<FrobligationToGovTemplateDefault> FrobligationToGovTemplateDefaults { get; set; }

    public virtual DbSet<Fromeinvoice> Fromeinvoices { get; set; }

    public virtual DbSet<FromeinvoiceDetail> FromeinvoiceDetails { get; set; }

    public virtual DbSet<FrreportDetail> FrreportDetails { get; set; }

    public virtual DbSet<FrreportList> FrreportLists { get; set; }

    public virtual DbSet<Frtemplate> Frtemplates { get; set; }

    public virtual DbSet<FrtemplateDefault> FrtemplateDefaults { get; set; }

    public virtual DbSet<FrtemplateDrilldownDetail> FrtemplateDrilldownDetails { get; set; }

    public virtual DbSet<GeneralLedger> GeneralLedgers { get; set; }

    public virtual DbSet<GlparalellVoucher> GlparalellVouchers { get; set; }

    public virtual DbSet<Glvoucher> Glvouchers { get; set; }

    public virtual DbSet<GlvoucherCrossEntryDetail> GlvoucherCrossEntryDetails { get; set; }

    public virtual DbSet<GlvoucherDetail> GlvoucherDetails { get; set; }

    public virtual DbSet<GlvoucherDetailAdvancedPayment> GlvoucherDetailAdvancedPayments { get; set; }

    public virtual DbSet<GlvoucherDetailDebtPayment> GlvoucherDetailDebtPayments { get; set; }

    public virtual DbSet<GlvoucherDetailExpense> GlvoucherDetailExpenses { get; set; }

    public virtual DbSet<GlvoucherDetailExpensesAllocation> GlvoucherDetailExpensesAllocations { get; set; }

    public virtual DbSet<GlvoucherDetailForeignExchange> GlvoucherDetailForeignExchanges { get; set; }

    public virtual DbSet<GlvoucherDetailRevenue> GlvoucherDetailRevenues { get; set; }

    public virtual DbSet<GlvoucherDetailRevenueAllocation> GlvoucherDetailRevenueAllocations { get; set; }

    public virtual DbSet<GlvoucherDetailTax> GlvoucherDetailTaxes { get; set; }

    public virtual DbSet<GlvoucherList> GlvoucherLists { get; set; }

    public virtual DbSet<GlvoucherListDetail> GlvoucherListDetails { get; set; }

    public virtual DbSet<HelpBalancingGuideLastedDate> HelpBalancingGuideLastedDates { get; set; }

    public virtual DbSet<HelthCompany> HelthCompanies { get; set; }

    public virtual DbSet<HistoryRecentPrice> HistoryRecentPrices { get; set; }

    public virtual DbSet<HistoryVoucher> HistoryVouchers { get; set; }

    public virtual DbSet<ImportCollection> ImportCollections { get; set; }

    public virtual DbSet<ImportCollectionConfig> ImportCollectionConfigs { get; set; }

    public virtual DbSet<ImportColumn> ImportColumns { get; set; }

    public virtual DbSet<ImportDictionary> ImportDictionaries { get; set; }

    public virtual DbSet<ImportExternalColumn> ImportExternalColumns { get; set; }

    public virtual DbSet<ImportExternalItem> ImportExternalItems { get; set; }

    public virtual DbSet<ImportExternalTable> ImportExternalTables { get; set; }

    public virtual DbSet<ImportItem> ImportItems { get; set; }

    public virtual DbSet<ImportOpeningAccountEntry> ImportOpeningAccountEntries { get; set; }

    public virtual DbSet<ImportOpeningAccountEntryDetail> ImportOpeningAccountEntryDetails { get; set; }

    public virtual DbSet<ImportOpeningAccountEntryDetailInvoice> ImportOpeningAccountEntryDetailInvoices { get; set; }

    public virtual DbSet<ImportOpeningInventoryEntry> ImportOpeningInventoryEntries { get; set; }

    public virtual DbSet<ImportReferenceColumn> ImportReferenceColumns { get; set; }

    public virtual DbSet<ImportTable> ImportTables { get; set; }

    public virtual DbSet<InassemblyDisassembly> InassemblyDisassemblies { get; set; }

    public virtual DbSet<InassemblyDisassemblyDetail> InassemblyDisassemblyDetails { get; set; }

    public virtual DbSet<Inaudit> Inaudits { get; set; }

    public virtual DbSet<InauditDetail> InauditDetails { get; set; }

    public virtual DbSet<InauditMemberDetail> InauditMemberDetails { get; set; }

    public virtual DbSet<InbotTrialInfo> InbotTrialInfos { get; set; }

    public virtual DbSet<InbotTrialProcess> InbotTrialProcesses { get; set; }

    public virtual DbSet<IninventoryBook> IninventoryBooks { get; set; }

    public virtual DbSet<IninventoryBookDetail> IninventoryBookDetails { get; set; }

    public virtual DbSet<IninventoryBookDetailUnpost> IninventoryBookDetailUnposts { get; set; }

    public virtual DbSet<IninvoiceHubOutward> IninvoiceHubOutwards { get; set; }

    public virtual DbSet<IninvoiceHubOutwardDetail> IninvoiceHubOutwardDetails { get; set; }

    public virtual DbSet<IninvoiceHubTransfer> IninvoiceHubTransfers { get; set; }

    public virtual DbSet<IninvoiceHubTransferDetail> IninvoiceHubTransferDetails { get; set; }

    public virtual DbSet<Ininward> Ininwards { get; set; }

    public virtual DbSet<IninwardDetail> IninwardDetails { get; set; }

    public virtual DbSet<IninwardOutwardList> IninwardOutwardLists { get; set; }

    public virtual DbSet<Inoutward> Inoutwards { get; set; }

    public virtual DbSet<InoutwardDetail> InoutwardDetails { get; set; }

    public virtual DbSet<InproductionOrder> InproductionOrders { get; set; }

    public virtual DbSet<InproductionOrderDetail> InproductionOrderDetails { get; set; }

    public virtual DbSet<InproductionOrderProduct> InproductionOrderProducts { get; set; }

    public virtual DbSet<InserialNumber> InserialNumbers { get; set; }

    public virtual DbSet<Intransfer> Intransfers { get; set; }

    public virtual DbSet<IntransferDetail> IntransferDetails { get; set; }

    public virtual DbSet<InunitQuantityConvert> InunitQuantityConverts { get; set; }

    public virtual DbSet<InunitQuantityConvertDetail> InunitQuantityConvertDetails { get; set; }

    public virtual DbSet<InvTemplate> InvTemplates { get; set; }

    public virtual DbSet<InvType> InvTypes { get; set; }

    public virtual DbSet<InventoryItem> InventoryItems { get; set; }

    public virtual DbSet<InventoryItemBelongToCategory> InventoryItemBelongToCategories { get; set; }

    public virtual DbSet<InventoryItemCalculatePriceError> InventoryItemCalculatePriceErrors { get; set; }

    public virtual DbSet<InventoryItemCategory> InventoryItemCategories { get; set; }

    public virtual DbSet<InventoryItemCategorySpecialTax> InventoryItemCategorySpecialTaxes { get; set; }

    public virtual DbSet<InventoryItemCategorySpecialTaxDetail> InventoryItemCategorySpecialTaxDetails { get; set; }

    public virtual DbSet<InventoryItemDetailDiscount> InventoryItemDetailDiscounts { get; set; }

    public virtual DbSet<InventoryItemDetailNorm> InventoryItemDetailNorms { get; set; }

    public virtual DbSet<InventoryItemDetailSerialType> InventoryItemDetailSerialTypes { get; set; }

    public virtual DbSet<InventoryItemHistory> InventoryItemHistories { get; set; }

    public virtual DbSet<InventoryItemLogOverQuantity> InventoryItemLogOverQuantities { get; set; }

    public virtual DbSet<InventoryItemLogUnPost> InventoryItemLogUnPosts { get; set; }

    public virtual DbSet<InventoryItemPriceFifo> InventoryItemPriceFifos { get; set; }

    public virtual DbSet<InventoryItemPriceFifoadjust> InventoryItemPriceFifoadjusts { get; set; }

    public virtual DbSet<InventoryItemPriceFifoadjustReport> InventoryItemPriceFifoadjustReports { get; set; }

    public virtual DbSet<InventoryItemPriceFifoassembly> InventoryItemPriceFifoassemblies { get; set; }

    public virtual DbSet<InventoryItemPriceFifotransfer> InventoryItemPriceFifotransfers { get; set; }

    public virtual DbSet<InventoryItemPriceOutwardImmeNoStock> InventoryItemPriceOutwardImmeNoStocks { get; set; }

    public virtual DbSet<InventoryItemPriceOutwardImmediate> InventoryItemPriceOutwardImmediates { get; set; }

    public virtual DbSet<InventoryItemPurchaseFixedUnitPrice> InventoryItemPurchaseFixedUnitPrices { get; set; }

    public virtual DbSet<InventoryItemPurchaseUnitPrice> InventoryItemPurchaseUnitPrices { get; set; }

    public virtual DbSet<InventoryItemType> InventoryItemTypes { get; set; }

    public virtual DbSet<InventoryItemUnitConvert> InventoryItemUnitConverts { get; set; }

    public virtual DbSet<InventoryLedger> InventoryLedgers { get; set; }

    public virtual DbSet<InventoryLogAction> InventoryLogActions { get; set; }

    public virtual DbSet<InventoryQuantityFormulaTemplate> InventoryQuantityFormulaTemplates { get; set; }

    public virtual DbSet<InvestmentProject> InvestmentProjects { get; set; }

    public virtual DbSet<InvoiceBot> InvoiceBots { get; set; }

    public virtual DbSet<InvoiceBotCheckingStatus> InvoiceBotCheckingStatuses { get; set; }

    public virtual DbSet<InvoiceBotDetail> InvoiceBotDetails { get; set; }

    public virtual DbSet<InvoiceBotOrganization> InvoiceBotOrganizations { get; set; }

    public virtual DbSet<InvoiceBotReference> InvoiceBotReferences { get; set; }

    public virtual DbSet<InvoiceErrorAnnouncement> InvoiceErrorAnnouncements { get; set; }

    public virtual DbSet<InvoiceErrorAnnouncementDetail> InvoiceErrorAnnouncementDetails { get; set; }

    public virtual DbSet<InvoiceHubReplacement> InvoiceHubReplacements { get; set; }

    public virtual DbSet<InvoiceLasted> InvoiceLasteds { get; set; }

    public virtual DbSet<InvoiceNotification> InvoiceNotifications { get; set; }

    public virtual DbSet<InvoiceNotificationKey> InvoiceNotificationKeys { get; set; }

    public virtual DbSet<InvoiceTemplate> InvoiceTemplates { get; set; }

    public virtual DbSet<InvoiceToOpening> InvoiceToOpenings { get; set; }

    public virtual DbSet<InvoiceTypeAutoId> InvoiceTypeAutoIds { get; set; }

    public virtual DbSet<InvoiceTypeFor03Dl> InvoiceTypeFor03Dls { get; set; }

    public virtual DbSet<IpadjustAnnouncement> IpadjustAnnouncements { get; set; }

    public virtual DbSet<IpadjustAnnouncementDetail> IpadjustAnnouncementDetails { get; set; }

    public virtual DbSet<IpcancelAnnouncement> IpcancelAnnouncements { get; set; }

    public virtual DbSet<IpcancelAnnouncementDetail> IpcancelAnnouncementDetails { get; set; }

    public virtual DbSet<IpdeletedAnnouncement> IpdeletedAnnouncements { get; set; }

    public virtual DbSet<Iplbdannouncement> Iplbdannouncements { get; set; }

    public virtual DbSet<IplbdannouncementDetail> IplbdannouncementDetails { get; set; }

    public virtual DbSet<IplistInvoiceAttachment> IplistInvoiceAttachments { get; set; }

    public virtual DbSet<IppublishAnnouncement> IppublishAnnouncements { get; set; }

    public virtual DbSet<IppublishAnnouncementDetail> IppublishAnnouncementDetails { get; set; }

    public virtual DbSet<IppublishAnnouncementDetailAllocation> IppublishAnnouncementDetailAllocations { get; set; }

    public virtual DbSet<Ipregister> Ipregisters { get; set; }

    public virtual DbSet<IpregisterDetail> IpregisterDetails { get; set; }

    public virtual DbSet<IpregisterEinvoice> IpregisterEinvoices { get; set; }

    public virtual DbSet<IpregisterEinvoiceDetail> IpregisterEinvoiceDetails { get; set; }

    public virtual DbSet<Iptemplate> Iptemplates { get; set; }

    public virtual DbSet<IptemplatePermissionBranch> IptemplatePermissionBranches { get; set; }

    public virtual DbSet<IpusingState> IpusingStates { get; set; }

    public virtual DbSet<IpusingStateDetail> IpusingStateDetails { get; set; }

    public virtual DbSet<Jcaccepted> Jcaccepteds { get; set; }

    public virtual DbSet<JcacceptedDetail> JcacceptedDetails { get; set; }

    public virtual DbSet<JcallocationExpense> JcallocationExpenses { get; set; }

    public virtual DbSet<JcallocationExpenseDetail> JcallocationExpenseDetails { get; set; }

    public virtual DbSet<JcallocationExpenseDetailTable> JcallocationExpenseDetailTables { get; set; }

    public virtual DbSet<JcallocationQuantum> JcallocationQuanta { get; set; }

    public virtual DbSet<JcallocationQuantumConfig> JcallocationQuantumConfigs { get; set; }

    public virtual DbSet<JccostAllocationConfig> JccostAllocationConfigs { get; set; }

    public virtual DbSet<JccostAllocationDetail> JccostAllocationDetails { get; set; }

    public virtual DbSet<JccostVoucher> JccostVouchers { get; set; }

    public virtual DbSet<JcexpenseTranfer> JcexpenseTranfers { get; set; }

    public virtual DbSet<JcexpenseTranferDetail> JcexpenseTranferDetails { get; set; }

    public virtual DbSet<Jcopn> Jcopns { get; set; }

    public virtual DbSet<Jcopnallocation> Jcopnallocations { get; set; }

    public virtual DbSet<Jcopnconfig> Jcopnconfigs { get; set; }

    public virtual DbSet<Jcopndetail> Jcopndetails { get; set; }

    public virtual DbSet<Jcperiod> Jcperiods { get; set; }

    public virtual DbSet<JcperiodDetail> JcperiodDetails { get; set; }

    public virtual DbSet<JcproductCostAllocationConfig> JcproductCostAllocationConfigs { get; set; }

    public virtual DbSet<JcproductCostDetail> JcproductCostDetails { get; set; }

    public virtual DbSet<JcproductQuantum> JcproductQuanta { get; set; }

    public virtual DbSet<JcprojectAllocationQuantumConfig> JcprojectAllocationQuantumConfigs { get; set; }

    public virtual DbSet<Jcuncomplete> Jcuncompletes { get; set; }

    public virtual DbSet<JcuncompleteDetail> JcuncompleteDetails { get; set; }

    public virtual DbSet<JcuncompleteDetailInventoryItem> JcuncompleteDetailInventoryItems { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobProduct> JobProducts { get; set; }

    public virtual DbSet<LicenseConfig> LicenseConfigs { get; set; }

    public virtual DbSet<ListItem> ListItems { get; set; }

    public virtual DbSet<LoanProfile> LoanProfiles { get; set; }

    public virtual DbSet<LoanProfileDbinfo> LoanProfileDbinfos { get; set; }

    public virtual DbSet<LoanProfileDetail> LoanProfileDetails { get; set; }

    public virtual DbSet<LoanProfileDetailTemplate> LoanProfileDetailTemplates { get; set; }

    public virtual DbSet<LoanProfileListItem> LoanProfileListItems { get; set; }

    public virtual DbSet<LoanProfileSummaryReport> LoanProfileSummaryReports { get; set; }

    public virtual DbSet<LoanProfileTemplate> LoanProfileTemplates { get; set; }

    public virtual DbSet<Loanagreement> Loanagreements { get; set; }

    public virtual DbSet<LoanagreementAsset> LoanagreementAssets { get; set; }

    public virtual DbSet<LoanagreementCalendar> LoanagreementCalendars { get; set; }

    public virtual DbSet<LoanagreementInterestRate> LoanagreementInterestRates { get; set; }

    public virtual DbSet<LoanagreementPayment> LoanagreementPayments { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    public virtual DbSet<LockObject> LockObjects { get; set; }

    public virtual DbSet<ManageSize> ManageSizes { get; set; }

    public virtual DbSet<MappingDictionaryExternal> MappingDictionaryExternals { get; set; }

    public virtual DbSet<MappingEbobject> MappingEbobjects { get; set; }

    public virtual DbSet<MappingEinvoiceObject> MappingEinvoiceObjects { get; set; }

    public virtual DbSet<MappingInbotObject> MappingInbotObjects { get; set; }

    public virtual DbSet<MappingOrganizationExtend> MappingOrganizationExtends { get; set; }

    public virtual DbSet<MappingSaeinvoiceObject> MappingSaeinvoiceObjects { get; set; }

    public virtual DbSet<MappingSaobject> MappingSaobjects { get; set; }

    public virtual DbSet<MeInvoiceSyncDatum> MeInvoiceSyncData { get; set; }

    public virtual DbSet<MinutesInvoice> MinutesInvoices { get; set; }

    public virtual DbSet<MisaorderNotificationKey> MisaorderNotificationKeys { get; set; }

    public virtual DbSet<MobileAccountBalanceDataChanged> MobileAccountBalanceDataChangeds { get; set; }

    public virtual DbSet<MobileAccountObjectLedgerDataChanged> MobileAccountObjectLedgerDataChangeds { get; set; }

    public virtual DbSet<MobileDataChanged> MobileDataChangeds { get; set; }

    public virtual DbSet<MobileDataFirstSync> MobileDataFirstSyncs { get; set; }

    public virtual DbSet<MobileDebtDataChanged> MobileDebtDataChangeds { get; set; }

    public virtual DbSet<MobileFinancialDataChanged> MobileFinancialDataChangeds { get; set; }

    public virtual DbSet<MobileGeneralLedgerDataChanged> MobileGeneralLedgerDataChangeds { get; set; }

    public virtual DbSet<MobileInventoryLedgerDataChanged> MobileInventoryLedgerDataChangeds { get; set; }

    public virtual DbSet<MobileJcallocationExpenseDataChanged> MobileJcallocationExpenseDataChangeds { get; set; }

    public virtual DbSet<MobileSalarySheetDataChanged> MobileSalarySheetDataChangeds { get; set; }

    public virtual DbSet<MobileStockBalanceByExpiryDateDataChanged> MobileStockBalanceByExpiryDateDataChangeds { get; set; }

    public virtual DbSet<MobileSyncDatum> MobileSyncData { get; set; }

    public virtual DbSet<MobileSyncTimeHistory> MobileSyncTimeHistories { get; set; }

    public virtual DbSet<MonetaryFlowForeCast> MonetaryFlowForeCasts { get; set; }

    public virtual DbSet<MonetaryFlowForeCastDetail> MonetaryFlowForeCastDetails { get; set; }

    public virtual DbSet<MonitorCount> MonitorCounts { get; set; }

    public virtual DbSet<MscAudittingLog> MscAudittingLogs { get; set; }

    public virtual DbSet<MscAudittingLogDetail> MscAudittingLogDetails { get; set; }

    public virtual DbSet<MscConfirmPassword> MscConfirmPasswords { get; set; }

    public virtual DbSet<MscPermission> MscPermissions { get; set; }

    public virtual DbSet<MscRegisPermisionForSubSystem> MscRegisPermisionForSubSystems { get; set; }

    public virtual DbSet<MscRegisPermisionMobileForSubSystem> MscRegisPermisionMobileForSubSystems { get; set; }

    public virtual DbSet<MscRole> MscRoles { get; set; }

    public virtual DbSet<MscRoleMobile> MscRoleMobiles { get; set; }

    public virtual DbSet<MscRolePermissionMaping> MscRolePermissionMapings { get; set; }

    public virtual DbSet<MscRolePermissionMapingMobile> MscRolePermissionMapingMobiles { get; set; }

    public virtual DbSet<MscSubSystem> MscSubSystems { get; set; }

    public virtual DbSet<MscSubSystemMobile> MscSubSystemMobiles { get; set; }

    public virtual DbSet<MscUser> MscUsers { get; set; }

    public virtual DbSet<MscUserJoinRole> MscUserJoinRoles { get; set; }

    public virtual DbSet<MscUserJoinRoleMobile> MscUserJoinRoleMobiles { get; set; }

    public virtual DbSet<MscUserMobile> MscUserMobiles { get; set; }

    public virtual DbSet<National> Nationals { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationInbot> NotificationInbots { get; set; }

    public virtual DbSet<NotificationKey> NotificationKeys { get; set; }

    public virtual DbSet<NotificationRemind> NotificationReminds { get; set; }

    public virtual DbSet<OpeningAccountEntry> OpeningAccountEntries { get; set; }

    public virtual DbSet<OpeningAccountEntryDetail> OpeningAccountEntryDetails { get; set; }

    public virtual DbSet<OpeningAccountEntryDetailInvoice> OpeningAccountEntryDetailInvoices { get; set; }

    public virtual DbSet<OpeningInventoryEntry> OpeningInventoryEntries { get; set; }

    public virtual DbSet<OrganizationUnit> OrganizationUnits { get; set; }

    public virtual DbSet<OrganizationUnitInfo> OrganizationUnitInfos { get; set; }

    public virtual DbSet<OrganizationUnitType> OrganizationUnitTypes { get; set; }

    public virtual DbSet<PasalaryExpense> PasalaryExpenses { get; set; }

    public virtual DbSet<PasalaryExpenseAllocation> PasalaryExpenseAllocations { get; set; }

    public virtual DbSet<PasalaryExpenseAllocationDetail> PasalaryExpenseAllocationDetails { get; set; }

    public virtual DbSet<PasalaryExpenseDetail> PasalaryExpenseDetails { get; set; }

    public virtual DbSet<PasalarySheet> PasalarySheets { get; set; }

    public virtual DbSet<PasalarySheetColumn> PasalarySheetColumns { get; set; }

    public virtual DbSet<PasalarySheetDetail> PasalarySheetDetails { get; set; }

    public virtual DbSet<PasalarySheetTemplate> PasalarySheetTemplates { get; set; }

    public virtual DbSet<PasalarySheetTemplateUser> PasalarySheetTemplateUsers { get; set; }

    public virtual DbSet<PasalaryTaxInsuranceRegulation> PasalaryTaxInsuranceRegulations { get; set; }

    public virtual DbSet<PatimeSheet> PatimeSheets { get; set; }

    public virtual DbSet<PatimeSheetDetail> PatimeSheetDetails { get; set; }

    public virtual DbSet<PatimeSheetSummary> PatimeSheetSummaries { get; set; }

    public virtual DbSet<PatimeSheetSummaryDetail> PatimeSheetSummaryDetails { get; set; }

    public virtual DbSet<PatimeSheetSummaryDetailMatrix> PatimeSheetSummaryDetailMatrices { get; set; }

    public virtual DbSet<PavoucherDeduction> PavoucherDeductions { get; set; }

    public virtual DbSet<PavoucherTemplate> PavoucherTemplates { get; set; }

    public virtual DbSet<PavoucherUsage> PavoucherUsages { get; set; }

    public virtual DbSet<PavoucherUsageDetail> PavoucherUsageDetails { get; set; }

    public virtual DbSet<PaymentMethodType> PaymentMethodTypes { get; set; }

    public virtual DbSet<PaymentTerm> PaymentTerms { get; set; }

    public virtual DbSet<PersonalIncomeTaxRate> PersonalIncomeTaxRates { get; set; }

    public virtual DbSet<PreReceiptRevenue> PreReceiptRevenues { get; set; }

    public virtual DbSet<PreReceiptRevenueDetail> PreReceiptRevenueDetails { get; set; }

    public virtual DbSet<PreReceiptRevenueDetailSource> PreReceiptRevenueDetailSources { get; set; }

    public virtual DbSet<PrepaidExpense> PrepaidExpenses { get; set; }

    public virtual DbSet<PrepaidExpensesDetail> PrepaidExpensesDetails { get; set; }

    public virtual DbSet<PrepaidExpensesDetailSource> PrepaidExpensesDetailSources { get; set; }

    public virtual DbSet<ProjectWork> ProjectWorks { get; set; }

    public virtual DbSet<ProjectWorkCategory> ProjectWorkCategories { get; set; }

    public virtual DbSet<ProjectWorkEstimate> ProjectWorkEstimates { get; set; }

    public virtual DbSet<ProjectWorkEstimateDetail> ProjectWorkEstimateDetails { get; set; }

    public virtual DbSet<ProjectWorkNorm> ProjectWorkNorms { get; set; }

    public virtual DbSet<ProjectWorkNormDetail> ProjectWorkNormDetails { get; set; }

    public virtual DbSet<PublishingInvoiceConfig> PublishingInvoiceConfigs { get; set; }

    public virtual DbSet<Pucontract> Pucontracts { get; set; }

    public virtual DbSet<PucontractDetailInventoryItem> PucontractDetailInventoryItems { get; set; }

    public virtual DbSet<PudebtPeriod> PudebtPeriods { get; set; }

    public virtual DbSet<Pudiscount> Pudiscounts { get; set; }

    public virtual DbSet<PudiscountDetail> PudiscountDetails { get; set; }

    public virtual DbSet<Puinvoice> Puinvoices { get; set; }

    public virtual DbSet<PuinvoiceDetail> PuinvoiceDetails { get; set; }

    public virtual DbSet<PulastedUnitPrice> PulastedUnitPrices { get; set; }

    public virtual DbSet<Puorder> Puorders { get; set; }

    public virtual DbSet<PuorderDetail> PuorderDetails { get; set; }

    public virtual DbSet<PurchaseLedger> PurchaseLedgers { get; set; }

    public virtual DbSet<PurchasePurpose> PurchasePurposes { get; set; }

    public virtual DbSet<Pureturn> Pureturns { get; set; }

    public virtual DbSet<PureturnDetail> PureturnDetails { get; set; }

    public virtual DbSet<Puservice> Puservices { get; set; }

    public virtual DbSet<PuserviceDetail> PuserviceDetails { get; set; }

    public virtual DbSet<Puvoucher> Puvouchers { get; set; }

    public virtual DbSet<PuvoucherDetail> PuvoucherDetails { get; set; }

    public virtual DbSet<PuvoucherDetailCost> PuvoucherDetailCosts { get; set; }

    public virtual DbSet<Relationship> Relationships { get; set; }

    public virtual DbSet<ReportColumnCaption> ReportColumnCaptions { get; set; }

    public virtual DbSet<ReportConfigToPrint> ReportConfigToPrints { get; set; }

    public virtual DbSet<ReportFilter> ReportFilters { get; set; }

    public virtual DbSet<ReportFilterColumn> ReportFilterColumns { get; set; }

    public virtual DbSet<ReportFilterDetail> ReportFilterDetails { get; set; }

    public virtual DbSet<ReportSigner> ReportSigners { get; set; }

    public virtual DbSet<ResourceInfoTempEinvoice> ResourceInfoTempEinvoices { get; set; }

    public virtual DbSet<ResourcesTaxTable> ResourcesTaxTables { get; set; }

    public virtual DbSet<ResourcesTaxTableDetail> ResourcesTaxTableDetails { get; set; }

    public virtual DbSet<Sadiscount> Sadiscounts { get; set; }

    public virtual DbSet<SadiscountDetail> SadiscountDetails { get; set; }

    public virtual DbSet<Sainvoice> Sainvoices { get; set; }

    public virtual DbSet<SainvoiceDetail> SainvoiceDetails { get; set; }

    public virtual DbSet<SainvoiceHub> SainvoiceHubs { get; set; }

    public virtual DbSet<SainvoiceHubDetail> SainvoiceHubDetails { get; set; }

    public virtual DbSet<SainvoicePetroleum> SainvoicePetroleums { get; set; }

    public virtual DbSet<SainvoicePetroleumDetail> SainvoicePetroleumDetails { get; set; }

    public virtual DbSet<SainvoicePetroleumReference> SainvoicePetroleumReferences { get; set; }

    public virtual DbSet<SainvoiceReference> SainvoiceReferences { get; set; }

    public virtual DbSet<SaleLedger> SaleLedgers { get; set; }

    public virtual DbSet<SaleOutwardReference> SaleOutwardReferences { get; set; }

    public virtual DbSet<SaleOutwardReferenceDetail> SaleOutwardReferenceDetails { get; set; }

    public virtual DbSet<Saorder> Saorders { get; set; }

    public virtual DbSet<SaorderDetail> SaorderDetails { get; set; }

    public virtual DbSet<Sapolicy> Sapolicies { get; set; }

    public virtual DbSet<SapolicyPrice> SapolicyPrices { get; set; }

    public virtual DbSet<SapolicySaleCustomer> SapolicySaleCustomers { get; set; }

    public virtual DbSet<SapolicySaleGroup> SapolicySaleGroups { get; set; }

    public virtual DbSet<Saquote> Saquotes { get; set; }

    public virtual DbSet<SaquoteDetail> SaquoteDetails { get; set; }

    public virtual DbSet<Sareturn> Sareturns { get; set; }

    public virtual DbSet<SareturnDetail> SareturnDetails { get; set; }

    public virtual DbSet<SareturnInwardReferenceDetail> SareturnInwardReferenceDetails { get; set; }

    public virtual DbSet<SasaleGroup> SasaleGroups { get; set; }

    public virtual DbSet<SasaleGroupDetail> SasaleGroupDetails { get; set; }

    public virtual DbSet<Savoucher> Savouchers { get; set; }

    public virtual DbSet<SavoucherDetail> SavoucherDetails { get; set; }

    public virtual DbSet<ScheduleAppointment> ScheduleAppointments { get; set; }

    public virtual DbSet<ScheduleTask> ScheduleTasks { get; set; }

    public virtual DbSet<SearchConfig> SearchConfigs { get; set; }

    public virtual DbSet<SearchField> SearchFields { get; set; }

    public virtual DbSet<SearchRefType> SearchRefTypes { get; set; }

    public virtual DbSet<SendEmailHistory> SendEmailHistories { get; set; }

    public virtual DbSet<SignInfo> SignInfos { get; set; }

    public virtual DbSet<Ssbussiness> Ssbussinesses { get; set; }

    public virtual DbSet<SsbussinessDetail> SsbussinessDetails { get; set; }

    public virtual DbSet<SsbussinessUserActived> SsbussinessUserActiveds { get; set; }

    public virtual DbSet<Sskeyword> Sskeywords { get; set; }

    public virtual DbSet<SslastedAction> SslastedActions { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<Suadjustment> Suadjustments { get; set; }

    public virtual DbSet<SuadjustmentDetail> SuadjustmentDetails { get; set; }

    public virtual DbSet<SuadjustmentDetailVoucher> SuadjustmentDetailVouchers { get; set; }

    public virtual DbSet<Suallocation> Suallocations { get; set; }

    public virtual DbSet<SuallocationDetailExpense> SuallocationDetailExpenses { get; set; }

    public virtual DbSet<SuallocationDetailPost> SuallocationDetailPosts { get; set; }

    public virtual DbSet<SuallocationDetailTable> SuallocationDetailTables { get; set; }

    public virtual DbSet<Suaudit> Suaudits { get; set; }

    public virtual DbSet<SuauditDetail> SuauditDetails { get; set; }

    public virtual DbSet<SuauditMemberDetail> SuauditMemberDetails { get; set; }

    public virtual DbSet<Sudecrement> Sudecrements { get; set; }

    public virtual DbSet<SudecrementDetail> SudecrementDetails { get; set; }

    public virtual DbSet<Suincrement> Suincrements { get; set; }

    public virtual DbSet<SuincrementDetail> SuincrementDetails { get; set; }

    public virtual DbSet<SuincrementDetailAllocation> SuincrementDetailAllocations { get; set; }

    public virtual DbSet<SuincrementDetailDepartment> SuincrementDetailDepartments { get; set; }

    public virtual DbSet<SuincrementDetailSource> SuincrementDetailSources { get; set; }

    public virtual DbSet<SupplyCategory> SupplyCategories { get; set; }

    public virtual DbSet<SupplyLedger> SupplyLedgers { get; set; }

    public virtual DbSet<Sutransfer> Sutransfers { get; set; }

    public virtual DbSet<SutransferDetail> SutransferDetails { get; set; }

    public virtual DbSet<SyncDownLoadTime> SyncDownLoadTimes { get; set; }

    public virtual DbSet<SysNewPostedVoucher> SysNewPostedVouchers { get; set; }

    public virtual DbSet<SysReportStyle> SysReportStyles { get; set; }

    public virtual DbSet<SysVoucherTemplateUserDetail> SysVoucherTemplateUserDetails { get; set; }

    public virtual DbSet<SysaccountObjectLog> SysaccountObjectLogs { get; set; }

    public virtual DbSet<SysaddNewDefaultValue> SysaddNewDefaultValues { get; set; }

    public virtual DbSet<SysautoId> SysautoIds { get; set; }

    public virtual DbSet<Sysbook> Sysbooks { get; set; }

    public virtual DbSet<SysbusinessScaleHiden> SysbusinessScaleHidens { get; set; }

    public virtual DbSet<SysbusinessVisible> SysbusinessVisibles { get; set; }

    public virtual DbSet<SysclientVersion> SysclientVersions { get; set; }

    public virtual DbSet<SysconfigForUpdateOutwardPrice> SysconfigForUpdateOutwardPrices { get; set; }

    public virtual DbSet<SysconvertMappingColumn> SysconvertMappingColumns { get; set; }

    public virtual DbSet<SysconvertMappingRefType> SysconvertMappingRefTypes { get; set; }

    public virtual DbSet<SysconvertMappingTable> SysconvertMappingTables { get; set; }

    public virtual DbSet<SysconvertMappingValidate> SysconvertMappingValidates { get; set; }

    public virtual DbSet<SysconvertTempTable> SysconvertTempTables { get; set; }

    public virtual DbSet<SysconvertTempTableDetail> SysconvertTempTableDetails { get; set; }

    public virtual DbSet<SysconvertUpdateValue> SysconvertUpdateValues { get; set; }

    public virtual DbSet<SysconvertUpdateValueRefdetailId> SysconvertUpdateValueRefdetailIds { get; set; }

    public virtual DbSet<SyscustomizeReport> SyscustomizeReports { get; set; }

    public virtual DbSet<Sysdbinfo> Sysdbinfos { get; set; }

    public virtual DbSet<Sysdboption> Sysdboptions { get; set; }

    public virtual DbSet<SysdboptionMachine> SysdboptionMachines { get; set; }

    public virtual DbSet<SysdefaultPaymentMethodValue> SysdefaultPaymentMethodValues { get; set; }

    public virtual DbSet<SysemailTemplateType> SysemailTemplateTypes { get; set; }

    public virtual DbSet<SysgroupMultiLog> SysgroupMultiLogs { get; set; }

    public virtual DbSet<SysinfoInvoiceNo> SysinfoInvoiceNos { get; set; }

    public virtual DbSet<SyslayoutLanguage> SyslayoutLanguages { get; set; }

    public virtual DbSet<SyslayoutMemorized> SyslayoutMemorizeds { get; set; }

    public virtual DbSet<SyslistLayoutTemplate> SyslistLayoutTemplates { get; set; }

    public virtual DbSet<SysnewRefNo> SysnewRefNos { get; set; }

    public virtual DbSet<Sysoperand> Sysoperands { get; set; }

    public virtual DbSet<SyspostMappingColumn> SyspostMappingColumns { get; set; }

    public virtual DbSet<SyspostMappingRedundant> SyspostMappingRedundants { get; set; }

    public virtual DbSet<SyspostMappingRow> SyspostMappingRows { get; set; }

    public virtual DbSet<SyspostMappingRowDetail> SyspostMappingRowDetails { get; set; }

    public virtual DbSet<SyspostMappingValidate> SyspostMappingValidates { get; set; }

    public virtual DbSet<SyspostRefIdrebuid> SyspostRefIdrebuids { get; set; }

    public virtual DbSet<SysquickEditLedgerConfig> SysquickEditLedgerConfigs { get; set; }

    public virtual DbSet<SysquickEditPostConfig> SysquickEditPostConfigs { get; set; }

    public virtual DbSet<SysquickEditTableConfig> SysquickEditTableConfigs { get; set; }

    public virtual DbSet<SysquickSearchLayoutTemplate> SysquickSearchLayoutTemplates { get; set; }

    public virtual DbSet<SysquickSearchLayoutTemplateLanguage> SysquickSearchLayoutTemplateLanguages { get; set; }

    public virtual DbSet<SysrefType> SysrefTypes { get; set; }

    public virtual DbSet<SysrefTypeCategory> SysrefTypeCategories { get; set; }

    public virtual DbSet<SysrefTypeDetail> SysrefTypeDetails { get; set; }

    public virtual DbSet<SysremindOption> SysremindOptions { get; set; }

    public virtual DbSet<SysreportCopyConfig> SysreportCopyConfigs { get; set; }

    public virtual DbSet<SysreportCopyConfigDetail> SysreportCopyConfigDetails { get; set; }

    public virtual DbSet<SysreportCopyConfigDetailTemplate> SysreportCopyConfigDetailTemplates { get; set; }

    public virtual DbSet<SysreportCustom> SysreportCustoms { get; set; }

    public virtual DbSet<SysreportCustomDesignTemplate> SysreportCustomDesignTemplates { get; set; }

    public virtual DbSet<SysreportFormula> SysreportFormulas { get; set; }

    public virtual DbSet<SysreportGroup> SysreportGroups { get; set; }

    public virtual DbSet<SysreportInvoice> SysreportInvoices { get; set; }

    public virtual DbSet<SysreportLayoutConfig> SysreportLayoutConfigs { get; set; }

    public virtual DbSet<SysreportLayoutUserApply> SysreportLayoutUserApplies { get; set; }

    public virtual DbSet<SysreportList> SysreportLists { get; set; }

    public virtual DbSet<SysreportListCustom> SysreportListCustoms { get; set; }

    public virtual DbSet<SysreportListExportOption> SysreportListExportOptions { get; set; }

    public virtual DbSet<SysreportMemorized> SysreportMemorizeds { get; set; }

    public virtual DbSet<SysreportMergeType> SysreportMergeTypes { get; set; }

    public virtual DbSet<SysreportOrder> SysreportOrders { get; set; }

    public virtual DbSet<SysreportTemplate> SysreportTemplates { get; set; }

    public virtual DbSet<SysreportVoucherTypeCategory> SysreportVoucherTypeCategories { get; set; }

    public virtual DbSet<SysreportVoucherTypeCategoryRefType> SysreportVoucherTypeCategoryRefTypes { get; set; }

    public virtual DbSet<SyssetNullColumnConfig> SyssetNullColumnConfigs { get; set; }

    public virtual DbSet<SyssubSystem> SyssubSystems { get; set; }

    public virtual DbSet<SyssubSystemRefType> SyssubSystemRefTypes { get; set; }

    public virtual DbSet<SysupdateField> SysupdateFields { get; set; }

    public virtual DbSet<SysuserInfo> SysuserInfos { get; set; }

    public virtual DbSet<SysvoucherTemplate> SysvoucherTemplates { get; set; }

    public virtual DbSet<SysvoucherTemplateDetail> SysvoucherTemplateDetails { get; set; }

    public virtual DbSet<Ta011gtgtDetail> Ta011gtgtDetails { get; set; }

    public virtual DbSet<Ta011tndnDetail> Ta011tndnDetails { get; set; }

    public virtual DbSet<Ta011ttdbDetail> Ta011ttdbDetails { get; set; }

    public virtual DbSet<Ta011ttdbDetailTt195> Ta011ttdbDetailTt195s { get; set; }

    public virtual DbSet<Ta012gtgtDetail> Ta012gtgtDetails { get; set; }

    public virtual DbSet<Ta012gtgtDetailValid> Ta012gtgtDetailValids { get; set; }

    public virtual DbSet<Ta012gtgtDetailVoucher> Ta012gtgtDetailVouchers { get; set; }

    public virtual DbSet<Ta012ttdbDetail> Ta012ttdbDetails { get; set; }

    public virtual DbSet<Ta012ttdbDetailTt80> Ta012ttdbDetailTt80s { get; set; }

    public virtual DbSet<Ta015gtgtDetail> Ta015gtgtDetails { get; set; }

    public virtual DbSet<Ta016gtgtDetail> Ta016gtgtDetails { get; set; }

    public virtual DbSet<Ta017gtgtDetail> Ta017gtgtDetails { get; set; }

    public virtual DbSet<Ta01Gtgtdeclaration> Ta01Gtgtdeclarations { get; set; }

    public virtual DbSet<Ta01Tbvmtdetail> Ta01Tbvmtdetails { get; set; }

    public virtual DbSet<Ta01ttdbDetail> Ta01ttdbDetails { get; set; }

    public virtual DbSet<Ta02GtgtAdjustmentDetail> Ta02GtgtAdjustmentDetails { get; set; }

    public virtual DbSet<Ta02gtgtAppendixDetail> Ta02gtgtAppendixDetails { get; set; }

    public virtual DbSet<Ta02gtgtAppendixDetailValid> Ta02gtgtAppendixDetailValids { get; set; }

    public virtual DbSet<Ta02gtgtAppendixDetailVoucher> Ta02gtgtAppendixDetailVouchers { get; set; }

    public virtual DbSet<Ta03TndnDocument> Ta03TndnDocuments { get; set; }

    public virtual DbSet<Ta03gtgtDetail> Ta03gtgtDetails { get; set; }

    public virtual DbSet<Ta03tndn114detail> Ta03tndn114details { get; set; }

    public virtual DbSet<Ta03tndn1adetail> Ta03tndn1adetails { get; set; }

    public virtual DbSet<Ta03tndn2adetail> Ta03tndn2adetails { get; set; }

    public virtual DbSet<Ta03tndn5detail> Ta03tndn5details { get; set; }

    public virtual DbSet<Ta03tndn8detail> Ta03tndn8details { get; set; }

    public virtual DbSet<Ta03tndn92detail> Ta03tndn92details { get; set; }

    public virtual DbSet<Ta041gtgtDetail> Ta041gtgtDetails { get; set; }

    public virtual DbSet<Ta042gtgtDetail> Ta042gtgtDetails { get; set; }

    public virtual DbSet<Ta05qttncn01Detail> Ta05qttncn01Details { get; set; }

    public virtual DbSet<Ta05qttncn01DetailTt80> Ta05qttncn01DetailTt80s { get; set; }

    public virtual DbSet<Ta05qttncn02Detail> Ta05qttncn02Details { get; set; }

    public virtual DbSet<Ta05qttncn02DetailTt80> Ta05qttncn02DetailTt80s { get; set; }

    public virtual DbSet<Ta05qttncn03Detail> Ta05qttncn03Details { get; set; }

    public virtual DbSet<Ta05qttncn03DetailTt80> Ta05qttncn03DetailTt80s { get; set; }

    public virtual DbSet<TaBc26acInvoiceStatement> TaBc26acInvoiceStatements { get; set; }

    public virtual DbSet<TaBc26acInvoiceStatementDetail> TaBc26acInvoiceStatementDetails { get; set; }

    public virtual DbSet<TaPlii922021ndcpDetail> TaPlii922021ndcpDetails { get; set; }

    public virtual DbSet<TaTaindetail> TaTaindetails { get; set; }

    public virtual DbSet<TaTncn051bkdetail> TaTncn051bkdetails { get; set; }

    public virtual DbSet<TaTncn052bkdetail> TaTncn052bkdetails { get; set; }

    public virtual DbSet<TaadditionalDeclarationItem> TaadditionalDeclarationItems { get; set; }

    public virtual DbSet<TaadjustmentDetail> TaadjustmentDetails { get; set; }

    public virtual DbSet<TaadjustmentDetail01> TaadjustmentDetail01s { get; set; }

    public virtual DbSet<TaappendixType> TaappendixTypes { get; set; }

    public virtual DbSet<TacareerGroup> TacareerGroups { get; set; }

    public virtual DbSet<TacareerList> TacareerLists { get; set; }

    public virtual DbSet<TachangedateLunarAndSolar> TachangedateLunarAndSolars { get; set; }

    public virtual DbSet<Tadeclaration> Tadeclarations { get; set; }

    public virtual DbSet<TadeclarationAfterR30> TadeclarationAfterR30s { get; set; }

    public virtual DbSet<TadeclarationAppendix> TadeclarationAppendices { get; set; }

    public virtual DbSet<TadeclarationBeforeR28> TadeclarationBeforeR28s { get; set; }

    public virtual DbSet<TadeclarationConfig> TadeclarationConfigs { get; set; }

    public virtual DbSet<TadeclarationDetail> TadeclarationDetails { get; set; }

    public virtual DbSet<TadeclarationGeneral> TadeclarationGenerals { get; set; }

    public virtual DbSet<TaestimatedEnterpriseIncomeDefault> TaestimatedEnterpriseIncomeDefaults { get; set; }

    public virtual DbSet<TaestimatedEnterpriseIncomeDetail> TaestimatedEnterpriseIncomeDetails { get; set; }

    public virtual DbSet<TanoTaxableGood> TanoTaxableGoods { get; set; }

    public virtual DbSet<Tanotification> Tanotifications { get; set; }

    public virtual DbSet<TapaymentSlip> TapaymentSlips { get; set; }

    public virtual DbSet<Tasubmission> Tasubmissions { get; set; }

    public virtual DbSet<TataxAgentInfo> TataxAgentInfos { get; set; }

    public virtual DbSet<Tatemplate> Tatemplates { get; set; }

    public virtual DbSet<TaxLedger> TaxLedgers { get; set; }

    public virtual DbSet<TaxLocation> TaxLocations { get; set; }

    public virtual DbSet<TaxRate> TaxRates { get; set; }

    public virtual DbSet<TaxReductionInfo> TaxReductionInfos { get; set; }

    public virtual DbSet<TaxReturnVersion> TaxReturnVersions { get; set; }

    public virtual DbSet<Temp> Temps { get; set; }

    public virtual DbSet<ThirdPartyServiceConfig> ThirdPartyServiceConfigs { get; set; }

    public virtual DbSet<TimeSheetSign> TimeSheetSigns { get; set; }

    public virtual DbSet<TrackingPrintBadeposit> TrackingPrintBadeposits { get; set; }

    public virtual DbSet<TrackingPrintBapaymentOrder> TrackingPrintBapaymentOrders { get; set; }

    public virtual DbSet<TrackingPrintCapayment> TrackingPrintCapayments { get; set; }

    public virtual DbSet<TrackingPrintCareceipt> TrackingPrintCareceipts { get; set; }

    public virtual DbSet<TrackingPrintInoutward> TrackingPrintInoutwards { get; set; }

    public virtual DbSet<TrackingPrintInvoice> TrackingPrintInvoices { get; set; }

    public virtual DbSet<TrackingPrintVoucherAccounting> TrackingPrintVoucherAccountings { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    public virtual DbSet<UpdateStatus123Log> UpdateStatus123Logs { get; set; }

    public virtual DbSet<VoucherReference> VoucherReferences { get; set; }

    public virtual DbSet<VoucherToOpening> VoucherToOpenings { get; set; }

    public virtual DbSet<VoucherType> VoucherTypes { get; set; }

    public virtual DbSet<VoucherTypeCategory> VoucherTypeCategories { get; set; }

    public virtual DbSet<VoucherTypeCategoryRefType> VoucherTypeCategoryRefTypes { get; set; }

    #endregion

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        string connectionString = ConfigurationManager.ConnectionStrings["MisaDbContext"].ConnectionString;
        optionsBuilder.UseSqlServer("Data Source=192.168.0.253\\MISASME2023;Initial Catalog=DATPHAT2024;Persist Security Info=True;User ID=sa;Password=12345678@Abc;Encrypt=False;", x => x.UseDateOnlyTimeOnly()); 
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.ToTable("Account", tb =>
                {
                    tb.HasComment("Danh mục tài khoản");
                    tb.HasTrigger("trg_Account_DataChanged");
                });

            entity.HasIndex(e => e.AccountNumber, "IX_AccountNumber").IsUnique();

            entity.HasIndex(e => e.AccountId, "IX_AccountNumber_AccountKind").HasFillFactor(90);

            entity.Property(e => e.AccountId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Tài khoản")
                .HasColumnName("AccountID");
            entity.Property(e => e.AccountCategoryKind).HasComment("Tính chất tài khoản: 0: Dư nợ; 1: Dư có; 2: Lưỡng tính");
            entity.Property(e => e.AccountName)
                .HasMaxLength(128)
                .HasComment("Tên tài khoản");
            entity.Property(e => e.AccountNameChinese).HasMaxLength(128);
            entity.Property(e => e.AccountNameEnglish)
                .HasMaxLength(128)
                .HasComment("Tên tài khoản bằng tiếng anh");
            entity.Property(e => e.AccountNameKorean).HasMaxLength(128);
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Số hiệu tài khoản");
            entity.Property(e => e.AccountObjectType)
                .HasDefaultValueSql("((0))")
                .HasComment("Loại đối tượng: 0 - Nhà cung cấp, 1- Khách hàng, 2- Nhân viên");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.DetailByAccountObject).HasComment("Chi tiết theo đối tượng");
            entity.Property(e => e.DetailByBankAccount).HasComment("Chi tiết theo tài khoản ngân hàng");
            entity.Property(e => e.DetailByContract).HasComment("Chi tiết theo hợp đồng");
            entity.Property(e => e.DetailByContractKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByDepartment).HasComment("Chi tiết theo đơn vị");
            entity.Property(e => e.DetailByDepartmentKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByExpenseItem).HasComment("Chi tiết theo Khoản mục CP");
            entity.Property(e => e.DetailByExpenseItemKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByJob).HasComment("Chi tiết theo đối tượng tập hợp chi phí");
            entity.Property(e => e.DetailByJobKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByListItem).HasComment("Chi tiết theo mã thống kê");
            entity.Property(e => e.DetailByListItemKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByLoanAgreementKind).HasDefaultValueSql("((0))");
            entity.Property(e => e.DetailByOrder).HasComment("Chi tiết theo đơn hàng");
            entity.Property(e => e.DetailByOrderKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByProjectWork).HasComment("Chi tiết theo công trình vụ việc");
            entity.Property(e => e.DetailByProjectWorkKind)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Chỉ cảnh báo; 1 = Bắt buộc nhập");
            entity.Property(e => e.DetailByPucontract).HasColumnName("DetailByPUContract");
            entity.Property(e => e.DetailByPucontractKind)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DetailByPUContractKind");
            entity.Property(e => e.Grade)
                .HasDefaultValueSql("((1))")
                .HasComment("Cấp bậc");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsParent).HasComment("Là TK tổng hợp");
            entity.Property(e => e.IsPostableInForeignCurrency).HasComment("Có hạch toán ngoại tệ");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasComment("TK Tổng hợp")
                .HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<AccountDefault>(entity =>
        {
            entity.ToTable("AccountDefault", tb => tb.HasComment("Tài khoản ngầm định"));

            entity.HasIndex(e => e.RefType, "IX_AccountDefault_RefType").HasFillFactor(90);

            entity.Property(e => e.AccountDefaultId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Mã tài khoản ngầm định")
                .HasColumnName("AccountDefaultID");
            entity.Property(e => e.ColumnCaption)
                .HasMaxLength(100)
                .HasComment("Caption của tên cột. VD: Tài khoản nợ, Tài khoản thuế nhập khẩu");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(50)
                .HasComment("Tên cột tài khoản. VD: DebitAccount, ImportTaxAccount, ...");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(20)
                .HasComment("TK ngầm định. VD: 1561");
            entity.Property(e => e.FilterCondition).HasComment("Điều kiện lọc TK. VD: 152; 153; 156");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("FK - Mã loại chứng từ");
            entity.Property(e => e.RefTypeName)
                .HasMaxLength(255)
                .HasComment("Tên loại chứng từ");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.VoucherType).HasComment("Loại thu, chi trên Thu, chi tiền mặt, tiền gửi");

            entity.HasOne(d => d.DefaultValueNavigation).WithMany(p => p.AccountDefaults)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DefaultValue)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_AccountDefault_Account");
        });

        modelBuilder.Entity<AccountObject>(entity =>
        {
            entity.ToTable("AccountObject", tb =>
                {
                    tb.HasComment("Khách hàng, nhà cung cấp, nhân viên");
                    tb.HasTrigger("trg_AccountObject_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectCode, "IX_AccountObject")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.AccountObjectCode, "IX_AccountObject_AccountObjectCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.AccountObjectName, "IX_AccountObject_AccountObjectName").HasFillFactor(90);

            entity.Property(e => e.AccountObjectId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectCode)
                .HasMaxLength(50)
                .HasComment("Mã đối tượng");
            entity.Property(e => e.AccountObjectGroupList).HasComment("Lưu MISACodeID của nhóm KH, NCC được chọn, cách nhau bởi dấu ;");
            entity.Property(e => e.AccountObjectGroupListCode).HasComment("Lưu AccountObjectGroupCode của các nhóm KH, NCC được chọn, cách nhau bởi dấu ;");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AccountObjectType)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = là tổ chức; 1 = Là cá nhân");
            entity.Property(e => e.Address)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng");
            entity.Property(e => e.AgreementSalary)
                .HasComment("Lương thỏa thuận")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BankAccount)
                .HasMaxLength(50)
                .HasComment("Tài khoản ngân hàng (Là số TK cá nhân nếu là nhân viên)");
            entity.Property(e => e.BankBranchName)
                .HasMaxLength(128)
                .HasComment("Chi nhánh tài khoản ngân hàng)");
            entity.Property(e => e.BankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.BankProvinceOrCity)
                .HasMaxLength(100)
                .HasComment("Tỉnh/Thành phố nơi mở tài khoản ngân hàng");
            entity.Property(e => e.BirthDate)
                .HasComment("Ngày sinh")
                .HasColumnType("datetime");
            entity.Property(e => e.BirthPlace)
                .HasMaxLength(255)
                .HasComment("Nơi sinh");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.ContactAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ người liên hệ");
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .HasComment("Email người liên hệ");
            entity.Property(e => e.ContactFixedTel)
                .HasMaxLength(50)
                .HasComment("Điện thoại cố định người liên hệ");
            entity.Property(e => e.ContactMobile)
                .HasMaxLength(50)
                .HasComment("Số điện thoại di động của người liên hệ");
            entity.Property(e => e.ContactName)
                .HasMaxLength(128)
                .HasComment("Tên người liên hệ");
            entity.Property(e => e.ContactTitle)
                .HasMaxLength(128)
                .HasComment("Chức vụ người liên hệ (Nếu đối tượng là nhân viên thì đây chính là chức vụ mặc định của nhân viên đó)");
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .HasComment("Quốc gia");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.District)
                .HasMaxLength(100)
                .HasComment("Quận/ Huyện");
            entity.Property(e => e.DueTime).HasComment("Hạn nợ ( Số ngày)");
            entity.Property(e => e.EinvoiceContactAddress)
                .HasMaxLength(255)
                .HasColumnName("EInvoiceContactAddress");
            entity.Property(e => e.EinvoiceContactEmail)
                .HasMaxLength(255)
                .HasColumnName("EInvoiceContactEmail");
            entity.Property(e => e.EinvoiceContactMobile)
                .HasMaxLength(50)
                .HasColumnName("EInvoiceContactMobile");
            entity.Property(e => e.EinvoiceContactName)
                .HasMaxLength(255)
                .HasColumnName("EInvoiceContactName");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(100)
                .HasComment("Địa chỉ Email của tổ chức");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeType).HasDefaultValueSql("((3))");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasComment("Fax");
            entity.Property(e => e.Gender).HasComment("Giới tính");
            entity.Property(e => e.IdentificationNumber)
                .HasMaxLength(20)
                .HasComment("Số CMTND của người liên hệ");
            entity.Property(e => e.Inactive)
                .HasDefaultValueSql("((0))")
                .HasComment("Ngừng theo dõi");
            entity.Property(e => e.InsuranceSalary)
                .HasDefaultValueSql("((0))")
                .HasComment("Lương đóng bảo hiểm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IsCustomer)
                .HasDefaultValueSql("((0))")
                .HasComment("Là khách hàng");
            entity.Property(e => e.IsEmployee)
                .HasDefaultValueSql("((0))")
                .HasComment("Là cán bộ nhân viên");
            entity.Property(e => e.IsVendor)
                .HasDefaultValueSql("((0))")
                .HasComment("Là nhà cung cấp");
            entity.Property(e => e.IssueBy)
                .HasMaxLength(120)
                .HasComment("Nơi cấp CMTND người liên hệ");
            entity.Property(e => e.IssueDate)
                .HasComment("Ngày cấp CMTND người liên hệ")
                .HasColumnType("datetime");
            entity.Property(e => e.LegalRepresentative).HasMaxLength(128);
            entity.Property(e => e.MaximizeDebtAmount)
                .HasComment("Số nợ tối đa")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Mobile)
                .HasMaxLength(50)
                .HasComment("Số điện thoại di động");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NumberOfDependent).HasComment("Số người phụ thuộc");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị của nhân viên")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OtherContactMobile)
                .HasMaxLength(50)
                .HasComment("Số điện thoại di động khác của người liên hệ");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Điều khoản thanh toán")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.Prefix)
                .HasMaxLength(60)
                .HasComment("Xưng hô");
            entity.Property(e => e.ProvinceOrCity)
                .HasMaxLength(100)
                .HasComment("Tỉnh/ Thành phố");
            entity.Property(e => e.ReceiptableDebtAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SalaryCoefficient)
                .HasComment("Hệ số lương")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ShippingAddress).HasMaxLength(255);
            entity.Property(e => e.Tel)
                .HasMaxLength(50)
                .HasComment("Số điện thoại cố định");
            entity.Property(e => e.WardOrCommune)
                .HasMaxLength(100)
                .HasComment("Phường/Xã");
            entity.Property(e => e.Website)
                .HasMaxLength(100)
                .HasComment("Website");

            entity.HasOne(d => d.Branch).WithMany(p => p.AccountObjectBranches).HasForeignKey(d => d.BranchId);

            entity.HasOne(d => d.Employee).WithMany(p => p.InverseEmployee).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.AccountObjectOrganizationUnits)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_AccountObject_OrganizationUnit");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.AccountObjects)
                .HasForeignKey(d => d.PaymentTermId)
                .HasConstraintName("FK_AccountObject_PaymentTerm");
        });

        modelBuilder.Entity<AccountObjectBankAccount>(entity =>
        {
            entity.HasKey(e => e.AccountObjectBankAccountId).HasName("PK_AccountingObjectBank");

            entity.ToTable("AccountObjectBankAccount", tb => tb.HasComment("Bảng lưu tài khoản ngân hàng của khách hàng"));

            entity.Property(e => e.AccountObjectBankAccountId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("AccountObjectBankAccountID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("FK")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.BankAccount)
                .HasMaxLength(50)
                .HasComment("Số TK ngân hàng");
            entity.Property(e => e.BankBranchName).HasMaxLength(128);
            entity.Property(e => e.BankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.ProvinceOrCity).HasMaxLength(100);

            entity.HasOne(d => d.AccountObject).WithMany(p => p.AccountObjectBankAccounts)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_AccountObjectBankAccount_AccountObject");
        });

        modelBuilder.Entity<AccountObjectBelongToGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AccountObjectBelongToGroup");

            entity.HasIndex(e => new { e.AccountObjectId, e.AccountObjectGroupId }, "CLIX_AccountObjectBelongToGroup")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.AccountObjectGroupId).HasColumnName("AccountObjectGroupID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");

            entity.HasOne(d => d.AccountObjectGroup).WithMany()
                .HasForeignKey(d => d.AccountObjectGroupId)
                .HasConstraintName("FK_AccountObjectBelongToGroup_AccountObjectGroup");

            entity.HasOne(d => d.AccountObject).WithMany()
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_AccountObjectBelongToGroup_AccountObjectID");
        });

        modelBuilder.Entity<AccountObjectGroup>(entity =>
        {
            entity.HasKey(e => e.AccountObjectGroupId).HasName("PK_AccountingObjectGroup");

            entity.ToTable("AccountObjectGroup", tb =>
                {
                    tb.HasComment("Danh mục nhóm khách hàng, nhà cung cấp");
                    tb.HasTrigger("trg_AccountObjectGroup_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectGroupCode, "IX_AccountingObjectGroup").HasFillFactor(90);

            entity.Property(e => e.AccountObjectGroupId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("AccountObjectGroupID");
            entity.Property(e => e.AccountObjectGroupCode)
                .HasMaxLength(20)
                .HasComment("Mã nhóm khách hàng, nhà cung cấp");
            entity.Property(e => e.AccountObjectGroupName)
                .HasMaxLength(128)
                .HasComment("Tên nhóm khách hàng, nhà cung cấp");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<AccountObjectLedger>(entity =>
        {
            entity.ToTable("AccountObjectLedger", tb => tb.HasTrigger("trg_AccountObjectLedger_DataChanged"));

            entity.HasIndex(e => new { e.RefDetailId, e.IsPostToManagementBook, e.AccountNumber }, "IX_AL_RefDetailID_IsPostToManagementBook_AccNumber");

            entity.HasIndex(e => e.AccountObjectId, "IX_AccountObjectLedger_AccountObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_AccountObjectLedger_BranchID").HasFillFactor(90);

            entity.HasIndex(e => e.CurrencyId, "IX_AccountObjectLedger_CurrencyID").HasFillFactor(90);

            entity.HasIndex(e => new { e.DebtKeyId, e.RefType, e.SortOrder }, "IX_AccountObjectLedger_DebtKeyID");

            entity.HasIndex(e => new { e.IsPostToManagementBook, e.EmployeeId, e.PostedDate, e.BranchId }, "IX_AccountObjectLedger_EmployeeID");

            entity.HasIndex(e => e.EntryType, "IX_AccountObjectLedger_EntryType").HasFillFactor(90);

            entity.HasIndex(e => e.InvRefId, "IX_AccountObjectLedger_InvRefID");

            entity.HasIndex(e => e.InventoryItemId, "IX_AccountObjectLedger_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsPostToManagementBook, e.PostedDate }, "IX_AccountObjectLedger_IsPostToManagementBook_PostedDate");

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_AccountObjectLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => new { e.OrganizationUnitId, e.IsPostToManagementBook, e.PostedDate }, "IX_AccountObjectLedger_OrganizationUnitID_IsPostToManagementBook_PostedDate");

            entity.HasIndex(e => new { e.IsPostToManagementBook, e.PostedDate, e.AccountNumber, e.BranchId }, "IX_AccountObjectLedger_PostedDate");

            entity.HasIndex(e => e.RefDetailId, "IX_AccountObjectLedger_RefDetailID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_AccountObjectLedger_RefID").HasFillFactor(90);

            entity.Property(e => e.AccountObjectLedgerId).HasColumnName("AccountObjectLedgerID");
            entity.Property(e => e.AccountName).HasMaxLength(128);
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectAddressDi)
                .HasMaxLength(400)
                .HasColumnName("AccountObjectAddressDI");
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectNameDi)
                .HasMaxLength(400)
                .HasColumnName("AccountObjectNameDI");
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutExchangeRateLedger).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractCode).HasMaxLength(50);
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.ContractName).HasMaxLength(255);
            entity.Property(e => e.ContractSignDate).HasColumnType("datetime");
            entity.Property(e => e.CorrespondingAccountNumber).HasMaxLength(20);
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.DebtKeyId)
                .HasMaxLength(150)
                .HasComputedColumnSql("([dbo].[Func_Build_DebtKeyID]([RefType],[RefID],[AccountObjectID],[InvNo],[InvDate],[DueDate],[AccountNumber]))", true)
                .HasColumnName("DebtKeyID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeCode).HasMaxLength(25);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName).HasMaxLength(128);
            entity.Property(e => e.EntryType).HasDefaultValueSql("((1))");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvRefId).HasColumnName("InvRefID");
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InventoryItemCode).HasMaxLength(50);
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceOc)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("MainUnitPriceOC");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayKeyId)
                .HasMaxLength(150)
                .HasComputedColumnSql("([dbo].[Func_Build_PayKeyID]([RefType],[RefID],[AccountObjectID],[InvNo],[InvDate],[AccountNumber]))", true)
                .HasColumnName("PayKeyID");
            entity.Property(e => e.PaymentTermId).HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractCode)
                .HasMaxLength(50)
                .HasColumnName("PUContractCode");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PucontractName)
                .HasMaxLength(255)
                .HasColumnName("PUContractName");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.PusignDate)
                .HasColumnType("datetime")
                .HasColumnName("PUSignDate");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.RefOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceOc)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("UnitPriceOC");
        });

        modelBuilder.Entity<AccountObjectShippingAddress>(entity =>
        {
            entity.HasKey(e => e.ShippingAddressId);

            entity.ToTable("AccountObjectShippingAddress", tb => tb.HasComment("Địa chỉ giao hàng của khách hàng/NCC"));

            entity.Property(e => e.ShippingAddressId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Key Địa điểm giao/nhận hàng")
                .HasColumnName("ShippingAddressID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("PK Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.ShippingAddress)
                .HasMaxLength(255)
                .HasComment("Địa điểm giao/nhận hàng");
            entity.Property(e => e.SortOrder).HasComment("Thứ thự nhập");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.AccountObjectShippingAddresses)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_AccountObjectShippingAddress_AccountObject");
        });

        modelBuilder.Entity<AccountTransfer>(entity =>
        {
            entity.ToTable("AccountTransfer", tb => tb.HasComment("Danh mục tài khoản kết chuyển"));

            entity.HasIndex(e => e.AccountTransferCode, "IX_AccountTransfer")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AccountTransferId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Tài khoản kết chuyển")
                .HasColumnName("AccountTransferID");
            entity.Property(e => e.AccountTransferCode)
                .HasMaxLength(50)
                .HasComment("Mã kết chuyển");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.FromAccount)
                .HasMaxLength(20)
                .HasComment("Từ Tài khoản");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.SetupType)
                .HasDefaultValueSql("((1))")
                .HasComment("0: Kết chuyển chi phí sản xuất; 1: kết chuyển xác định KQKD");
            entity.Property(e => e.ToAccount)
                .HasMaxLength(20)
                .HasComment("Đến Tài khoản");
            entity.Property(e => e.TransferOrder).HasComment("Thứ tự kết chuyển");
            entity.Property(e => e.TransferSide).HasComment("Bên kết chuyển: 0: Nợ, 1: Có, 2: Hai bên");

            entity.HasOne(d => d.ToAccountNavigation).WithMany(p => p.AccountTransfers)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.ToAccount)
                .HasConstraintName("FK_AccountTransfer_Account");
        });

        modelBuilder.Entity<AgreementInfo>(entity =>
        {
            entity.ToTable("AgreementInfo");

            entity.Property(e => e.AgreementInfoId)
                .ValueGeneratedNever()
                .HasColumnName("AgreementInfoID");
            entity.Property(e => e.ApplicationCode)
                .HasMaxLength(20)
                .HasComment("Mã ứng dụng trên MISAAgreement");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.ConfirmedDate).HasColumnType("datetime");
            entity.Property(e => e.ConfirmedName).HasMaxLength(128);
            entity.Property(e => e.DateShow).HasColumnType("datetime");
            entity.Property(e => e.IsShowConfirmAgreement).HasDefaultValueSql("((0))");
            entity.Property(e => e.LicenseType).HasComment("Loại giấy phép: 0: giá trị cũ; 1: loại giấy phép thuê bao hàng năm; 2: Loại giấy phép vĩnh viễn");
            entity.Property(e => e.ProductCode)
                .HasMaxLength(20)
                .HasComment("Mã sản phẩm");
        });

        modelBuilder.Entity<AgreementLastestInfo>(entity =>
        {
            entity.HasKey(e => e.AgreementId);

            entity.ToTable("AgreementLastestInfo");

            entity.Property(e => e.AgreementId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AgreementID");
            entity.Property(e => e.AgreementLanguage)
                .HasMaxLength(5)
                .HasDefaultValueSql("('vi')");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CheckUpdateDate).HasColumnType("datetime");
            entity.Property(e => e.LicenseType).HasComment("Loại giấy phép: 0: giá trị cũ; 1: loại giấy phép thuê bao hàng năm; 2: Loại giấy phép vĩnh viễn");
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AmistaxAllOrg>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AMISTaxA__3214EC2702DF9951");

            entity.ToTable("AMISTaxAllOrg");

            entity.Property(e => e.Id)
                .HasMaxLength(255)
                .HasColumnName("ID");
        });

        modelBuilder.Entity<AmistaxConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMISTaxConfig");

            entity.Property(e => e.BranchConnect).IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DatabaseId).HasColumnName("DatabaseID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<AmistaxOrg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AMISTaxOrg");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.AmisorganizationUnitCode)
                .HasMaxLength(50)
                .HasColumnName("AMISOrganizationUnitCode");
            entity.Property(e => e.AmisorganizationUnitId)
                .HasMaxLength(50)
                .HasColumnName("AMISOrganizationUnitID");
            entity.Property(e => e.AmisorganizationUnitName)
                .HasMaxLength(255)
                .HasColumnName("AMISOrganizationUnitName");
            entity.Property(e => e.AmisorganizationUnitTaxCode)
                .HasMaxLength(20)
                .HasColumnName("AMISOrganizationUnitTaxCode");
            entity.Property(e => e.FullName).HasMaxLength(255);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Phone).HasMaxLength(25);
            entity.Property(e => e.SmeorganizationUnitCode)
                .HasMaxLength(20)
                .HasColumnName("SMEOrganizationUnitCode");
            entity.Property(e => e.SmeorganizationUnitId).HasColumnName("SMEOrganizationUnitID");
            entity.Property(e => e.SmeorganizationUnitName)
                .HasMaxLength(128)
                .HasColumnName("SMEOrganizationUnitName");
            entity.Property(e => e.SmeorganizationUnitTaxCode)
                .HasMaxLength(20)
                .HasColumnName("SMEOrganizationUnitTaxCode");
        });

        modelBuilder.Entity<AutoBusiness>(entity =>
        {
            entity.ToTable("AutoBusiness", tb => tb.HasComment("Định khoản tự động"));

            entity.Property(e => e.AutoBusinessId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Định khoản tự động")
                .HasColumnName("AutoBusinessID");
            entity.Property(e => e.AutoBusinessName)
                .HasMaxLength(255)
                .HasComment("Tên định khoản tự động");
            entity.Property(e => e.AutoBusinessNameChinese).HasMaxLength(255);
            entity.Property(e => e.AutoBusinessNameEnglish).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherType).HasComment("Loại chứng từ: 0 = Thu tiền mặt; 1 = Chi tiền mặt; 2 = Thu tiền gửi; 3 = Chi tiền gửi");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.AutoBusinessCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_AutoBusiness_Account2");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.AutoBusinessDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_AutoBusiness_Account");
        });

        modelBuilder.Entity<Badeposit>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_BADeposit_RefID");

            entity.ToTable("BADeposit", tb =>
                {
                    tb.HasComment("Bảng master của chứng từ thu tiền gửi\r\nLà Master của các bảng detail sau:\r\n -BADepositeDetail\r\n -BADepositeDetailSale\r\n -BADepositeDetailFixedAsset");
                    tb.HasTrigger("trg_BADeposit_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectId, "IX_BADeposit_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_BADeposit_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_BADeposit_RefNo").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_BADeposit_RefNoFinance");

            entity.HasIndex(e => e.RefType, "IX_BADeposit_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ người nộp tiền");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã người nộp tiền")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên người nộp tiền/Kho bạc");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasComment("Tên ngân hàng");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GlvoucherRefId).HasColumnName("GLVoucherRefID");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái (Ghi sổ/Chưa ghi sổ)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải Lý do thu");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReasonTypeId)
                .HasComment("Lý do thu")
                .HasColumnName("ReasonTypeID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự chứng từ nhập vào database");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền hàng quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.BadepositAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_BADeposit_AccountingObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.Badeposits)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_BADeposit_BankAccount");

            entity.HasOne(d => d.Branch).WithMany(p => p.Badeposits)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_BADeposit_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Badeposits)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_BADeposit_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.BadepositEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<BadepositDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BADepositDetail", tb => tb.HasComment("Bảng Detail của chứng từ thu tiền gửi. Bao gồm các thu sau:\r\n- Thu tiển gửi thông thường\r\n- Thu tiền gửi từ khách hàng\r\n- Tiền đang chuyển đến"));

            entity.HasIndex(e => e.AccountObjectId, "IX_BADepositDetail_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.CreditAccount, "IX_BADepositDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_BADepositDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_BADepositDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_BADepositDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.DebtAgreementId)
                .HasComment("Khế ước vay")
                .HasColumnName("DebtAgreementID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí (dùng cho Thu tiền KH)")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("Hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_BADepositDetail_AccountingObject");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_BADepositDetail_BudgetItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_BADepositDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.BadepositDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.BadepositDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.DebtAgreement).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.DebtAgreementId)
                .HasConstraintName("FK_BADepositDetail_DebtAgreement");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_BADepositDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_BADepositDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_BADepositDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_BADepositDetail_LOANAgreement");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_BADepositDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_BADepositDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_BADepositDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_BADepositDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.BadepositDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BADepositDetail_BADeposit");
        });

        modelBuilder.Entity<BadepositWithdrawList>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_BADepositWithdrawList_RefID");

            entity.ToTable("BADepositWithdrawList");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount).HasMaxLength(50);
            entity.Property(e => e.AccountObjectBankName).HasMaxLength(255);
            entity.Property(e => e.AccountObjectContactIdnumber)
                .HasMaxLength(20)
                .HasColumnName("AccountObjectContactIDNumber");
            entity.Property(e => e.AccountObjectContactIssueBy).HasMaxLength(120);
            entity.Property(e => e.AccountObjectContactIssueDate).HasColumnType("datetime");
            entity.Property(e => e.AccountObjectContactName).HasMaxLength(128);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.Batype).HasColumnName("BAType");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CabadocumentIncluded)
                .HasMaxLength(255)
                .HasColumnName("CABADocumentIncluded");
            entity.Property(e => e.CabajournalMemo)
                .HasMaxLength(500)
                .HasColumnName("CABAJournalMemo");
            entity.Property(e => e.CabapostedDate)
                .HasColumnType("datetime")
                .HasColumnName("CABAPostedDate");
            entity.Property(e => e.CabarefDate)
                .HasColumnType("datetime")
                .HasColumnName("CABARefDate");
            entity.Property(e => e.CabarefNoFinance)
                .HasMaxLength(20)
                .HasColumnName("CABARefNoFinance");
            entity.Property(e => e.CabarefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("CABARefNoManagement");
            entity.Property(e => e.CashBookPostedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FromBankAccountId).HasColumnName("FromBankAccountID");
            entity.Property(e => e.FromBankAccountName).HasMaxLength(255);
            entity.Property(e => e.IdentificationNumber).HasMaxLength(20);
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IssueBy).HasMaxLength(120);
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListTableName).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Payer).HasMaxLength(128);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermId).HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId).HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.ReasonTypeId).HasColumnName("ReasonTypeID");
            entity.Property(e => e.Receiver).HasMaxLength(128);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName).HasMaxLength(400);
            entity.Property(e => e.ToBankAccountId).HasColumnName("ToBankAccountID");
            entity.Property(e => e.ToBankAccountName).HasMaxLength(255);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalCustomBeforeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalExportTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalExportTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalExportTaxAmountOC");
            entity.Property(e => e.TotalFreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalImportTaxAmountOC");
            entity.Property(e => e.TotalInwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalSpecialConsumeTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSpecialConsumeTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSpecialConsumeTaxAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
        });

        modelBuilder.Entity<BainternalTransfer>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("BAInternalTransfer", tb => tb.HasComment("Chuyển tiền nội bộ"));

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_BAInternalTransfer_RefNoFinance");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_BAInternalTransfer_RefNo_BranchID").HasFillFactor(90);

            entity.HasIndex(e => e.RefType, "IX_BAInternalTransfer_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("FK: ID chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản ghi nhận lần sửa");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FromBankAccountId)
                .HasComment("Từ Tài khoản ngân hàng")
                .HasColumnName("FromBankAccountID");
            entity.Property(e => e.FromBankAccountName)
                .HasMaxLength(128)
                .HasComment("Tên hoặc diễn giải ngân hàng chuyển từ");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái (Ghi sổ/Chưa ghi sổ)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do chuyển");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự chứng từ nhập vào database");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.ToBankAccountId)
                .HasComment("đến Tài khoản ngân hàng")
                .HasColumnName("ToBankAccountID");
            entity.Property(e => e.ToBankAccountName)
                .HasMaxLength(128)
                .HasComment("Tên hoặc diễn giải ngân hàng chuyển đến");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền chuyển quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền chuyển")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");

            entity.HasOne(d => d.Branch).WithMany(p => p.BainternalTransfers)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_BAInternalTransfer_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.BainternalTransfers)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_BAInternalTransfer_CCY");

            entity.HasOne(d => d.FromBankAccount).WithMany(p => p.BainternalTransferFromBankAccounts)
                .HasForeignKey(d => d.FromBankAccountId)
                .HasConstraintName("FK_BAInternalTransfer_BankAccount_FromBankAccount");

            entity.HasOne(d => d.ToBankAccount).WithMany(p => p.BainternalTransferToBankAccounts)
                .HasForeignKey(d => d.ToBankAccountId)
                .HasConstraintName("FK_BAInternalTransfer_BankAccount_ToBankAccount");
        });

        modelBuilder.Entity<BainternalTransferDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BAInternalTransferDetail", tb => tb.HasComment("Chi tiết chuyển tiền nội bộ"));

            entity.HasIndex(e => e.CreditAccount, "IX_BAInternalTransferDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_BAInternalTransferDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_BAInternalTransferDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_BAInternalTransferDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.BainternalTransferDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_BAInternalTransferDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.BainternalTransferDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_BAInternalTransferDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_BAInternalTransferDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.BainternalTransferDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_BAInternalTransferDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.BainternalTransferDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_BAInternalTransferDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_BAInternalTransferDetail_ExpenseItem");

            entity.HasOne(d => d.ListItem).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_BAInternalTransferDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_BAInternalTransferDetail_LOANAgreement");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_BAInternalTransferDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_BAInternalTransferDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.BainternalTransferDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAInternalTransferDetail_BAInternalTransfer");
        });

        modelBuilder.Entity<Bank>(entity =>
        {
            entity.HasKey(e => e.BankId).HasName("PK_Bank_1");

            entity.ToTable("Bank", tb => tb.HasComment("Danh mục ngân hàng"));

            entity.HasIndex(e => e.BankCode, "IX_BankCode").HasFillFactor(90);

            entity.Property(e => e.BankId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khoá chính")
                .HasColumnName("BankID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Địa điểm hội sở chính");
            entity.Property(e => e.BankCode)
                .HasMaxLength(20)
                .HasComment("Tên viết tắt");
            entity.Property(e => e.BankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng đầy đủ");
            entity.Property(e => e.BankNameEnglish)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng đầy đủ tiếng anh");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.EbankCode)
                .HasMaxLength(10)
                .HasColumnName("EBankCode");
            entity.Property(e => e.Icon).HasComment("Icon");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<BankAccount>(entity =>
        {
            entity.ToTable("BankAccount", tb =>
                {
                    tb.HasComment("Danh mục Tài khoản ngân hàng");
                    tb.HasTrigger("trg_BankAccount_DataChanged");
                });

            entity.HasIndex(e => e.BankAccountNumber, "IX_BankInfo")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.BankAccountId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.AccountHolder)
                .HasMaxLength(128)
                .HasComment("Chủ tài khoản");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Địa chỉ nơi mở");
            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản ngân hàng");
            entity.Property(e => e.BankId)
                .HasComment("Ngân hàng")
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasComment("Nơi mở: ví dụ Ngân hàng VCB chi nhánh 01");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ProvinceOrCity).HasMaxLength(100);

            entity.HasOne(d => d.Bank).WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_BankAccount_Bank");

            entity.HasOne(d => d.Branch).WithMany(p => p.BankAccounts)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_BankAccount_OrganizationUnit");
        });

        modelBuilder.Entity<BankListAndSalesSummaryReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BankListAndSalesSummaryReport");

            entity.Property(e => e.BankCodeHasVoucher).HasMaxLength(1000);
            entity.Property(e => e.QuantityEinvoiceIssued).HasColumnName("QuantityEInvoiceIssued");
            entity.Property(e => e.QuantityInvoice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SubSystemList).HasMaxLength(1000);
            entity.Property(e => e.UsingEinvoice).HasColumnName("UsingEInvoice");
        });

        modelBuilder.Entity<BankSupported>(entity =>
        {
            entity.HasKey(e => e.BankCode);

            entity.ToTable("BankSupported");

            entity.Property(e => e.BankCode).HasMaxLength(20);
            entity.Property(e => e.BankName).HasMaxLength(128);
            entity.Property(e => e.BankNo).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LogoUrl).HasColumnName("LogoURL");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ShortName).HasMaxLength(128);
            entity.Property(e => e.SmallLogoUrl).HasColumnName("SmallLogoURL");
            entity.Property(e => e.SupportProduct).HasMaxLength(20);
        });

        modelBuilder.Entity<Bareconcile>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("BAReconcile", tb => tb.HasComment("Danh sách đối chiếu ngân hàng"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BankAccountId)
                .HasComment("TK ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ClosingAmounInBank)
                .HasComment("Số dư cuối kỳ tại ngân hàng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.IsTemporary).HasComment("Là dữ liệu cất tạm");
            entity.Property(e => e.SortOrder)
                .ValueGeneratedOnAdd()
                .HasComment("Thứ tự cất vào Database");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.Bareconciles)
                .HasForeignKey(d => d.BankAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BAReconcile_BankAccount");

            entity.HasOne(d => d.Currency).WithMany(p => p.Bareconciles)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_BAReconcile_CCY");
        });

        modelBuilder.Entity<BareconcileTemporaryPaymentVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAReconcileTemporaryPaymentVoucher", tb => tb.HasComment("Danh mục chứng từ thu đã check chọn trên form Đối chiếu ngân hàng"));

            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.RefId)
                .HasComment("Danh mục chứng từ chi đã check chọn trên form Đối chiếu ngân hàng")
                .HasColumnName("RefID");

            entity.HasOne(d => d.AccountObject).WithMany()
                .HasForeignKey(d => d.AccountObjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_BAReconcileTemporaryPaymentVoucher_AccountObject");
        });

        modelBuilder.Entity<BareconcileTemporaryReceiptVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BAReconcileTemporaryReceiptVoucher", tb => tb.HasComment("Danh mục chứng từ thu đã check chọn trên form Đối chiếu ngân hàng"));

            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.RefId)
                .HasComment("Danh mục chứng từ thu đã check chọn trên form Đối chiếu ngân hàng")
                .HasColumnName("RefID");

            entity.HasOne(d => d.AccountObject).WithMany()
                .HasForeignKey(d => d.AccountObjectId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_BAReconcileTemporaryReceiptVoucher_AccountObject");
        });

        modelBuilder.Entity<BawithDraw>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_BAWithDraw_RefID");

            entity.ToTable("BAWithDraw", tb =>
                {
                    tb.HasComment("Bảng master của chứng từ chi tiền gửi\r\nLà Master của các bảng detail sau:\r\n -BAWithDrawDetail\r\n -BAWithDrawDetailPurchase\r\n -BAWithDrawDetaillFixedAsset");
                    tb.HasTrigger("trg_BAWithDraw_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectId, "IX_BAWithDraw_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_BAWithDraw_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_BAWithDraw_RefNo").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_BAWithDraw_RefNoFinance");

            entity.HasIndex(e => e.RefType, "IX_BAWithDraw_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ đơn vị nhận tiền");
            entity.Property(e => e.AccountObjectBankAccount)
                .HasMaxLength(50)
                .HasComment("Tài khoản đơn vị nhận tiền");
            entity.Property(e => e.AccountObjectBankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng đơn vị nhận tiền");
            entity.Property(e => e.AccountObjectContactIdnumber)
                .HasMaxLength(20)
                .HasComment("Số CMTND của Người lĩnh tiền")
                .HasColumnName("AccountObjectContactIDNumber");
            entity.Property(e => e.AccountObjectContactIssueBy)
                .HasMaxLength(120)
                .HasComment("Nơi cấp CMTND Người lĩnh tiền");
            entity.Property(e => e.AccountObjectContactIssueDate)
                .HasComment("Ngày cấp CMTND Người lĩnh tiền")
                .HasColumnType("datetime");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người lĩnh tiền");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đơn vị nhận tiền")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Têm đơn vị nhận tiền (Tên đối tượng/Kho bạc nhà nước)");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasComment("Tên ngân hàng đơn vị trả tiền");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Ghi nhận phiên bản sửa chứng từ");
            entity.Property(e => e.EinvoiceType).HasColumnName("EInvoiceType");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GlvoucherRefId).HasColumnName("GLVoucherRefID");
            entity.Property(e => e.IsAntiDumpingVat).HasColumnName("IsAntiDumpingVAT");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IsEnvironmentVat).HasColumnName("IsEnvironmentVAT");
            entity.Property(e => e.IsImportVat).HasColumnName("IsImportVAT");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái (Ghi sổ/Chưa ghi sổ)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi vào sổ quản trị");
            entity.Property(e => e.IsSpecialVat).HasColumnName("IsSpecialVAT");
            entity.Property(e => e.IsVat).HasColumnName("IsVAT");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải Nội dung thanh toán");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReasonTypeId)
                .HasComment("Nội dung thanh toán")
                .HasColumnName("ReasonTypeID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự chứng từ nhập vào database");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Số tiền= Tổng tiền từ Detail tương ứng với ID (Sum(Amount)) (Quy đổi)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("TransactionID");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.BawithDrawAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_BAWithDraw_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.BawithDraws)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_BAWithDraw_BankAccount");

            entity.HasOne(d => d.Branch).WithMany(p => p.BawithDraws)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_BAWithDraw_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.BawithDraws)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_BAWithDraw_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.BawithDrawEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<BawithDrawDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BAWithDrawDetail", tb => tb.HasComment("Bảng Detail của chứng từ chi tiền gửi. Bao gồm các loại chi sau:\r\n- Chi tiền gửi thông thường\r\n- Chi tiền gửi trả nhà cung cấp\r\n- Tiền đang chuyển đi"));

            entity.HasIndex(e => new { e.DebitAccount, e.CreditAccount }, "IX_BAWithDrawDetail_Account").HasFillFactor(90);

            entity.HasIndex(e => e.BudgetItemId, "IX_BAWithDrawDetail_ButgetItemID").HasFillFactor(90);

            entity.HasIndex(e => e.ContractId, "IX_BAWithDrawDetail_ContractID").HasFillFactor(90);

            entity.HasIndex(e => e.JobId, "IX_BAWithDrawDetail_JobID").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_BAWithDrawDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_BAWithDrawDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục chi")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.DebtAgreementId)
                .HasComment("Khế ước vay")
                .HasColumnName("DebtAgreementID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("ĐT tập hợp chi phí")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("Hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_BAWithDrawDetail_AccountObject");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_BAWithDrawDetail_BudgetItem");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.BawithDrawDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_BAWithDrawDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.BawithDrawDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_BAWithDrawDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_BAWithDrawDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.BawithDrawDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.BawithDrawDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.DebtAgreement).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.DebtAgreementId)
                .HasConstraintName("FK_BAWithDrawDetail_DebtAgreement");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_BAWithDrawDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_BAWithDrawDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_BAWithDrawDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_BAWithDrawDetail_LOANAgreement");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_BAWithDrawDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_BAWithDrawDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_BAWithDrawDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_BAWithDrawDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.BawithDrawDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAWithDrawDetail_BAWithDraw");
        });

        modelBuilder.Entity<BawithDrawDetailSalary>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BAWithDrawDetailSalary", tb => tb.HasComment("Chi tiết trả lương nhân viên"));

            entity.HasIndex(e => e.RefId, "IX_BAWithDrawDetailSalary_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(355)
                .HasComment("Số tài khoản ngân hàng");
            entity.Property(e => e.BankName).HasMaxLength(128);
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số còn phải trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Thứ tự dòng");

            entity.HasOne(d => d.Employee).WithMany(p => p.BawithDrawDetailSalaries)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BAWithDrawDetailSalary_AccountObject");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.BawithDrawDetailSalaries)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BAWithDrawDetailSalary_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.BawithDrawDetailSalaries)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAWithDrawDetailSalary_BAWithDraw");
        });

        modelBuilder.Entity<BawithdrawDetailImportMultiTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_BAWithdrawDetailImportVAT_DetailTax");

            entity.ToTable("BAWithdrawDetailImportMultiTax");

            entity.HasIndex(e => e.RefId, "IX_BAWithdrawDetailImportMultiTax_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ NCC");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID của đối tượng (NCC)")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên NCC");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.AntiDumpingTaxAccount).HasMaxLength(20);
            entity.Property(e => e.AntiDumpingTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxPaidAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxPayableAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxRemainningAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải của chứng từ");
            entity.Property(e => e.EnvironmentAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế tiêu thụ đặc biệt");
            entity.Property(e => e.EnvironmentAmount)
                .HasComment("Tiền thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentPaidAmount)
                .HasComment("Số nộp của thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentPayableAmount)
                .HasComment("Số phải nộp của thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentRate)
                .HasComment("Thuế suất  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentRemainningAmount)
                .HasComment("Số còn phải nộp của thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế nhập khẩu");
            entity.Property(e => e.ImportAmount)
                .HasComment("Tiền thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportPaidAmount)
                .HasComment("Số nộp của thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportPayableAmount)
                .HasComment("Số phải nộp của thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportRate)
                .HasComment("Thuế suất thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportRemainningAmount)
                .HasComment("Số còn phải nộp của thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Nhóm HHDV mua vào")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.SpecialAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế tiêu thụ đặc biệt");
            entity.Property(e => e.SpecialAmount)
                .HasComment("Tiền thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialPaidAmount)
                .HasComment("Số nộp của thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialPayableAmount)
                .HasComment("Số phải nộp của thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialRate)
                .HasComment("Thuế suất tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialRemainningAmount)
                .HasComment("Số còn phải nộp của thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Giá hàng tính thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatcorrespondingAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT khấu trừ")
                .HasColumnName("VATCorrespondingAccount");
            entity.Property(e => e.VatdeductionAccount)
                .HasMaxLength(20)
                .HasComment("TK đối ứng thuế GTGT")
                .HasColumnName("VATDeductionAccount");
            entity.Property(e => e.VatpaidAmount)
                .HasComment("Số nộp của thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATPaidAmount");
            entity.Property(e => e.VatpayableAmount)
                .HasComment("Số phải nộp của thuế  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATPayableAmount");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatremainningAmount)
                .HasComment("Số còn phải nộp của thuế  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRemainningAmount");
            entity.Property(e => e.VoucherPostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("Lưu ID của chứng từ mua hàng nhập khẩu, nhằm đáp ứng nhu cầu nộp thuế cho từng dòng chi tiết")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ hàng nhập khẩu")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.VoucherRefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.VoucherRefType).HasComment("Loại chứng từ của hóa đơn gốc");

            entity.HasOne(d => d.AntiDumpingTaxAccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxAntiDumpingTaxAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AntiDumpingTaxAccount);

            entity.HasOne(d => d.EnvironmentAccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxEnvironmentAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.EnvironmentAccount);

            entity.HasOne(d => d.ImportAccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxImportAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.ImportAccount);

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.BawithdrawDetailImportMultiTaxes)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_BAWithdrawDetailImportMultiTax_InvestmentProject");

            entity.HasOne(d => d.Ref).WithMany(p => p.BawithdrawDetailImportMultiTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAWithdrawDetailImportVAT_DetailTax_BAWithDraw");

            entity.HasOne(d => d.SpecialAccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxSpecialAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.SpecialAccount);

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);

            entity.HasOne(d => d.VatcorrespondingAccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxVatcorrespondingAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.VatcorrespondingAccount);

            entity.HasOne(d => d.VatdeductionAccountNavigation).WithMany(p => p.BawithdrawDetailImportMultiTaxVatdeductionAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.VatdeductionAccount);
        });

        modelBuilder.Entity<BawithdrawDetailImportVat>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BAWithdrawDetailImportVAT", tb => tb.HasComment("Nộp thuế GTGT hàng nhập khẩu bằng chuyển khoản"));

            entity.HasIndex(e => e.RefId, "IX_BAWithdrawDetailImportVAT_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.Amount)
                .HasComment("Số nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK đối ứng thuế GTGT");
            entity.Property(e => e.DeductionDebitAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT khấu trừ");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainningAmount)
                .HasComment("Số còn phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TurnOverAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VoucherPostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("Lưu ID của chứng từ mua hàng nhập khẩu, nhằm đáp ứng nhu cầu nộp thuế cho từng dòng chi tiết")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ hàng nhập khẩu")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.VoucherRefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.VoucherRefType).HasComment("Loại chứng từ của hóa đơn gốc");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.BawithdrawDetailImportVatCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.BawithdrawDetailImportVatDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.DeductionDebitAccountNavigation).WithMany(p => p.BawithdrawDetailImportVatDeductionDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DeductionDebitAccount);

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.BawithdrawDetailImportVats)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_BAWithdrawDetailImportVAT_InvestmentProject");

            entity.HasOne(d => d.Ref).WithMany(p => p.BawithdrawDetailImportVats)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAWithdrawDetailImportVAT_BAWithDraw");
        });

        modelBuilder.Entity<BawithdrawDetailPersonalIncomeTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BAWithdrawDetailPersonalIncomeTax");

            entity.HasIndex(e => e.RefId, "IX_BAWithdrawDetailPersonalIncomeTax_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số nộp lần này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Thứ tự sắp xếp");

            entity.HasOne(d => d.Ref).WithMany(p => p.BawithdrawDetailPersonalIncomeTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAWithdrawDetailPersonalIncomeTax_BAWithDraw");
        });

        modelBuilder.Entity<BawithdrawDetailTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BAWithdrawDetailTax", tb => tb.HasComment("Bảng chi tiết các khoản thuế của chứng từ Séc/ Ủy nhiệm chi"));

            entity.HasIndex(e => e.RefId, "IX_BAWithdrawDetailTax_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("FK: ID Nhà cung cấp")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Đối tượng");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm HHDV mua vào")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Sign).HasDefaultValueSql("((1))");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.TurnoverAmount)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản thuế")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Thuế quy đổi (Luôn lưu giá trị theo đồng tiền hạch toán)")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.BawithdrawDetailTaxes)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_BAWithdrawDetailTax_AccountingObject");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.BawithdrawDetailTaxes)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_BAWithdrawDetailTax_InvestmentProject");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.BawithdrawDetailTaxes)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_BAWithdrawDetailTax_PurchasePurpose");

            entity.HasOne(d => d.Ref).WithMany(p => p.BawithdrawDetailTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BAWithdrawDetailTax_BAWithDraw");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.BawithdrawDetailTaxes)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount)
                .HasConstraintName("FK_BAWithdrawDetailTax_Account");
        });

        modelBuilder.Entity<BudgetItem>(entity =>
        {
            entity.ToTable("BudgetItem", tb => tb.HasComment("Nhóm mục thu/ Nhóm mục chi"));

            entity.HasIndex(e => e.BudgetItemCode, "IX_BudgetItemCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.BudgetItemId)
                .HasDefaultValueSql("(newid())")
                .HasComment("FK của bảng")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.BudgetItemCode)
                .HasMaxLength(20)
                .HasComment("Mã mục chi");
            entity.Property(e => e.BudgetItemName)
                .HasMaxLength(128)
                .HasComment("Tên mục chi");
            entity.Property(e => e.BudgetItemType)
                .HasDefaultValueSql("((1))")
                .HasComment("0: Mục thu; 1: Mục chi");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Grade)
                .HasDefaultValueSql("((1))")
                .HasComment("Cấp bậc");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsParent).HasComment("Là mục chi cha");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasComment("Mục chi cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<Buexpenditure>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("BUExpenditure");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AmountByExpense).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountByProfit).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountByRevenue).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.BuexpenditureBranches)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.BuexpenditureOrganizationUnits)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_BUExpenditure_OrganizationUnit");
        });

        modelBuilder.Entity<BuexpenditureDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("BUExpenditureDetail");

            entity.HasIndex(e => e.RefId, "IX_BUExpenditureDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.AmountMonth).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth10).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth11).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth12).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth4).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth5).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth6).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth7).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth8).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountMonth9).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.InventoryCategoryId).HasColumnName("InventoryCategoryID");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(128);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.BuexpenditureDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_BUExpenditureDetail_BUExpenditure");
        });

        modelBuilder.Entity<BusinessType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BusinessType");

            entity.Property(e => e.BusinessTypeNameSme).HasColumnName("BusinessTypeNameSME");
        });

        modelBuilder.Entity<BusinessTypeHiddenOption>(entity =>
        {
            entity.HasKey(e => e.OptionVisibleBusinessId).HasName("PK_BusinessTypeHidenOption");

            entity.ToTable("BusinessTypeHiddenOption");

            entity.Property(e => e.OptionVisibleBusinessId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OptionVisibleBusinessID");
            entity.Property(e => e.ColumnHidden).HasMaxLength(50);
            entity.Property(e => e.DictionaryType).HasMaxLength(50);
            entity.Property(e => e.LayoutHidden).HasMaxLength(50);
            entity.Property(e => e.OptionVisibleBusiness).HasMaxLength(50);
            entity.Property(e => e.ParentId)
                .HasMaxLength(100)
                .HasColumnName("ParentID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.SubSystemCode).HasMaxLength(50);
            entity.Property(e => e.TableName).HasMaxLength(50);
        });

        modelBuilder.Entity<BusinessTypeVisible>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BusinessTypeVisible");

            entity.Property(e => e.BusinessTypeVisibleId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("BusinessTypeVisibleID");
        });

        modelBuilder.Entity<Caaudit>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_CAAdjustment");

            entity.ToTable("CAAudit", tb => tb.HasComment("Kiểm kê quỹ"));

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.AuditDate)
                .HasComment("Kiểm kê đến ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CapaymentRefId).HasColumnName("CAPaymentRefID");
            entity.Property(e => e.CareceiptRefId).HasColumnName("CAReceiptRefID");
            entity.Property(e => e.Conclusion)
                .HasMaxLength(255)
                .HasComment("Kết luận");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền: Mặc định đồng tiền hạch toán")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DisplayOnBook).HasComment("0 = Kiểm kê trên Sổ tài chinh;1 = Kiểm kê trên Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.IsExecuted).HasComment("Đã xử lý chênh lệch");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasComment("Lý do");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày kiểm kê")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số kiểm kê");
            entity.Property(e => e.RefTime)
                .HasComment("Giờ kiểm kê")
                .HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalAuditAmount)
                .HasComment("Tổng số tiền kiểm kê")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalBalanceAmount)
                .HasComment("Tổng dư nợ tài khoản theo sổ kế toán tiền mặt")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.Caaudits)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_CAAudit_OrganizationUnit");

            entity.HasOne(d => d.CapaymentRef).WithMany(p => p.Caaudits)
                .HasForeignKey(d => d.CapaymentRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_CAAudit_CAPayment");

            entity.HasOne(d => d.CareceiptRef).WithMany(p => p.Caaudits)
                .HasForeignKey(d => d.CareceiptRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_CAAudit_CAReceipt");

            entity.HasOne(d => d.Currency).WithMany(p => p.Caaudits)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_CAAudit_CCY");
        });

        modelBuilder.Entity<CaauditDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_CAAdjustmentDetail");

            entity.ToTable("CAAuditDetail", tb => tb.HasComment("Kiểm kê quỹ chi tiết"));

            entity.HasIndex(e => e.RefId, "IX_CAAuditDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Quantity).HasComment("Số lượng");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.ValueOfMoney).HasComment("Mệnh giá tiền");

            entity.HasOne(d => d.Ref).WithMany(p => p.CaauditDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAAuditDetail_CAAudit");
        });

        modelBuilder.Entity<CaauditMemberDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_CAAdjustmentMemberDetail");

            entity.ToTable("CAAuditMemberDetail", tb => tb.HasComment("Bảng chi tiết các thành viên tham gia kiểm kê"));

            entity.HasIndex(e => e.RefId, "IX_CAAuditMemberDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Họ và tên");
            entity.Property(e => e.Position)
                .HasMaxLength(128)
                .HasComment("Chức vụ");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Representative)
                .HasMaxLength(255)
                .HasComment("Đại diện");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("('((0))')");

            entity.HasOne(d => d.Ref).WithMany(p => p.CaauditMemberDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAAuditMemberDetail_CAAudit");
        });

        modelBuilder.Entity<CabareasonType>(entity =>
        {
            entity.HasKey(e => e.ReasonTypeId);

            entity.ToTable("CABAReasonType", tb => tb.HasComment("Bảng lưu trữ Lý do thu, chi phân hệ Quỹ, Ngân hàng"));

            entity.Property(e => e.ReasonTypeId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("ReasonTypeID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ReasonTypeName)
                .HasMaxLength(255)
                .HasComment("Tên lý do");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
        });

        modelBuilder.Entity<Cacashbook>(entity =>
        {
            entity.HasKey(e => e.CashBookId);

            entity.ToTable("CACashbook");

            entity.HasIndex(e => e.RefId, "IX_CACashbook_RefID").HasFillFactor(90);

            entity.Property(e => e.CashBookId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CashBookID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CashBookPostedDate).HasColumnType("datetime");
            entity.Property(e => e.Catype).HasColumnName("CAType");
            entity.Property(e => e.ContactName).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.PaymentAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentAmountOc)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PaymentAmountOC");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceiptAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiptAmountOc)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiptAmountOC");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);

            entity.HasOne(d => d.Branch).WithMany(p => p.Cacashbooks)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_CACashbook_OrganizationUnit");
        });

        modelBuilder.Entity<CacheMatchInventoryItem>(entity =>
        {
            entity.HasKey(e => e.CacheId);

            entity.ToTable("CacheMatch_InventoryItem");

            entity.Property(e => e.CacheId)
                .ValueGeneratedNever()
                .HasColumnName("CacheID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.Suggest).HasMaxLength(500);
        });

        modelBuilder.Entity<Capayment>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("CAPayment", tb =>
                {
                    tb.HasComment("Bảng Master của phiếu chi.\r\nLà master các bảng sau:\r\n- CAPaymentDetail\r\n- CAPaymentDetailSale\r\n- CAPaymentDetailFixedAsset");
                    tb.HasTrigger("trg_CAPayment_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectId, "IX_CAPayment_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_CAPayment_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_CAPayment_RefNo").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_CAPayment_RefNoFinance");

            entity.HasIndex(e => e.RefType, "IX_CAPayment_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người nhận tiền (Chỉ hiển thị trên Trả tiền nhà cung cấp)");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Kèm theo chứng từ gốc");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EinvoiceType).HasColumnName("EInvoiceType");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GlvoucherRefId).HasColumnName("GLVoucherRefID");
            entity.Property(e => e.IsAntiDumpingVat).HasColumnName("IsAntiDumpingVAT");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IsEnvironmentVat).HasColumnName("IsEnvironmentVAT");
            entity.Property(e => e.IsImportEinvoice).HasColumnName("IsImportEInvoice");
            entity.Property(e => e.IsImportVat).HasColumnName("IsImportVAT");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.IsSpecialVat).HasColumnName("IsSpecialVAT");
            entity.Property(e => e.IsVat).HasColumnName("IsVAT");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải lý do chi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReasonTypeId)
                .HasComment("Lý do chi")
                .HasColumnName("ReasonTypeID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự chứng từ nhập vào database");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("TransactionID");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.CapaymentAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_CAPayment_AccountingObject_AccountObjectID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Capayments)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_CAPayment_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Capayments)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_CAPayment_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.CapaymentEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.GlvoucherRef).WithMany(p => p.Capayments)
                .HasForeignKey(d => d.GlvoucherRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_CAPayment_GLVoucher");
        });

        modelBuilder.Entity<CapaymentDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("CAPaymentDetail", tb => tb.HasComment("Bảng detail của phiếu chi. Bao gồm các loại  chi sau:\r\n- Chi thông thường\r\n- Chi trả nhà cung cấp\r\n- Chi trả lương\r\n- Chi thanh toán thuế TNCN\r\n- Chi thanh toán bảo hiểm"));

            entity.HasIndex(e => e.AccountObjectId, "IX_CAPaymentDetail_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.ContractId, "IX_CAPaymentDetail_ContractID").HasFillFactor(90);

            entity.HasIndex(e => e.CreditAccount, "IX_CAPaymentDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_CAPaymentDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_CAPaymentDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_CAPaymentDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục chi")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.DebtAgreementId)
                .HasComment("Khế ước vay")
                .HasColumnName("DebtAgreementID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("ĐT tập hợp chi phí")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("Hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_CAPaymentDetail_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_CAPaymentDetail_BankAccount");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_CAPaymentDetail_BudgetItem");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.CapaymentDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_CAPaymentDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.CapaymentDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_CAPaymentDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_CAPaymentDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.CapaymentDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_CAPaymentDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.CapaymentDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_CAPaymentDetail_Account_Debit");

            entity.HasOne(d => d.DebtAgreement).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.DebtAgreementId)
                .HasConstraintName("FK_CAPaymentDetail_DebtAgreement");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_CAPaymentDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_CAPaymentDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_CAPaymentDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_CAPaymentDetail_LOANAgreement");

            entity.HasOne(d => d.Order).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_CAPaymentDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_CAPaymentDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_CAPaymentDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_CAPaymentDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_CAPaymentDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.CapaymentDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAPaymentDetail_CAPayment");
        });

        modelBuilder.Entity<CapaymentDetailImportMultiTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_CAPaymentDetailImportVAT_DetailTax");

            entity.ToTable("CAPaymentDetailImportMultiTax");

            entity.HasIndex(e => e.RefId, "IX_CAPaymentDetailImportMultiTax_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ NCC");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID của đối tượng (NCC)")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên NCC");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.AntiDumpingTaxAccount).HasMaxLength(20);
            entity.Property(e => e.AntiDumpingTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxPaidAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxPayableAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxRemainningAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải của chứng từ");
            entity.Property(e => e.EnvironmentAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế tiêu thụ đặc biệt");
            entity.Property(e => e.EnvironmentAmount)
                .HasComment("Tiền thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentPaidAmount)
                .HasComment("Số nộp của thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentPayableAmount)
                .HasComment("Số phải nộp của thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentRate)
                .HasComment("Thuế suất  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentRemainningAmount)
                .HasComment("Số còn phải nộp của thuế  bảo vệ môi trường")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế nhập khẩu");
            entity.Property(e => e.ImportAmount)
                .HasComment("Tiền thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportPaidAmount)
                .HasComment("Số nộp của thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportPayableAmount)
                .HasComment("Số phải nộp của thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportRate)
                .HasComment("Thuế suất thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportRemainningAmount)
                .HasComment("Số còn phải nộp của thuế NK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Nhóm HHDV mua vào")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.SpecialAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế tiêu thụ đặc biệt");
            entity.Property(e => e.SpecialAmount)
                .HasComment("Tiền thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialPaidAmount)
                .HasComment("Số nộp của thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialPayableAmount)
                .HasComment("Số phải nộp của thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialRate)
                .HasComment("Thuế suất tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialRemainningAmount)
                .HasComment("Số còn phải nộp của thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Giá hàng tính thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatcorrespondingAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT khấu trừ")
                .HasColumnName("VATCorrespondingAccount");
            entity.Property(e => e.VatdeductionAccount)
                .HasMaxLength(20)
                .HasComment("TK đối ứng thuế GTGT")
                .HasColumnName("VATDeductionAccount");
            entity.Property(e => e.VatpaidAmount)
                .HasComment("Số nộp của thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATPaidAmount");
            entity.Property(e => e.VatpayableAmount)
                .HasComment("Số phải nộp của thuế  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATPayableAmount");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatremainningAmount)
                .HasComment("Số còn phải nộp của thuế  GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRemainningAmount");
            entity.Property(e => e.VoucherPostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("Lưu ID của chứng từ mua hàng nhập khẩu, nhằm đáp ứng nhu cầu nộp thuế cho từng dòng chi tiết")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ hàng nhập khẩu")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.VoucherRefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.VoucherRefType).HasComment("Loại chứng từ của hóa đơn gốc");

            entity.HasOne(d => d.AntiDumpingTaxAccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxAntiDumpingTaxAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AntiDumpingTaxAccount);

            entity.HasOne(d => d.EnvironmentAccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxEnvironmentAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.EnvironmentAccount);

            entity.HasOne(d => d.ImportAccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxImportAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.ImportAccount);

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.CapaymentDetailImportMultiTaxes)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_CAPaymentDetailImportMultiTax_InvestmentProject");

            entity.HasOne(d => d.Ref).WithMany(p => p.CapaymentDetailImportMultiTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAPaymentDetailImportVAT_DetailTax_CAPayment");

            entity.HasOne(d => d.SpecialAccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxSpecialAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.SpecialAccount);

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);

            entity.HasOne(d => d.VatcorrespondingAccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxVatcorrespondingAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.VatcorrespondingAccount);

            entity.HasOne(d => d.VatdeductionAccountNavigation).WithMany(p => p.CapaymentDetailImportMultiTaxVatdeductionAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.VatdeductionAccount);
        });

        modelBuilder.Entity<CapaymentDetailImportVat>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("CAPaymentDetailImportVAT", tb => tb.HasComment("Nộp thuế GTGT hàng nhập khẩu"));

            entity.HasIndex(e => e.RefId, "IX_CAPaymentDetailImportVAT_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.Amount)
                .HasComment("Số nộp quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TKĐỨ  thuế GTGT");
            entity.Property(e => e.DeductionDebitAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT khấu trừ");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số phải nộp quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainningAmount)
                .HasComment("Số còn phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TurnOverAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VoucherPostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("Lưu ID của chứng từ mua hàng nhập khẩu, nhằm đáp ứng nhu cầu nộp thuế cho từng dòng chi tiết")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ hàng nhập khẩu")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.VoucherRefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.VoucherRefType).HasComment("Loại chứng từ của hóa đơn gốc");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.CapaymentDetailImportVatCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.CapaymentDetailImportVatDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.DeductionDebitAccountNavigation).WithMany(p => p.CapaymentDetailImportVatDeductionDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DeductionDebitAccount);

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.CapaymentDetailImportVats)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_CAPaymentDetailImportVAT_InvestmentProject");

            entity.HasOne(d => d.Ref).WithMany(p => p.CapaymentDetailImportVats)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAPaymentDetailImportVAT_CAPayment");
        });

        modelBuilder.Entity<CapaymentDetailPersonalIncomeTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("CAPaymentDetailPersonalIncomeTax", tb => tb.HasComment("Chi tiết chi nộp thuế TNCN"));

            entity.HasIndex(e => e.RefId, "IX_CAPaymentDetailPersonalIncomeTax_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số nộp lần này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.CapaymentDetailPersonalIncomeTaxes)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPaymentDetailPersonalIncomeTax_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.CapaymentDetailPersonalIncomeTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAPaymentDetailPersonalIncomeTax_CAPayment");
        });

        modelBuilder.Entity<CapaymentDetailSalary>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("CAPaymentDetailSalary", tb => tb.HasComment("Chi tiết chi trả lương nhân viên"));

            entity.HasIndex(e => e.RefId, "IX_CAPaymentDetailSalary_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("ID đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số còn phải trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự dòng");

            entity.HasOne(d => d.Employee).WithMany(p => p.CapaymentDetailSalaries)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPaymentDetailSalary_AccountObject");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.CapaymentDetailSalaries)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CAPaymentDetailSalary_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.CapaymentDetailSalaries)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAPaymentDetailSalary_CAPayment");
        });

        modelBuilder.Entity<CapaymentDetailTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("CAPaymentDetailTax", tb => tb.HasComment("Bảng chi tiết tab thuế của chứng từ chi thông thường"));

            entity.HasIndex(e => e.RefId, "IX_CAPaymentDetailTax_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính của bảng Detail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Đối tượng");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Nhóm HHDV mua vào")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("Khóa chính của bảng Master")
                .HasColumnName("RefID");
            entity.Property(e => e.Sign).HasDefaultValueSql("((1))");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.TurnoverAmount)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("% Thuế GTGT")
                .HasColumnType("decimal(8, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.CapaymentDetailTaxes)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_CAPaymentDetailTax_AccountingObject");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.CapaymentDetailTaxes)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_CAPaymentDetailTax_InvestmentProject");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.CapaymentDetailTaxes)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_CAPaymentDetailTax_PurchasePurpose");

            entity.HasOne(d => d.Ref).WithMany(p => p.CapaymentDetailTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAPaymentDetailTax_CAPayment");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.CapaymentDetailTaxes)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount)
                .HasConstraintName("FK_CAPaymentDetailTax_Account");
        });

        modelBuilder.Entity<Careceipt>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("CAReceipt", tb =>
                {
                    tb.HasComment("Phiếu thu (master)");
                    tb.HasTrigger("trg_CAReceipt_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectId, "IX_CAReceipt_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_CAReceipt_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_CAReceipt_RefNo").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_CAReceipt_RefNoFinance");

            entity.HasIndex(e => e.RefType, "IX_CAReceipt_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người nộp");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng (Người nộp, khách hàng)")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người lập chứng từ");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày lập chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Kèm theo");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên (đại diện mua, bán hàng)")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỷ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GlvoucherRefId).HasColumnName("GLVoucherRefID");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải Lý do nộp");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa chứng từ lần cuối");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa chứng từ lần cuối")
                .HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReasonTypeId)
                .HasComment("Lý do thu")
                .HasColumnName("ReasonTypeID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày phiếu thu")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự chứng từ nhập vào database");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.CareceiptAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_CAReceipt_AccountingObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Careceipts).HasForeignKey(d => d.BranchId);

            entity.HasOne(d => d.Currency).WithMany(p => p.Careceipts)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_CAReceipt_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.CareceiptEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_CAReceipt_AccountObject_EmplyeeID");

            entity.HasOne(d => d.GlvoucherRef).WithMany(p => p.Careceipts)
                .HasForeignKey(d => d.GlvoucherRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_CAReceipt_GLVoucher");
        });

        modelBuilder.Entity<CareceiptDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("CAReceiptDetail", tb => tb.HasComment("Chi tiết phiếu thu"));

            entity.HasIndex(e => e.AccountObjectId, "IX_CAReceiptDetail_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.CreditAccount, "IX_CAReceiptDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_CAReceiptDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_CAReceiptDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_CAReceiptDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.DebtAgreementId)
                .HasComment("Khế ước vay")
                .HasColumnName("DebtAgreementID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí (dùng cho Thu tiền KH)")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("Hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_CAReceiptDetail_AccountingObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_CAReceiptDetail_BankAccount");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_CAReceiptDetail_BudgetItem");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.CareceiptDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_CAReceiptDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.CareceiptDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_CAReceiptDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_CAReceiptDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.CareceiptDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_CAReceiptDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.CareceiptDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_CAReceiptDetail_Account_Debit");

            entity.HasOne(d => d.DebtAgreement).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.DebtAgreementId)
                .HasConstraintName("FK_CAReceiptDetail_DebtAgreement");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_CAReceiptDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_CAReceiptDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_CAReceiptDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_CAReceiptDetail_LOANAgreement");

            entity.HasOne(d => d.Order).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_CAReceiptDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_CAReceiptDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_CAReceiptDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_CAReceiptDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_CAReceiptDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.CareceiptDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_CAReceiptDetail_CAReceipt");
        });

        modelBuilder.Entity<CareceiptPaymentList>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_CAReceiptPaymentList_RefID");

            entity.ToTable("CAReceiptPaymentList");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount).HasMaxLength(50);
            entity.Property(e => e.AccountObjectBankName).HasMaxLength(255);
            entity.Property(e => e.AccountObjectContactName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CabadocumentIncluded)
                .HasMaxLength(255)
                .HasColumnName("CABADocumentIncluded");
            entity.Property(e => e.CabajournalMemo)
                .HasMaxLength(500)
                .HasColumnName("CABAJournalMemo");
            entity.Property(e => e.CabapostedDate)
                .HasColumnType("datetime")
                .HasColumnName("CABAPostedDate");
            entity.Property(e => e.CabarefDate)
                .HasColumnType("datetime")
                .HasColumnName("CABARefDate");
            entity.Property(e => e.CabarefNoFinance)
                .HasMaxLength(20)
                .HasColumnName("CABARefNoFinance");
            entity.Property(e => e.CabarefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("CABARefNoManagement");
            entity.Property(e => e.CadocumentIncluded)
                .HasMaxLength(255)
                .HasColumnName("CADocumentIncluded");
            entity.Property(e => e.CajournalMemo)
                .HasMaxLength(500)
                .HasColumnName("CAJournalMemo");
            entity.Property(e => e.CapostedDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPostedDate");
            entity.Property(e => e.CarefDate)
                .HasColumnType("datetime")
                .HasColumnName("CARefDate");
            entity.Property(e => e.CarefNoFinance)
                .HasMaxLength(20)
                .HasColumnName("CARefNoFinance");
            entity.Property(e => e.CarefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("CARefNoManagement");
            entity.Property(e => e.CashBookPostedDate).HasColumnType("datetime");
            entity.Property(e => e.Catype).HasColumnName("CAType");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IdentificationNumber).HasMaxLength(20);
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.IsCreateFromEbhistory).HasColumnName("IsCreateFromEBHistory");
            entity.Property(e => e.IssueBy).HasMaxLength(120);
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListTableName).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OutDocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.PayReason).HasMaxLength(500);
            entity.Property(e => e.Payer).HasMaxLength(128);
            entity.Property(e => e.PayerAddress).HasMaxLength(255);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermId).HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId).HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.ReasonTypeId).HasColumnName("ReasonTypeID");
            entity.Property(e => e.Receiver).HasMaxLength(128);
            entity.Property(e => e.ReceiverAddress).HasMaxLength(255);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.SainvoiceRefId).HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName).HasMaxLength(400);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalCustomBeforeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalExportTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalExportTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalExportTaxAmountOC");
            entity.Property(e => e.TotalFreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalImportTaxAmountOC");
            entity.Property(e => e.TotalInwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalSpecialConsumeTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSpecialConsumeTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSpecialConsumeTaxAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
        });

        modelBuilder.Entity<CareerHightest>(entity =>
        {
            entity.HasKey(e => e.CareerHightestId).HasName("PK_CarrerHightest");

            entity.ToTable("CareerHightest");

            entity.Property(e => e.CareerHightestId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CareerHightestID");
            entity.Property(e => e.CareerHightestCode).HasMaxLength(10);
            entity.Property(e => e.CareerHightestName).HasMaxLength(255);
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
        });

        modelBuilder.Entity<Ccy>(entity =>
        {
            entity.HasKey(e => e.CurrencyId);

            entity.ToTable("CCY", tb => tb.HasComment("Danh mục loại tiền"));

            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Khóa chính của bảng")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.AfterDecimal)
                .HasMaxLength(20)
                .HasComment("Đọc số tiền sau phần thập phân (Tiếng Việt)");
            entity.Property(e => e.AfterDecimalDefault)
                .HasMaxLength(20)
                .HasComment("");
            entity.Property(e => e.AfterDecimalDefaultEng)
                .HasMaxLength(20)
                .HasComment("")
                .HasColumnName("AfterDecimalDefaultENG");
            entity.Property(e => e.AfterDecimalEng)
                .HasMaxLength(20)
                .HasComment("Đọc số tiền sau phần thập phân (Tiếng Anh)")
                .HasColumnName("AfterDecimalENG");
            entity.Property(e => e.Baaccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản tiền gửi ngầm định")
                .HasColumnName("BAAccount");
            entity.Property(e => e.Caaccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản tiền mặt ngầm định")
                .HasColumnName("CAAccount");
            entity.Property(e => e.Ccyname)
                .HasMaxLength(20)
                .HasComment("Đọc tên loại tiền (Tiếng Việt)")
                .HasColumnName("CCYName");
            entity.Property(e => e.CcynameDefault)
                .HasMaxLength(20)
                .HasComment("")
                .HasColumnName("CCYNameDefault");
            entity.Property(e => e.CcynameDefaultEng)
                .HasMaxLength(20)
                .HasComment("")
                .HasColumnName("CCYNameDefaultENG");
            entity.Property(e => e.CcynameEng)
                .HasMaxLength(20)
                .HasComment("Đọc tên loại tiền (Tiếng Anh)")
                .HasColumnName("CCYNameENG");
            entity.Property(e => e.ConvertRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ lệ chuyển đổi (Tiếng Việt)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ConvertRateDefault)
                .HasDefaultValueSql("((0))")
                .HasComment("")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ConvertRateDefaultEng)
                .HasDefaultValueSql("((0))")
                .HasComment("")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ConvertRateDefaultENG");
            entity.Property(e => e.ConvertRateEng)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ lệ chuyển đổi (Tiếng Anh)")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ConvertRateENG");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyName)
                .HasMaxLength(128)
                .HasComment("Tên loại tiền");
            entity.Property(e => e.DecimalSeperate)
                .HasMaxLength(20)
                .HasComment("Đọc phân cách phần thập phân (Tiếng Việt)");
            entity.Property(e => e.DecimalSeperateDefault)
                .HasMaxLength(20)
                .HasComment("");
            entity.Property(e => e.DecimalSeperateDefaultEng)
                .HasMaxLength(20)
                .HasComment("")
                .HasColumnName("DecimalSeperateDefaultENG");
            entity.Property(e => e.DecimalSeperateEng)
                .HasMaxLength(20)
                .HasComment("Đọc phân cách phần thập phân (Tiếng Anh)")
                .HasColumnName("DecimalSeperateENG");
            entity.Property(e => e.ExampleAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Ví dụ số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator).HasComment("Toán tử quy đổi 0=nhân;1=chia");
            entity.Property(e => e.Inactive)
                .HasDefaultValueSql("((0))")
                .HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Prefix)
                .HasMaxLength(20)
                .HasComment("Ký hiệu bắt đầu (Tiếng Việt)");
            entity.Property(e => e.PrefixDefault)
                .HasMaxLength(20)
                .HasComment("");
            entity.Property(e => e.PrefixDefaultEng)
                .HasMaxLength(20)
                .HasComment("")
                .HasColumnName("PrefixDefaultENG");
            entity.Property(e => e.PrefixEng)
                .HasMaxLength(20)
                .HasComment("Ký hiệu bắt đầu (Tiếng Anh)")
                .HasColumnName("PrefixENG");
            entity.Property(e => e.Subfix)
                .HasMaxLength(20)
                .HasComment("Ký hiệu kết thúc (Tiếng Việt)");
            entity.Property(e => e.SubfixDefault)
                .HasMaxLength(20)
                .HasComment("");
            entity.Property(e => e.SubfixDefaultEng)
                .HasMaxLength(20)
                .HasComment("")
                .HasColumnName("SubfixDefaultENG");
            entity.Property(e => e.SubfixEng)
                .HasMaxLength(20)
                .HasComment("Ký hiệu kết thúc (Tiếng Anh)")
                .HasColumnName("SubfixENG");
            entity.Property(e => e.UpdateMethod).HasDefaultValueSql("((1))");
            entity.Property(e => e.ValueOfMoney).HasComment("XML lưu danh sách các mệnh giá tiền để hiển thị khi kiểm kê quỹ");
        });

        modelBuilder.Entity<CcydetailExchangeRate>(entity =>
        {
            entity.HasKey(e => e.CcyexchangeRateId);

            entity.ToTable("CCYDetailExchangeRate");

            entity.Property(e => e.CcyexchangeRateId)
                .ValueGeneratedNever()
                .HasColumnName("CCYExchangeRateID");
            entity.Property(e => e.BuyingExchangeRateTransfer).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.SellingExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Currency).WithMany(p => p.CcydetailExchangeRates)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_CCYDetailExchangeRate_CCY");
        });

        modelBuilder.Entity<CertificateInfo>(entity =>
        {
            entity.ToTable("CertificateInfo");

            entity.Property(e => e.CertificateInfoId)
                .ValueGeneratedNever()
                .HasComment("key của bảng")
                .HasColumnName("CertificateInfoID");
            entity.Property(e => e.CertSerialNumber)
                .HasMaxLength(255)
                .HasComment("Số serial của chứng thư số");
            entity.Property(e => e.CheckTime)
                .HasComment("Thời gian kiểm tra, để cache")
                .HasColumnType("datetime");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế/CMND/CCCD của chứng thư số");
            entity.Property(e => e.Provider)
                .HasMaxLength(255)
                .HasComment("Tổ chức cung cấp chứng thư số");
            entity.Property(e => e.RevocationReason)
                .HasMaxLength(255)
                .HasComment("Lý do thu hồi chứng thư số");
            entity.Property(e => e.RevocationTime)
                .HasComment("Thời gian thu hồi chứng thư số")
                .HasColumnType("datetime");
            entity.Property(e => e.StatusCode).HasComment("Trạng thái chứng thư số");
            entity.Property(e => e.StatusDescription)
                .HasMaxLength(255)
                .HasComment("Mô tả chứng thư số");
        });

        modelBuilder.Entity<ChangeMobile>(entity =>
        {
            entity.HasKey(e => e.KeyId).HasName("PK_ChangeMobile_1");

            entity.ToTable("ChangeMobile", tb => tb.HasComment("Bảng lưu số điện thoại thay đổi khi chuyển đầu số"));

            entity.Property(e => e.KeyId).HasColumnName("KeyID");
            entity.Property(e => e.NewContactFixedTel).HasMaxLength(255);
            entity.Property(e => e.NewContactMobile).HasMaxLength(255);
            entity.Property(e => e.NewContactOfficeTel).HasMaxLength(255);
            entity.Property(e => e.NewEinvoiceContactMobile)
                .HasMaxLength(255)
                .HasColumnName("NewEInvoiceContactMobile");
            entity.Property(e => e.NewMobile).HasMaxLength(255);
            entity.Property(e => e.NewOtherContactMobile).HasMaxLength(255);
            entity.Property(e => e.NewTel).HasMaxLength(255);
            entity.Property(e => e.NotificationId)
                .HasMaxLength(255)
                .HasColumnName("NotificationID");
            entity.Property(e => e.ObjectId).HasColumnName("ObjectID");
            entity.Property(e => e.ObjectType).HasMaxLength(255);
            entity.Property(e => e.OldContactFixedTel).HasMaxLength(255);
            entity.Property(e => e.OldContactMobile).HasMaxLength(255);
            entity.Property(e => e.OldContactOfficeTel).HasMaxLength(255);
            entity.Property(e => e.OldEinvoiceContactMobile)
                .HasMaxLength(255)
                .HasColumnName("OldEInvoiceContactMobile");
            entity.Property(e => e.OldMobile).HasMaxLength(255);
            entity.Property(e => e.OldOtherContactMobile).HasMaxLength(255);
            entity.Property(e => e.OldTel).HasMaxLength(255);
        });

        modelBuilder.Entity<CheckLedgerResult>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CheckLedgerResult");

            entity.Property(e => e.InrefId).HasColumnName("INRefID");
            entity.Property(e => e.InrefNo)
                .HasMaxLength(20)
                .HasColumnName("INRefNo");
            entity.Property(e => e.InrefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("INRefNoManagement");
            entity.Property(e => e.InrefType).HasColumnName("INRefType");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.SarefId).HasColumnName("SARefID");
            entity.Property(e => e.SarefNo)
                .HasMaxLength(20)
                .HasColumnName("SARefNo");
            entity.Property(e => e.SarefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("SARefNoManagement");
        });

        modelBuilder.Entity<CheckShowLicenseLastest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CheckShowLicenseLastest");

            entity.Property(e => e.CheckShowLicenseLastestId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CheckShowLicenseLastestID");
            entity.Property(e => e.DatabaseId)
                .HasMaxLength(50)
                .HasColumnName("DatabaseID");
            entity.Property(e => e.LicenseNo).HasMaxLength(50);
        });

        modelBuilder.Entity<CompanySearch>(entity =>
        {
            entity.HasKey(e => e.CompanyTaxCode).HasName("PK__CompanyS__E4037EDB33690238");

            entity.ToTable("CompanySearch");

            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CompanyStatus).HasMaxLength(255);
            entity.Property(e => e.CompanyStatusTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<ComparisonReport>(entity =>
        {
            entity.HasKey(e => e.ReportId);

            entity.ToTable("ComparisonReport");

            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("ID báo cáo")
                .HasColumnName("ReportID");
            entity.Property(e => e.GroupId)
                .HasComment("ID của nhóm báo cáo")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupName).HasMaxLength(255);
            entity.Property(e => e.SortOrder).HasComment("Thứ tự hiển thị của các báo cáo trong nhóm");
        });

        modelBuilder.Entity<ConfigChangePostAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ConfigChangePostAccount");

            entity.Property(e => e.ColumnDescription).HasMaxLength(255);
            entity.Property(e => e.ColumnName).HasMaxLength(150);
            entity.Property(e => e.DateColumnName).HasMaxLength(150);
            entity.Property(e => e.MasterColumnName).HasMaxLength(150);
            entity.Property(e => e.MaterTableName).HasMaxLength(150);
            entity.Property(e => e.SourceColumnName).HasMaxLength(150);
            entity.Property(e => e.TableDescription).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(150);
        });

        modelBuilder.Entity<ConfigListCabaamount>(entity =>
        {
            entity.ToTable("ConfigListCABAAmount");

            entity.Property(e => e.ConfigListCabaamountId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigListCABAAmountID");
            entity.Property(e => e.Amount).HasMaxLength(255);
            entity.Property(e => e.AmountOc)
                .HasMaxLength(255)
                .HasColumnName("AmountOC");
            entity.Property(e => e.CreditAccount).HasMaxLength(50);
            entity.Property(e => e.DebitAccount).HasMaxLength(50);
            entity.Property(e => e.DetailCondition).HasMaxLength(255);
            entity.Property(e => e.DetailTableName).HasMaxLength(50);
            entity.Property(e => e.MasterCondition).HasMaxLength(255);
            entity.Property(e => e.MasterTableName).HasMaxLength(50);
        });

        modelBuilder.Entity<ConfigListTable>(entity =>
        {
            entity.ToTable("ConfigListTable");

            entity.Property(e => e.ConfigListTableId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("ConfigListTableID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.GeneralTableName)
                .HasMaxLength(100)
                .HasComment("Tên bảng chung");
            entity.Property(e => e.ListCode)
                .HasMaxLength(255)
                .HasComment("Mã để phân biệt các danh sách khác nhau cần sử dụng tính năng này");
            entity.Property(e => e.ListTableName)
                .HasMaxLength(100)
                .HasComment("Tên bảng danh sách");
        });

        modelBuilder.Entity<ConfigListTableUpdateRule>(entity =>
        {
            entity.ToTable("ConfigListTableUpdateRule");

            entity.Property(e => e.ConfigListTableUpdateRuleId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("ConfigListTableUpdateRuleID");
            entity.Property(e => e.Condition).HasMaxLength(500);
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.GeneralColumnName)
                .HasMaxLength(100)
                .HasComment("Tên cột chính");
            entity.Property(e => e.GeneralTableName)
                .HasMaxLength(100)
                .HasComment("Tên bảng chung");
            entity.Property(e => e.ListColumnName)
                .HasMaxLength(100)
                .HasComment("Tên cột sẽ được cập nhật");
        });

        modelBuilder.Entity<ConfigTabVisibleByUser>(entity =>
        {
            entity.HasKey(e => e.ConfigTabId).HasName("PK_ListTabHiddenByUser");

            entity.ToTable("ConfigTabVisibleByUser");

            entity.Property(e => e.ConfigTabId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigTabID");
            entity.Property(e => e.ParentSubSystemCode)
                .HasMaxLength(100)
                .HasComment("Phân hệ của tab được cấu hình");
            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(100)
                .HasComment("Mã tab được cấu hình");
            entity.Property(e => e.UserId)
                .HasComment("ID của người dùng")
                .HasColumnName("UserID");
            entity.Property(e => e.Visible)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Trạng thái ẩn hiển");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.ToTable("Contract", tb =>
                {
                    tb.HasComment("Bảng hợp đồng");
                    tb.HasTrigger("Trg_UpdateProjectAmount");
                });

            entity.HasIndex(e => e.ContractCode, "IX_Contract_ContractNo").HasFillFactor(90);

            entity.HasIndex(e => e.AccountObjectId, "IX_Contract_CustomerID").HasFillFactor(90);

            entity.Property(e => e.ContractId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ContractID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ khách hàng");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người liên hệ của khách hàng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID  là khách hàng (cá nhân hay tổ chức) trong hợp đồng bán")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccumCostAmountFinance)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumCostAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumOtherAmountFinance)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumOtherAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumSaleAmountFinance)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumSaleAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BalanceExpenseAmountFinance)
                .HasComment("Số còn phải chi=Dự kiến chi-thực chi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BalanceExpenseAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BalanceReceiptAmountFinance)
                .HasComment("Số còn phải thu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BalanceReceiptAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CloseAmount)
                .HasComment("Giá trị thanh lý Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CloseAmountOc)
                .HasComment("Giá trị thanh lý")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CloseAmountOC");
            entity.Property(e => e.CloseDate)
                .HasComment("Ngày thanh lý/Hủy bỏ")
                .HasColumnType("datetime");
            entity.Property(e => e.CloseReason)
                .HasMaxLength(255)
                .HasComment("Lý do thanh lý, hủy bỏ");
            entity.Property(e => e.CompleteDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.ContractAmount)
                .HasComment("Giá trị hợp đồng/dự án Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractAmountOc)
                .HasComment("Giá trị hợp đồng/dự án")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ContractAmountOC");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Số hợp đồng bán/mua");
            entity.Property(e => e.ContractStatusId)
                .HasDefaultValueSql("((0))")
                .HasComment("Tình trạng hợp đồng bán/mua")
                .HasColumnName("ContractStatusID");
            entity.Property(e => e.ContractSubject)
                .HasMaxLength(255)
                .HasComment("Trích yếu hợp đồng bán/mua");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DeliveryDate)
                .HasComment("Hạn giao hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.EmployeeId)
                .HasComment("Người thực hiện")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpenseAmountFinance)
                .HasComment("Số đã chi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpenseAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvoiceAmountFinance)
                .HasComment("Giá trị đã xuất hóa đơn Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvoiceAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvoiceAmountOcfinance)
                .HasComment("Giá trị đã xuất hóa đơn")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("InvoiceAmountOCFinance");
            entity.Property(e => e.InvoiceAmountOcmanagement)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("InvoiceAmountOCManagement");
            entity.Property(e => e.IsArisedBeforeUseSoftware).HasComment("Là hợp đồng phát sinh trước khi sử dụng phần mềm");
            entity.Property(e => e.IsCalculatedCost).HasComment("Check tính giá thành");
            entity.Property(e => e.IsInvoiced).HasComment("Đã xuất hóa đơn");
            entity.Property(e => e.IsParent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProject).HasComment("True: Là dự án; Flase: Là hợp đồng");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa cuối");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa cuối")
                .HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị thực hiện")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OtherTerms)
                .HasMaxLength(255)
                .HasComment("Điều khoản khác");
            entity.Property(e => e.PaymentDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ProfitAndLossExpectAmountFinance)
                .HasComment("Dự kiến lãi lỗ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ProfitAndLossExpectAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ProjectId)
                .HasComment("Cho biết Hợp đồng thuộc dự án nào")
                .HasColumnName("ProjectID");
            entity.Property(e => e.ReceiptAmountFinance)
                .HasComment("Số đã thu Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiptAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiptAmountOcfinance)
                .HasComment("Số đã thu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiptAmountOCFinance");
            entity.Property(e => e.ReceiptAmountOcmanagement)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiptAmountOCManagement");
            entity.Property(e => e.RefType)
                .HasDefaultValueSql("((9041))")
                .HasComment("Loai chung tu");
            entity.Property(e => e.RevenueDate)
                .HasComment("Ngày ghi nhận doanh số")
                .HasColumnType("datetime");
            entity.Property(e => e.RevenueStatus)
                .HasDefaultValueSql("((0))")
                .HasComment("Tình trạng ghi nhận doanh số. 0=Chưa ghi doanh số: 1=Đã ghi doanh số");
            entity.Property(e => e.SaorderId).HasColumnName("SAOrderID");
            entity.Property(e => e.SignDate)
                .HasComment("Ngày ký (*)")
                .HasColumnType("datetime");
            entity.Property(e => e.TotalExpenseExpectAmount)
                .HasComment("Dự kiến chi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalExpensedAmount)
                .HasComment("Thực chi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalInvoiceAmountFinance)
                .HasComment("Tổng giá trị đã xuất hóa đơn Sổ Tài Chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalInvoiceAmountManagement)
                .HasComment("Tổng giá trị đã xuất hóa đơn Sổ Quản Trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalInvoiceAmountOcfinance)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalInvoiceAmountOCFinance");
            entity.Property(e => e.TotalInvoiceAmountOcmanagement)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalInvoiceAmountOCManagement");
            entity.Property(e => e.TotalReceiptedAmount)
                .HasComment("Thực thu")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.ContractAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_Contract_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.ContractBranches)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_Contract_OrganizationUnit");

            entity.HasOne(d => d.Employee).WithMany(p => p.ContractEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.ContractOrganizationUnits)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_Contract_OrganizationUnit1");

            entity.HasOne(d => d.Saorder).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.SaorderId)
                .HasConstraintName("FK_Contract_SAOrder");
        });

        modelBuilder.Entity<ContractAttachment>(entity =>
        {
            entity.HasKey(e => e.AttachmentId);

            entity.ToTable("ContractAttachment");

            entity.HasIndex(e => e.ContractId, "IX_ContractAttachment_ContractID").HasFillFactor(90);

            entity.Property(e => e.AttachmentId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("AttachmentID");
            entity.Property(e => e.ContractId)
                .HasComment("FK")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.FileExtension)
                .HasMaxLength(25)
                .HasComment("Đuôi tệp");
            entity.Property(e => e.FileLink).HasComment("Đường dẫn file");
            entity.Property(e => e.FileMimetype)
                .HasMaxLength(100)
                .HasComment("Kiểu tệp")
                .HasColumnName("FileMIMEType");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasComment("Tên tệp");
            entity.Property(e => e.FileSize).HasComment("Độ lớn( <3 MB)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractAttachments)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractAttachment_Contract");
        });

        modelBuilder.Entity<ContractAttachmentFile>(entity =>
        {
            entity.HasKey(e => e.AttachmentId).HasName("PK_AttachmentFile");

            entity.ToTable("ContractAttachmentFile");

            entity.Property(e => e.AttachmentId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("AttachmentID");
            entity.Property(e => e.AttachmentContent).HasComment("Nội dung file");

            entity.HasOne(d => d.Attachment).WithOne(p => p.ContractAttachmentFile)
                .HasForeignKey<ContractAttachmentFile>(d => d.AttachmentId)
                .HasConstraintName("FK_ContractAttachmentFile_ContractAttachment");
        });

        modelBuilder.Entity<ContractDetailContact>(entity =>
        {
            entity.HasKey(e => e.ContractDetailId);

            entity.ToTable("ContractDetailContact", tb => tb.HasComment("Liên hệ (Chi tiết của hợp đồng)"));

            entity.Property(e => e.ContractDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ContractDetailID");
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .HasComment("Email");
            entity.Property(e => e.ContactMobile)
                .HasMaxLength(50)
                .HasComment("ĐT di động");
            entity.Property(e => e.ContactName)
                .HasMaxLength(400)
                .HasComment("Họ và tên");
            entity.Property(e => e.ContactOfficeTel)
                .HasMaxLength(50)
                .HasComment("ĐT cơ quan");
            entity.Property(e => e.ContactRole)
                .HasMaxLength(128)
                .HasComment("Vai trò");
            entity.Property(e => e.ContactTitle)
                .HasMaxLength(128)
                .HasComment("Chức vụ");
            entity.Property(e => e.ContractId)
                .HasComment("FK")
                .HasColumnName("ContractID");
            entity.Property(e => e.OtherContactMobile)
                .HasMaxLength(50)
                .HasComment("ĐT di động khác");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp dòng");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractDetailContacts)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractDetailContact_Contract");
        });

        modelBuilder.Entity<ContractDetailExpense>(entity =>
        {
            entity.HasKey(e => e.ContractDetailId);

            entity.ToTable("ContractDetailExpense", tb => tb.HasComment("Dự kiến chi (Chi tiết hợp đồng bán)"));

            entity.Property(e => e.ContractDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ContractDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("FK")
                .HasColumnName("ContractID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseDate)
                .HasComment("Ngày dự kiến chi")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("FK: Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Rate)
                .HasComment("Tỷ lệ %")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp dòng");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractDetailExpenses)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractDetailExpense_Contract");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.ContractDetailExpenses)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_ContractDetailExpense_ExpenseItem");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.ContractDetailExpenses)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_ContractDetailExpense_OrganizationUnit");
        });

        modelBuilder.Entity<ContractDetailInventoryItem>(entity =>
        {
            entity.HasKey(e => e.ContractDetailId).HasName("PK_ContractInventoryItem");

            entity.ToTable("ContractDetailInventoryItem");

            entity.HasIndex(e => e.ContractId, "IX_ContractInventoryItem_ContractID").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_ContractInventoryItem_InventoryItemID").HasFillFactor(90);

            entity.Property(e => e.ContractDetailId)
                .ValueGeneratedNever()
                .HasColumnName("ContractDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityDeliveredIn)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredIN");
            entity.Property(e => e.QuantityDeliveredInlastYear)
                .HasComment("Số đã giao năm trước (Tính theo Bán hàng)")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredINLastYear");
            entity.Property(e => e.QuantityDeliveredSa)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredSA");
            entity.Property(e => e.QuantityDeliveredSalastYear)
                .HasComment("Số đã giao năm trước (Tính theo Phiếu xuất)")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredSALastYear");
            entity.Property(e => e.SaorderId).HasColumnName("SAOrderID");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractDetailInventoryItems)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractInventoryItem_Contract");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.ContractDetailInventoryItems)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractInventoryItem_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.ContractDetailInventoryItemMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Unit).WithMany(p => p.ContractDetailInventoryItemUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_ContractDetailInventoryItem_Unit");
        });

        modelBuilder.Entity<ContractDetailPayment>(entity =>
        {
            entity.HasKey(e => e.ContractDetailId);

            entity.ToTable("ContractDetailPayment");

            entity.Property(e => e.ContractDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("FK")
                .HasColumnName("ContractID");
            entity.Property(e => e.PaymentAmount)
                .HasComment("Giá trị thanh toán quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentAmountOc)
                .HasComment("Giá trị thanh toán")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PaymentAmountOC");
            entity.Property(e => e.PaymentDate)
                .HasComment("Ngày thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentInstallment)
                .HasMaxLength(255)
                .HasComment("Đợt thanh toán");
            entity.Property(e => e.PaymentRate)
                .HasComment("Tỷ lệ thanh toán")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentTerm)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReceiveAmount)
                .HasComment("Số đã thu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiveAmountOc)
                .HasComment("Số đã thu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiveAmountOC");
            entity.Property(e => e.ReceiveLastYearAmount)
                .HasComment("Số đã thu năm trước quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiveLastYearAmountOc)
                .HasComment("Số đã thu năm trước")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiveLastYearAmountOC");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp dòng");
            entity.Property(e => e.StillOweAmount)
                .HasComment("Số còn phải thu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.StillOweAmountOc)
                .HasComment("Số còn phải thu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("StillOweAmountOC");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractDetailPayments)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractDetailPayment_Contract");
        });

        modelBuilder.Entity<ContractDetailPaymentReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("ContractDetailPaymentReference");

            entity.Property(e => e.ReferenceId)
                .ValueGeneratedNever()
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.ContractDetailPaymentReferences)
                .HasForeignKey(d => d.ContractDetailId)
                .HasConstraintName("FK_ContractDetailPaymentReference_ContractDetailPayment");
        });

        modelBuilder.Entity<ContractDetailRevenue>(entity =>
        {
            entity.HasKey(e => e.ContractDetailId);

            entity.ToTable("ContractDetailRevenue");

            entity.Property(e => e.ContractDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ContractDetailID");
            entity.Property(e => e.CancelRevenueAmount)
                .HasComment("Doanh số hủy bỏ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CancelRevenueDate)
                .HasComment("Ngày hủy doanh số")
                .HasColumnType("datetime");
            entity.Property(e => e.ContractId)
                .HasComment("FK")
                .HasColumnName("ContractID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Hàng hóa")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Rate)
                .HasComment("Tỷ lệ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RevenueAmount)
                .HasComment("Doanh số ghi nhận")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RevenueType).HasComment("Loại. 0=Đề nghị ghi doanh số; 1=Doanh số ghi nhận; 2=Doanh số hủy bỏ");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Thứ tự dòng");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractDetailRevenues)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractDetailRevenue_Contract");

            entity.HasOne(d => d.Employee).WithMany(p => p.ContractDetailRevenues)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_ContractDetailRevenue_AccountObject");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.ContractDetailRevenues)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_ContractDetailRevenue_InventoryItem");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.ContractDetailRevenues)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_ContractDetailRevenue_OrganizationUnit");
        });

        modelBuilder.Entity<ContractStatus>(entity =>
        {
            entity.ToTable("ContractStatus");

            entity.Property(e => e.ContractStatusId)
                .ValueGeneratedNever()
                .HasComment("Tình trạng hợp đồng. 0: chưa thực hiện, 1:đang thực hiện, 2: đã thanh lý, 3: đã hủy bỏ")
                .HasColumnName("ContractStatusID");
            entity.Property(e => e.ContractStatusName)
                .HasMaxLength(255)
                .HasComment("Tên Tình trạng Hợp đồng");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Inactive).HasComment("Ngừng sử dụng");
            entity.Property(e => e.IsSystem).HasComment("Là danh mục hệ thống");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");
        });

        modelBuilder.Entity<CustomFieldLedger>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CustomFieldLedger");

            entity.HasIndex(e => new { e.RefDetailId, e.IsPostToManagementBook }, "IX_CustomFieldLedger")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_CustomFieldLedger_RefID").HasFillFactor(90);

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.CustomFieldLegerId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CustomFieldLegerID");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.MasterCustomField1).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField10).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField2).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField3).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField4).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField5).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField6).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField7).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField8).HasMaxLength(255);
            entity.Property(e => e.MasterCustomField9).HasMaxLength(255);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
        });

        modelBuilder.Entity<CustomerProfileDatum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CertExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.SignSupplier).HasMaxLength(255);
        });

        modelBuilder.Entity<CustomerProfileSyncTime>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CustomerProfileSyncTime");

            entity.Property(e => e.LastDaySyncTime).HasColumnType("datetime");
            entity.Property(e => e.LastMonthSyncTime).HasColumnType("datetime");
            entity.Property(e => e.LastQuaterSyncTime).HasColumnType("datetime");
            entity.Property(e => e.LastYearSyncTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<DataColumnDictionary>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DataColumnDictionary");

            entity.Property(e => e.ColumnId)
                .HasMaxLength(150)
                .HasColumnName("ColumnID");
            entity.Property(e => e.TableName).HasMaxLength(150);
        });

        modelBuilder.Entity<DataTableDictionary>(entity =>
        {
            entity.HasKey(e => e.TableName);

            entity.ToTable("DataTableDictionary");

            entity.Property(e => e.TableName)
                .HasMaxLength(255)
                .HasComment("Tên bàng");
            entity.Property(e => e.CodeOrNoColumnName)
                .HasMaxLength(255)
                .HasComment("Cột số hoặc mã");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(255)
                .HasComment("Tên cột PK trên bảng Detail");
            entity.Property(e => e.DateColumnName)
                .HasMaxLength(255)
                .HasComment("Tên cột ngày tháng để phục vụ việc lọc khi update tài khoản");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải của bảng");
            entity.Property(e => e.DisplayOnBookColumn).HasMaxLength(255);
            entity.Property(e => e.MasterColumnName)
                .HasMaxLength(255)
                .HasComment("Tên cột PK trên bảng master");
            entity.Property(e => e.MaterTableName)
                .HasMaxLength(255)
                .HasComment("Tên bảng Master (nếu có)");
            entity.Property(e => e.RefTypeColumn)
                .HasMaxLength(255)
                .HasComment("Tên cột RefType");
            entity.Property(e => e.TableType).HasComment("Loại bảng: 0 - chứng từ; 1- Danh mục; 2- Công thức; 3 - khác");
        });

        modelBuilder.Entity<DboptionExtend>(entity =>
        {
            entity.HasKey(e => e.OptionExtendId);

            entity.ToTable("DBOptionExtend");

            entity.Property(e => e.OptionExtendId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OptionExtendID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OptionId)
                .HasMaxLength(50)
                .HasColumnName("OptionID");
        });

        modelBuilder.Entity<DbphysicalError>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DBPhysical_Error");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.MessageText).IsUnicode(false);
            entity.Property(e => e.ObjectId).HasColumnName("ObjectID");
            entity.Property(e => e.RefDbId).HasColumnName("RefDbID");
            entity.Property(e => e.RepairLevel).HasMaxLength(255);
        });

        modelBuilder.Entity<DeadlockInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeadlockInvoice");

            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(25);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Receiver).HasMaxLength(128);
            entity.Property(e => e.ReceiverEmail).HasMaxLength(128);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(42)
                .IsUnicode(false)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<DebtAgreement>(entity =>
        {
            entity.ToTable("DebtAgreement", tb => tb.HasComment("Danh mục khế ước vay"));

            entity.Property(e => e.DebtAgreementId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("DebtAgreementID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng cho vay")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AgreementDate)
                .HasComment("Ngày khế ước")
                .HasColumnType("datetime");
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền")
                .HasColumnType("money");
            entity.Property(e => e.BankId)
                .HasComment("Ngân hàng cho vay")
                .HasColumnName("BankID");
            entity.Property(e => e.CurrencyId)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebtAgreementCode)
                .HasMaxLength(20)
                .HasComment("Số khế ước");
            entity.Property(e => e.DebtDate)
                .HasComment("Ngày nhận nợ")
                .HasColumnType("datetime");
            entity.Property(e => e.DebtPeriod)
                .HasDefaultValueSql("((0))")
                .HasComment("Thời hạn vay (tháng)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DueDate)
                .HasComment("Ngày đáo hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.Inactive)
                .HasDefaultValueSql("((0))")
                .HasComment("Ngừng theo dõi");
            entity.Property(e => e.Interest)
                .HasDefaultValueSql("((0))")
                .HasComment("Lãi suất")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Bộ phận thực hiện")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OverdueInterest)
                .HasDefaultValueSql("((0))")
                .HasComment("Lãi suất quá hạn")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PaymentCycle)
                .HasDefaultValueSql("((0))")
                .HasComment("Chu kỳ thanh toán (Tháng/lần)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentTimes)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lần thanh toán");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.DebtAgreements)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_DebtAgreement_AccountObject");

            entity.HasOne(d => d.Bank).WithMany(p => p.DebtAgreements)
                .HasForeignKey(d => d.BankId)
                .HasConstraintName("FK_DebtAgreement_Bank");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.DebtAgreements)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_DebtAgreement_OrganizationUnit");
        });

        modelBuilder.Entity<DebtList>(entity =>
        {
            entity.HasKey(e => e.DebtListId).HasName("PK_Dept");

            entity.ToTable("DebtList", tb => tb.HasComment("Danh sách đợt thu nợ"));

            entity.Property(e => e.DebtListId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("DebtListID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DebtListName)
                .HasMaxLength(255)
                .HasComment("Tên đợt thu nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.TargetAmount)
                .HasComment("Mục tiêu thu được (Số tiền)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TargetPercent)
                .HasComment("Mục tiêu thu được (%)")
                .HasColumnType("decimal(8, 4)");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.TotalReceiptableAmount)
                .HasComment("Tổng công nợ")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.DebtLists)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dept_OrganizationUnit");
        });

        modelBuilder.Entity<DebtListDetail>(entity =>
        {
            entity.HasKey(e => e.DebtListDetailId).HasName("PK_DeptListDetail");

            entity.ToTable("DebtListDetail", tb => tb.HasComment("Chi tiết đợt thu nợ"));

            entity.Property(e => e.DebtListDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("DebtListDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Khách hàng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.DebtListId)
                .HasComment("FK")
                .HasColumnName("DebtListID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.PaymentDate)
                .HasComment("Ngày hẹn trả")
                .HasColumnType("datetime");
            entity.Property(e => e.ResultDebt)
                .HasMaxLength(255)
                .HasComment("Kết quả thu nợ");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.DebtListDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DeptListDetail_AccountObject");

            entity.HasOne(d => d.DebtList).WithMany(p => p.DebtListDetails)
                .HasForeignKey(d => d.DebtListId)
                .HasConstraintName("FK_DebtListDetail_DebtList");
        });

        modelBuilder.Entity<DebtListDetailVoucher>(entity =>
        {
            entity.ToTable("DebtListDetailVoucher");

            entity.Property(e => e.DebtListDetailVoucherId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DebtListDetailVoucherID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.DebtStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.RefId).HasColumnName("RefID");
        });

        modelBuilder.Entity<DebtPeriod>(entity =>
        {
            entity.ToTable("DebtPeriod");

            entity.Property(e => e.DebtPeriodId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DebtPeriodID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DebtPeriodName).HasMaxLength(255);
            entity.Property(e => e.DebtPeriodType).HasComment("0: Trước hạn; 1 quá hạn");
            entity.Property(e => e.FromDay).HasComment("Từ ngày");
            entity.Property(e => e.IsReadOnly)
                .HasDefaultValueSql("((0))")
                .HasComment("True: Item không cho sửa, xóa");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportCaption).HasMaxLength(100);
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<Declaration03Dleinvoice>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("Declaration03DLEInvoice");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AgencyTaxCode).HasMaxLength(50);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeclarationName).HasMaxLength(255);
            entity.Property(e => e.DeclarationNum).HasMaxLength(10);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PayerTaxCode).HasMaxLength(50);
            entity.Property(e => e.PeriodName).HasMaxLength(255);
            entity.Property(e => e.SignPlace).HasMaxLength(255);
            entity.Property(e => e.Signer).HasMaxLength(128);
            entity.Property(e => e.TaxAgencyName).HasMaxLength(255);
            entity.Property(e => e.TaxPayer).HasMaxLength(255);
            entity.Property(e => e.TotalRevenueAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
        });

        modelBuilder.Entity<Declaration03DleinvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("Declaration03DLEInvoiceDetail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Buyer).HasMaxLength(400);
            entity.Property(e => e.BuyerTaxCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.GroupCode).HasMaxLength(15);
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvoiceTypeName).HasMaxLength(255);
            entity.Property(e => e.LineOrderNo).HasMaxLength(5);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RevenueAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vatamount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.Declaration03DleinvoiceDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Declaration03DLEInvoiceDetail_Declaration03DLEInvoice");
        });

        modelBuilder.Entity<DictionaryMobile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DictionaryMobile");

            entity.Property(e => e.TableName).HasMaxLength(150);
        });

        modelBuilder.Entity<DocumentManager>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PK_Document");

            entity.ToTable("DocumentManager");

            entity.Property(e => e.DocumentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DocumentID");
            entity.Property(e => e.Author).HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentName).HasMaxLength(255);
            entity.Property(e => e.FileExtension).HasMaxLength(25);
            entity.Property(e => e.FileIconType)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.FolderId).HasColumnName("FolderID");
            entity.Property(e => e.InternalUseOnly).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsFolder).HasDefaultValueSql("((0))");
            entity.Property(e => e.Keywords).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Path).HasMaxLength(255);
        });

        modelBuilder.Entity<EbbankBranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EBBankBranch");

            entity.Property(e => e.BankCode).HasMaxLength(20);
            entity.Property(e => e.BankNo).HasMaxLength(20);
            entity.Property(e => e.BranchNo).HasMaxLength(20);
            entity.Property(e => e.FullName).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ShortName).HasMaxLength(255);
        });

        modelBuilder.Entity<EbbankReference>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EBBankReference");

            entity.Property(e => e.BankCode).HasMaxLength(20);
            entity.Property(e => e.BankNo).HasMaxLength(20);
            entity.Property(e => e.BankType).HasMaxLength(10);
            entity.Property(e => e.FullName).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ShortName).HasMaxLength(255);
        });

        modelBuilder.Entity<EbbeneficiaryAccount>(entity =>
        {
            entity.HasKey(e => e.AccountId);

            entity.ToTable("EBBeneficiaryAccount");

            entity.Property(e => e.AccountId)
                .ValueGeneratedNever()
                .HasComment("ID tài khoản")
                .HasColumnName("AccountID");
            entity.Property(e => e.AccountName)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasComment("Tên chủ khoản thụ hưởng");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .HasDefaultValueSql("('')")
                .HasComment("Số tài khoản thụ hưởng");
            entity.Property(e => e.BankNo)
                .HasMaxLength(10)
                .HasDefaultValueSql("('')")
                .HasComment("Mã số ngân hàng thụ hưởng");
            entity.Property(e => e.BranchNo)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasComment("Mã số chi nhánh ngân hàng thụ hưởng");
            entity.Property(e => e.EbankCode)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasComment("Mã ngân hàng kết nối")
                .HasColumnName("EBankCode");
        });

        modelBuilder.Entity<EbhistoryTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK_BAReconcileBankStatements");

            entity.ToTable("EBHistoryTransaction", tb => tb.HasComment("Bảng lưu trữ Liệt kê lịch sử giao dịch"));

            entity.Property(e => e.TransactionId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("TransactionID");
            entity.Property(e => e.BankAccountId)
                .HasComment("TK ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BeneficiaryAcctBank)
                .HasMaxLength(255)
                .HasComment("NH thụ hưởng/NH chuyển");
            entity.Property(e => e.BeneficiaryAcctName)
                .HasMaxLength(255)
                .HasComment("Người thụ hưởng/Người chuyển");
            entity.Property(e => e.BeneficiaryAcctNo)
                .HasMaxLength(255)
                .HasComment("TK thụ hưởng/TK chuyển");
            entity.Property(e => e.CreditAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền Chi/ghi có")
                .HasColumnType("money");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(50)
                .HasComment("Loại tiền");
            entity.Property(e => e.Dcsign)
                .HasMaxLength(255)
                .HasComment("Dùng để đánh dấu là thu tiền hay chi tiền")
                .HasColumnName("DCSign");
            entity.Property(e => e.DebitAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền Thu/ghi nợ")
                .HasColumnType("money");
            entity.Property(e => e.EbroleId).HasColumnName("EBRoleID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ giá")
                .HasColumnType("money");
            entity.Property(e => e.FeeAccountNo)
                .HasMaxLength(255)
                .HasComment("Tài khoản thu phí");
            entity.Property(e => e.PreBalanceAmount)
                .HasComment("Số tiền còn lại")
                .HasColumnType("money");
            entity.Property(e => e.Remark)
                .HasMaxLength(255)
                .HasDefaultValueSql("((0))")
                .HasComment("Nội dung giao dịch");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự giao dịch");
            entity.Property(e => e.TranKey).HasMaxLength(500);
            entity.Property(e => e.TranSerial)
                .HasMaxLength(300)
                .HasComment("Số giao dịch");
            entity.Property(e => e.TranTime)
                .HasComment("Ngày giờ giao dịch")
                .HasColumnType("datetime");
            entity.Property(e => e.TransRefNo)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TransferType)
                .HasMaxLength(255)
                .HasComment("Mã loại giao dịch");
            entity.Property(e => e.TransferTypeName)
                .HasMaxLength(255)
                .HasComment("Tên loại giao dịch");
        });

        modelBuilder.Entity<EbhistoryTransactionSession>(entity =>
        {
            entity.HasKey(e => new { e.SessionKey, e.TransactionId });

            entity.ToTable("EBHistoryTransactionSession");

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BeneficiaryAcctBank).HasMaxLength(255);
            entity.Property(e => e.BeneficiaryAcctName).HasMaxLength(255);
            entity.Property(e => e.BeneficiaryAcctNo).HasMaxLength(255);
            entity.Property(e => e.CreditAmount).HasColumnType("money");
            entity.Property(e => e.CurrencyCode).HasMaxLength(50);
            entity.Property(e => e.Dcsign)
                .HasMaxLength(255)
                .HasColumnName("DCSign");
            entity.Property(e => e.DebitAmount).HasColumnType("money");
            entity.Property(e => e.EbroleId).HasColumnName("EBRoleID");
            entity.Property(e => e.ExchangeRate).HasColumnType("money");
            entity.Property(e => e.Remark).HasMaxLength(255);
            entity.Property(e => e.TranSerial).HasMaxLength(300);
            entity.Property(e => e.TranTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<Ebreconciliation>(entity =>
        {
            entity.HasKey(e => e.ReconciliationId);

            entity.ToTable("EBReconciliation", tb => tb.HasComment("Bảng xác nhận đối chiếu ngân hàng"));

            entity.Property(e => e.ReconciliationId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReconciliationID");
            entity.Property(e => e.BankAccountId)
                .HasComment("TK ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DisplayOnBook).HasComment("Hiển thị theo sổ");
            entity.Property(e => e.Todate)
                .HasComment("Từ ngày của ngày xác nhận đối chiếu")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Ebrole>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EBRole");

            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AndOrValue).HasMaxLength(25);
            entity.Property(e => e.ApplyDate).HasColumnType("datetime");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.Batype)
                .HasMaxLength(50)
                .HasColumnName("BAType");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreatedAtBranchId).HasColumnName("CreatedAtBranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EbroleId).HasColumnName("EBRoleID");
            entity.Property(e => e.EbroleName)
                .HasMaxLength(400)
                .HasColumnName("EBRoleName");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.FromBankAccountId).HasColumnName("FromBankAccountID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.JournalMemo).HasMaxLength(255);
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuorderId).HasColumnName("PUOrderID");
            entity.Property(e => e.ReasonTypeId).HasColumnName("ReasonTypeID");
            entity.Property(e => e.SaorderId).HasColumnName("SAOrderID");
            entity.Property(e => e.ToBankAccountId).HasColumnName("ToBankAccountID");
            entity.Property(e => e.VoucherType).HasMaxLength(50);
        });

        modelBuilder.Entity<EbtransactionReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("EBTransactionReference");

            entity.Property(e => e.ReferenceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReferenceID");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

            entity.HasOne(d => d.Transaction).WithMany(p => p.EbtransactionReferences)
                .HasForeignKey(d => d.TransactionId)
                .HasConstraintName("FK_EBTransactionReference_BAReconcileBankStatements");
        });

        modelBuilder.Entity<EbtransferInfo>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("EBTransferInfo");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền chuyển")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CifNo).HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Nội dung chuyển tiền");
            entity.Property(e => e.FeeAmount)
                .HasComment("Phí chuyển tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FeeType)
                .HasDefaultValueSql("((0))")
                .HasComment("Đối tượng chịu phí: 0 - Đơn vị chuyển tiền, 1 - Đơn vị thụ hưởng");
            entity.Property(e => e.FromBankAccountId)
                .HasComment("ID tài khoản chuyển tiền")
                .HasColumnName("FromBankAccountID");
            entity.Property(e => e.FromBankAccountName)
                .HasMaxLength(255)
                .HasComment("Tên chủ tài khoản chuyển tiền");
            entity.Property(e => e.FromBankAccountNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản chuyển tiền");
            entity.Property(e => e.FromBankCode)
                .HasMaxLength(20)
                .HasComment("Mã ngân hàng của tài khoản chuyển tiền");
            entity.Property(e => e.FromBankName)
                .HasMaxLength(255)
                .HasComment("Tên ngân hàng tài khoản chuyển tiền");
            entity.Property(e => e.FromBranchName)
                .HasMaxLength(255)
                .HasComment("Chi nhánh ngân hàng của tài khoản chuyển tiền");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OriginalRefId).HasColumnName("OriginalRefID");
            entity.Property(e => e.ReasonReject)
                .HasMaxLength(255)
                .HasComment("Lý do kế toán trưởng từ chối duyệt lệnh chuyển tiền");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày tạo lệnh chuyển tiền")
                .HasColumnType("datetime");
            entity.Property(e => e.ToBankAccountName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Tên chủ khoản nhận tiền");
            entity.Property(e => e.ToBankAccountNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản ngân hàng nhận tiền");
            entity.Property(e => e.ToBankBranchName)
                .HasMaxLength(255)
                .HasComment("Tên chi nhánh ngân hàng nhận tiền");
            entity.Property(e => e.ToBankBranchNo)
                .HasMaxLength(255)
                .HasComment("Mã chi nhánh ngân hàng nhận tiền");
            entity.Property(e => e.ToBankName)
                .HasMaxLength(255)
                .HasComment("Tên ngân hàng nhận tiền");
            entity.Property(e => e.ToBankNo)
                .HasMaxLength(10)
                .HasComment("Mã ngân hàng nhân tiền");
            entity.Property(e => e.TranSerial)
                .HasMaxLength(300)
                .HasComment("Số serial phiên giao dịch chuyển tiền trực tuyến");
            entity.Property(e => e.TransferState)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái giao dịch");

            entity.HasOne(d => d.FromBankAccount).WithMany(p => p.EbtransferInfos)
                .HasForeignKey(d => d.FromBankAccountId)
                .HasConstraintName("FK_EBTransferInfo_BankAccount");
        });

        modelBuilder.Entity<EbtransferInfoAttachment>(entity =>
        {
            entity.HasKey(e => e.AttachmentId);

            entity.ToTable("EBTransferInfoAttachment");

            entity.HasIndex(e => e.RefId, "IX_EBTransferInfoAttachment_RefID");

            entity.Property(e => e.AttachmentId)
                .ValueGeneratedNever()
                .HasColumnName("AttachmentID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FileExtension).HasMaxLength(25);
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Path).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.EbtransferInfoAttachments)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_EBTransferInfoAttachment_EBTransferInfo");
        });

        modelBuilder.Entity<EbtransferInfoLog>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("EBTransferInfoLog");

            entity.HasIndex(e => e.RefId, "IX_EBTransferInfoLog_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ApplicationPartAlias)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasComment("Đối tượng thao tác");
            entity.Property(e => e.ComputerIp)
                .HasMaxLength(100)
                .HasComment("Địa chỉ IP")
                .HasColumnName("ComputerIP");
            entity.Property(e => e.ComputerName)
                .HasMaxLength(100)
                .HasComment("Thiết bị");
            entity.Property(e => e.Description).HasComment("Mô tả chi tiết");
            entity.Property(e => e.LoginName)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasComment("Tên người dùng thao tác Database");
            entity.Property(e => e.PermissionTypeAlias)
                .HasMaxLength(255)
                .HasComment("Hành động");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Time)
                .HasComment("Thời gian")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Ref).WithMany(p => p.EbtransferInfoLogs)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_EBTransferInfoLog_EBTransferInfo");
        });

        modelBuilder.Entity<EbuserRegister>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EBUserRegister");

            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            entity.Property(e => e.Position).HasMaxLength(255);
            entity.Property(e => e.ProvinceName).HasMaxLength(255);
            entity.Property(e => e.TaxCode).HasMaxLength(20);
        });

        modelBuilder.Entity<EinvoiceHubMapping>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK__EInvoice__2D2A2CD1019CCE44");

            entity.ToTable("EInvoiceHubMapping");

            entity.HasIndex(e => e.InvoiceHubId, "IX_EInvoiceHubMapping_InvoiceHubID");

            entity.HasIndex(e => e.Status, "IX_EInvoiceHubMapping_Status");

            entity.HasIndex(e => e.VoucherRefId, "IX_EInvoiceHubMapping_VoucherRefID");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorCode).HasMaxLength(50);
            entity.Property(e => e.ErrorDescription).HasMaxLength(255);
            entity.Property(e => e.InvoiceHubId).HasColumnName("InvoiceHubID");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PartnerCode).HasMaxLength(20);
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");
        });

        modelBuilder.Entity<EinvoiceHubPendingPublish>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EInvoiceHubPendingPublish");

            entity.HasIndex(e => e.PartnerAppId, "IX_EInvoiceHubPendingPublish_PartnerAppID");

            entity.HasIndex(e => e.RefId, "IX_EInvoiceHubPendingPublish_RefID");

            entity.Property(e => e.PartnerAppId).HasColumnName("PartnerAppID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
        });

        modelBuilder.Entity<EinvoiceInfoNd123status>(entity =>
        {
            entity.HasKey(e => e.StatusId);

            entity.ToTable("EinvoiceInfoND123Status");

            entity.Property(e => e.StatusId)
                .ValueGeneratedNever()
                .HasColumnName("StatusID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.StatusName).HasMaxLength(255);
        });

        modelBuilder.Entity<EinvoiceReplacement>(entity =>
        {
            entity.ToTable("EInvoiceReplacement");

            entity.HasIndex(e => e.ReplaceInvRefId, "IX_EInvoiceReplacement_ReplaceInvRefID");

            entity.Property(e => e.EinvoiceReplacementId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("EInvoiceReplacementID");
            entity.Property(e => e.OrgInvDate).HasColumnType("datetime");
            entity.Property(e => e.OrgInvNo).HasMaxLength(50);
            entity.Property(e => e.OrgInvRefId).HasColumnName("OrgInvRefID");
            entity.Property(e => e.OrgInvSeries).HasMaxLength(20);
            entity.Property(e => e.OrgInvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.ReplaceInvRefId).HasColumnName("ReplaceInvRefID");
        });

        modelBuilder.Entity<EinvoiceStatus>(entity =>
        {
            entity.HasKey(e => e.TransactionId);

            entity.ToTable("EInvoiceStatus");

            entity.HasIndex(e => e.InvoiceRefId, "IX_EInvoiceStatus_InvoiceRefID").IsUnique();

            entity.Property(e => e.TransactionId)
                .HasMaxLength(42)
                .IsUnicode(false)
                .HasColumnName("TransactionID");
            entity.Property(e => e.Bccemail).HasColumnName("BCCEmail");
            entity.Property(e => e.BccemailFull).HasColumnName("BCCEmailFull");
            entity.Property(e => e.Ccemail).HasColumnName("CCEmail");
            entity.Property(e => e.CcemailFull).HasColumnName("CCEmailFull");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.ConvertToPaperTimes).HasDefaultValueSql("((0))");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DateSendEmail).HasColumnType("datetime");
            entity.Property(e => e.DeletedReason).HasMaxLength(255);
            entity.Property(e => e.EisendTaxAuthorityStatus)
                .HasDefaultValueSql("((0))")
                .HasColumnName("EISendTaxAuthorityStatus");
            entity.Property(e => e.EmailSentTimes).HasDefaultValueSql("((0))");
            entity.Property(e => e.InvoiceRefId).HasColumnName("InvoiceRefID");
            entity.Property(e => e.IsInvoiceDeleted).HasDefaultValueSql("((0))");
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NewTypeStatus)
                .HasDefaultValueSql("((1))")
                .HasComment("1: hóa đơn thêm mới, 2: hóa đơn bị hủy, 7: hóa đơn bị thay thế, 8: hóa đơn bị điều chỉnh");
            entity.Property(e => e.PaymentMethodPublish).HasMaxLength(50);
            entity.Property(e => e.ReceiverEmail).HasMaxLength(255);
            entity.Property(e => e.ReceiverEmailFull).HasMaxLength(255);
            entity.Property(e => e.ReceiverName).HasMaxLength(255);
            entity.Property(e => e.ReceiverNameFull).HasMaxLength(255);
            entity.Property(e => e.ViewEinvoiceTimes)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ViewEInvoiceTimes");
        });

        modelBuilder.Entity<EinvoiceSummary>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_InvoiceSummary");

            entity.ToTable("EInvoiceSummary");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("ID bảng tổng hợp")
                .HasColumnName("RefID");
            entity.Property(e => e.AdditionTime).HasComment("Bổ sung lần thứ");
            entity.Property(e => e.AdditionType).HasComment("Loại: 0 - bổ sung; 1: sửa đổi");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(400)
                .HasComment("Tên công ty");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(20)
                .HasComment("Mã số thuế");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DisplayOnBook).HasComment("Hiển thị trên sổ");
            entity.Property(e => e.EditionTime).HasComment("Sửa đổi lần thứ");
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.InvMethod).HasComment("Loại hóa đơn: 0 - hóa đơn điện tử; 1: đặt in");
            entity.Property(e => e.InventoryItemType).HasComment("Loại hàng hóa: 1 - xăng dầu; 2 - vận tải HK; 9 - Khác");
            entity.Property(e => e.InventoryItemTypeName).HasMaxLength(255);
            entity.Property(e => e.IsFirstTime).HasComment("Lần đầu");
            entity.Property(e => e.IsSign).HasComment("Kiểm tra đã ký hóa đơn hay chưa");
            entity.Property(e => e.Period)
                .HasMaxLength(255)
                .HasComment("Kỳ dữ liệu");
            entity.Property(e => e.PeriodType)
                .HasMaxLength(255)
                .HasComment("Loại kỳ dữ liệu: Ngày (N); Tháng (T); Quý (Q)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày bảng tổng hợp")
                .HasColumnType("datetime");
            entity.Property(e => e.SendDate).HasColumnType("datetime");
            entity.Property(e => e.SignBy).HasMaxLength(400);
            entity.Property(e => e.SignDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasComment("Trạng thái: 0- chưa gửi; 1: đã gửi; 2: tiếp nhận; 3: không tiếp nhận; 4: gửi lỗi");
            entity.Property(e => e.StatusName).HasMaxLength(100);
            entity.Property(e => e.Times).HasComment("Số lần bổ sung");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<EinvoiceSummaryDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("EInvoiceSummaryDetail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Tiền thanh toán quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Tiền thanh toán")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.AmountWithoutVat)
                .HasComment("Thành tiền chưa thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountWithoutVAT");
            entity.Property(e => e.AmountWithoutVatoc)
                .HasComment("Thành tiền chưa thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountWithoutVATOC");
            entity.Property(e => e.BuyerAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ người mua");
            entity.Property(e => e.BuyerCode)
                .HasMaxLength(50)
                .HasComment("Mã khách hàng");
            entity.Property(e => e.BuyerLegalName)
                .HasMaxLength(400)
                .HasComment("Tên người mua");
            entity.Property(e => e.BuyerTaxCode)
                .HasMaxLength(50)
                .HasComment("MST người mua");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FeeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FeeAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FeeAmountOC");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvStatus).HasComment("Trạng thái: 0-mới; 1-hủy; 2-điều chỉnh; 3-thay thế; 4-giải trình; 5-sai sót");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InvoiceNote)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .HasComment("Mã hàng");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.OrgInvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn gốc");
            entity.Property(e => e.OrgInvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn gốc");
            entity.Property(e => e.OrgInvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn gốc");
            entity.Property(e => e.OrgInvoiceType).HasComment("Loại hóa đơn bị thay thế/điều chỉnh (1: Hóa đơn 123; 3: Hóa đơn 51)");
            entity.Property(e => e.OrgPeriod)
                .HasMaxLength(255)
                .HasComment("Kỳ điều chỉnh");
            entity.Property(e => e.OrgPeriodDate).HasColumnType("datetime");
            entity.Property(e => e.OrgPeriodType)
                .HasMaxLength(255)
                .HasComment("Loại kỳ điều chỉnh");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxRefDate)
                .HasComment("Ngày thông báo rà soát")
                .HasColumnType("datetime");
            entity.Property(e => e.TaxRefNo)
                .HasMaxLength(30)
                .HasComment("Số thông báo rà soát của thuế");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(42)
                .IsUnicode(false)
                .HasColumnName("TransactionID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitName)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");
            entity.Property(e => e.Vatamount)
                .HasDefaultValueSql("((0))")
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateName)
                .HasMaxLength(255)
                .HasComment("Thuế suất")
                .HasColumnName("VATRateName");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.EinvoiceSummaryDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_EInvoiceSummaryDetail_EInvoiceSummary");
        });

        modelBuilder.Entity<EinvoiceSummaryDetailReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("EInvoiceSummaryDetailReference");

            entity.HasIndex(e => e.EinvoiceSummaryDetailId, "IX_EInvoiceSummaryDetailReference_EInvoiceSummaryDetailID");

            entity.HasIndex(e => e.EinvoiceSummaryId, "IX_EInvoiceSummaryDetailReference_EInvoiceSummaryID");

            entity.HasIndex(e => e.SainvoicePetroleumDetailId, "IX_EInvoiceSummaryDetailReference_SAInvoicePetroleumDetailID");

            entity.HasIndex(e => e.SainvoicePetroleumId, "IX_EInvoiceSummaryDetailReference_SAInvoicePetroleumID");

            entity.Property(e => e.ReferenceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReferenceID");
            entity.Property(e => e.EinvoiceSummaryDetailId).HasColumnName("EInvoiceSummaryDetailID");
            entity.Property(e => e.EinvoiceSummaryId).HasColumnName("EInvoiceSummaryID");
            entity.Property(e => e.SainvoiceDetailId).HasColumnName("SAInvoiceDetailID");
            entity.Property(e => e.SainvoiceId).HasColumnName("SAInvoiceID");
            entity.Property(e => e.SainvoicePetroleumDetailId).HasColumnName("SAInvoicePetroleumDetailID");
            entity.Property(e => e.SainvoicePetroleumId).HasColumnName("SAInvoicePetroleumID");

            entity.HasOne(d => d.EinvoiceSummary).WithMany(p => p.EinvoiceSummaryDetailReferences)
                .HasForeignKey(d => d.EinvoiceSummaryId)
                .HasConstraintName("FK_EInvoiceSummaryDetailReference_EInvoiceSummary");

            entity.HasOne(d => d.Sainvoice).WithMany(p => p.EinvoiceSummaryDetailReferences)
                .HasForeignKey(d => d.SainvoiceId)
                .HasConstraintName("FK_EInvoiceSummaryDetailReference_SAInvoice");

            entity.HasOne(d => d.SainvoicePetroleum).WithMany(p => p.EinvoiceSummaryDetailReferences)
                .HasForeignKey(d => d.SainvoicePetroleumId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_EInvoiceSummaryDetailReference_SAInvoicePetroleum");
        });

        modelBuilder.Entity<EinvoiceSummaryReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("EinvoiceSummaryReference");

            entity.Property(e => e.ReferenceId)
                .ValueGeneratedNever()
                .HasColumnName("ReferenceID");
            entity.Property(e => e.EinvoiceSummaryId).HasColumnName("EInvoiceSummaryID");
            entity.Property(e => e.SainvoiceId).HasColumnName("SAInvoiceID");
            entity.Property(e => e.SainvoicePetroleumId).HasColumnName("SAInvoicePetroleumID");

            entity.HasOne(d => d.Sainvoice).WithMany(p => p.EinvoiceSummaryReferences)
                .HasForeignKey(d => d.SainvoiceId)
                .HasConstraintName("FK_EinvoiceSummaryReference_SAInvoice");

            entity.HasOne(d => d.SainvoicePetroleum).WithMany(p => p.EinvoiceSummaryReferences)
                .HasForeignKey(d => d.SainvoicePetroleumId)
                .HasConstraintName("FK_EinvoiceSummaryReference_SAInvoicePetroleum");
        });

        modelBuilder.Entity<EiplaceHolderInvoice>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_PlaceHolderInvoice");

            entity.ToTable("EIPlaceHolderInvoice", tb => tb.HasComment("Bảng master Lưu trữ các hóa đơn giữ chỗ để dành"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.FromNo)
                .HasMaxLength(20)
                .HasComment("Từ số");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.IptemplateId)
                .HasComment("Mẫu hóa đơn khởi tạo được chọn")
                .HasColumnName("IPTemplateID");
            entity.Property(e => e.Quantity).HasComment("Số lượng");
            entity.Property(e => e.ToNo)
                .HasMaxLength(20)
                .HasComment("Đến sô");
        });

        modelBuilder.Entity<EiplaceHolderInvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("EIPlaceHolderInvoiceDetail", tb => tb.HasComment("Bảng master Lưu trữ các hóa đơn giữ chỗ để dành chi tiết"));

            entity.HasIndex(e => e.RefId, "IX_EIPlaceHolderInvoiceDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.InvoiceRefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("InvoiceRefID");
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.EiplaceHolderInvoiceDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_EIPlaceHolderInvoiceDetail_EIPlaceHolderInvoice");
        });

        modelBuilder.Entity<EmailBook>(entity =>
        {
            entity.HasKey(e => e.BookId);

            entity.ToTable("EmailBook");

            entity.HasIndex(e => e.Email, "IX_EmailBook")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.BookId)
                .ValueGeneratedNever()
                .HasColumnName("BookID");
            entity.Property(e => e.BookName).HasMaxLength(255);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.DepartmentName).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.Tel).HasMaxLength(50);
        });

        modelBuilder.Entity<EmailGroup>(entity =>
        {
            entity.ToTable("EmailGroup");

            entity.HasIndex(e => e.EmailGroupName, "IX_EmailGroup")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.EmailGroupId)
                .ValueGeneratedNever()
                .HasColumnName("EmailGroupID");
            entity.Property(e => e.EmailGroupName).HasMaxLength(255);
            entity.Property(e => e.Note).HasMaxLength(255);
        });

        modelBuilder.Entity<EmailReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("EmailReference");

            entity.Property(e => e.ReferenceId)
                .ValueGeneratedNever()
                .HasColumnName("ReferenceID");
            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.EmailGroupId).HasColumnName("EmailGroupID");

            entity.HasOne(d => d.Book).WithMany(p => p.EmailReferences)
                .HasForeignKey(d => d.BookId)
                .HasConstraintName("FK_EmailReference_EmailBook");

            entity.HasOne(d => d.EmailGroup).WithMany(p => p.EmailReferences)
                .HasForeignKey(d => d.EmailGroupId)
                .HasConstraintName("FK_EmailReference_EmailGroup");
        });

        modelBuilder.Entity<EmailTemplateApply>(entity =>
        {
            entity.HasKey(e => e.ApplyId).HasName("PK__EmailTem__F0687F91415105EE");

            entity.ToTable("EmailTemplateApply");

            entity.Property(e => e.ApplyId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ApplyID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.EmailTemplateId).HasColumnName("EmailTemplateID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.EmailTemplate).WithMany(p => p.EmailTemplateApplies)
                .HasForeignKey(d => d.EmailTemplateId)
                .HasConstraintName("FK_EmailTemplateApply_EmailTemplateList");
        });

        modelBuilder.Entity<EmailTemplateCustom>(entity =>
        {
            entity.HasKey(e => e.EmailTemplateType).HasName("PK_EmailTemplateCustom_1");

            entity.ToTable("EmailTemplateCustom", tb => tb.HasComment("Bảng chứa nội dung mẫu email của KH"));

            entity.Property(e => e.EmailTemplateType)
                .ValueGeneratedNever()
                .HasComment("Gửi hóa đơn cho khách hàng; Gửi thông báo xóa hóa đơn cho khách hàng\n0: Gửi hóa đơn cho khách hàng,1: Gửi thông báo xóa hóa đơn cho khách hàng");
            entity.Property(e => e.EmailContent).HasComment("Nội dung");
            entity.Property(e => e.EmailSubject)
                .HasMaxLength(1000)
                .HasComment("Tiêu đề email");
        });

        modelBuilder.Entity<EmailTemplateList>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK__EmailTem__F87ADD0739AFE426");

            entity.ToTable("EmailTemplateList");

            entity.Property(e => e.TemplateId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("TemplateID");
            entity.Property(e => e.AttachmentDefault)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.TemplateName).HasMaxLength(255);
            entity.Property(e => e.TemplateSubject).HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.TemplateTypeNavigation).WithMany(p => p.EmailTemplateLists)
                .HasForeignKey(d => d.TemplateType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailTemplateList_SYSEmailTemplateType");
        });

        modelBuilder.Entity<EmployeeRelationship>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeRelationship");

            entity.HasIndex(e => e.AccountObjectId, "IX_EmployeeRelationship");

            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DependentBook).HasMaxLength(255);
            entity.Property(e => e.DependentNumber).HasMaxLength(255);
            entity.Property(e => e.District).HasMaxLength(50);
            entity.Property(e => e.EmployeeRelationshipId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("EmployeeRelationshipID");
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.IdentificationNumber).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Nationality).HasMaxLength(255);
            entity.Property(e => e.Province).HasMaxLength(255);
            entity.Property(e => e.RelationshipId).HasColumnName("RelationshipID");
            entity.Property(e => e.WardOrCommune).HasMaxLength(255);

            entity.HasOne(d => d.AccountObject).WithMany()
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_EmployeeRelationship_AccountObject");

            entity.HasOne(d => d.Relationship).WithMany()
                .HasForeignKey(d => d.RelationshipId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeRelationship_Relationship");
        });

        modelBuilder.Entity<EsignStatus>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK__ESignSta__2D2A2CD16F604E84");

            entity.ToTable("ESignStatus");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ExpenseItem>(entity =>
        {
            entity.ToTable("ExpenseItem", tb =>
                {
                    tb.HasComment("Bảng danh mục khoản mục chi phí");
                    tb.HasTrigger("trg_ExpenseItem_DataChanged");
                });

            entity.HasIndex(e => e.ExpenseItemCode, "IX_ExpenseItem_ExpenseItemCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ExpenseItemId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemCode)
                .HasMaxLength(20)
                .HasComment("Mã khoản mục chi phí");
            entity.Property(e => e.ExpenseItemName)
                .HasMaxLength(128)
                .HasComment("Tên khoản mục chi phí");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasComment("ID khoản mục chi phí cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<ExplorebarVisible>(entity =>
        {
            entity.HasKey(e => new { e.KeyGroup, e.UserId });

            entity.ToTable("ExplorebarVisible");

            entity.Property(e => e.KeyGroup).HasMaxLength(50);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<ExternalDataChanged>(entity =>
        {
            entity.HasKey(e => new { e.TableName, e.ObjectId }).HasName("PK_ExternalSyncData");

            entity.ToTable("ExternalDataChanged");

            entity.Property(e => e.TableName).HasMaxLength(150);
            entity.Property(e => e.ObjectId)
                .HasMaxLength(50)
                .HasColumnName("ObjectID");
        });

        modelBuilder.Entity<Faadjustment>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("FAAdjustment", tb => tb.HasComment("Bảng master đánh giá lại tài sản cố định"));

            entity.HasIndex(e => e.BranchId, "IX_FAAdjustment_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FAAdjustment_RefNo").HasFillFactor(90);

            entity.HasIndex(e => e.RefType, "IX_FAAdjustment_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionDate)
                .HasComment("Ngày quyết định")
                .HasColumnType("datetime");
            entity.Property(e => e.DecisionNo)
                .HasMaxLength(20)
                .HasComment("Số quyết định");
            entity.Property(e => e.DisplayOnBook).HasComment("0: Ghi vào sổ Tài chính; 1: Ghi vào Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Kết luận");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasComment("Lý do");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");

            entity.HasOne(d => d.Branch).WithMany(p => p.Faadjustments)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_FAAdjustment_OrganizationUnit");
        });

        modelBuilder.Entity<FaadjustmentDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FAAdjustmentDetail", tb => tb.HasComment("Bảng lưu trữ chi tiết các khoản còn lại Sau đánh giá lại TSCĐ"));

            entity.HasIndex(e => e.RefId, "IX_FAAdjustmentDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AdjustmentAccount)
                .HasMaxLength(20)
                .HasComment("TK đánh giá lại");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.CurrentAccumDepreciationAmount)
                .HasComment("Giá trị hao mòn lỹ kế TRUOC điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CurrentDepreciationAmount)
                .HasComment("Giá trị tính khấu hao TRƯỚC điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CurrentLifeTime)
                .HasComment("Thời gian sử dụng hiện tại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CurrentRemainingAmount)
                .HasComment("Giá trị còn lại trước điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffAccumDepreciationAmount)
                .HasComment("Chênh lệch Hao mòn lũy kế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffDepreciationAmount)
                .HasComment("Chênh lệch Giá trị tính khấu hao")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffLifeTime)
                .HasComment("Chênh lệch thời gian sử dụng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffMonthlyDepreciationAmount)
                .HasComment("Chênh lệch giá trị tính khấu hao THÁNG Sau điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffRemainingAmount)
                .HasComment("Chênh lệch giá trị còn lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FixedAssetId)
                .HasComment("Mã tài sản")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.NewAccumDepreciationAmount)
                .HasComment("Giá trị hao mòn lỹ kế SAU điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewDepreciationAmount)
                .HasComment("Giá trị tính khấu hao SAU điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewLifeTime)
                .HasComment("Thời gian sử dụng mới")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewMonthlyDepreciationAmount)
                .HasComment("Giá trị tính khấu hao THÁNG Sau điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewMonthlyDepreciationAmountByIncomeTax)
                .HasComment("Giá trị tính khấu hao THÁNG Sau điều chỉnh theo luật thuế TNDN")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewRemainingAmount)
                .HasComment("Giá trị còn lại SAU điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự");

            entity.HasOne(d => d.AdjustmentAccountNavigation).WithMany(p => p.FaadjustmentDetailAdjustmentAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AdjustmentAccount);

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.FaadjustmentDetailCostAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount);

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FaadjustmentDetails)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FAAdjustmentDetail_FixedAsset");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FaadjustmentDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FAAdjustmentDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FaadjustmentDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FAAdjustmentDetail_FAAdjustment");
        });

        modelBuilder.Entity<FaadjustmentDetailPost>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FAAdjustmentDetailPost", tb => tb.HasComment("Bảng detail Hạch toán của Đánh giá lại TSCD"));

            entity.HasIndex(e => e.CreditAccount, "IX_FAAdjustmentDetailPost_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_FAAdjustmentDetailPost_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_FAAdjustmentDetailPost_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của master")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("thứ tự sắp xếp");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_AccountObject");

            entity.HasOne(d => d.Contract).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.FaadjustmentDetailPostCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_FAAdjustmentDetailPost_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.FaadjustmentDetailPostDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_FAAdjustmentDetailPost_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.FaadjustmentDetailPosts)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FAAdjustmentDetailPost_FAAdjustment");
        });

        modelBuilder.Entity<FaadjustmentMemberDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_FAAdjustmentDetailMember");

            entity.ToTable("FAAdjustmentMemberDetail", tb => tb.HasComment("Bảng lưu trữ danh sách các thành viên thma gia đánh giá lại TSCĐ"));

            entity.HasIndex(e => e.RefId, "IX_FAAdjustmentMemberDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Họ và tên");
            entity.Property(e => e.Position)
                .HasMaxLength(255)
                .HasComment("Chức vụ");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Representative)
                .HasMaxLength(255)
                .HasComment("Đại diện");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Ref).WithMany(p => p.FaadjustmentMemberDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FAAdjustmentDetailMember_FAAdjustment");
        });

        modelBuilder.Entity<Faaudit>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_FAInventory");

            entity.ToTable("FAAudit", tb => tb.HasComment("Kiểm kê tài sản"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FAAudit_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("RefID của Master")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0: Kiểm kê trên sổ Tài chỉnh; 1: Kiểm kê trên sổ quản trị");
            entity.Property(e => e.InventoryDate)
                .HasComment("Kiểm kê đến ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.IsExecuted).HasComment("Đã xử lý kiến nghị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Mục đích");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefTime)
                .HasComment("Giờ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.Summary)
                .HasMaxLength(255)
                .HasComment("Kết luận sau kiểm kê");

            entity.HasOne(d => d.Branch).WithMany(p => p.Faaudits)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_FAInventory_OrganizationUnit");
        });

        modelBuilder.Entity<FaauditDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_FAInventoryDetail");

            entity.ToTable("FAAuditDetail", tb => tb.HasComment("Chi tiết kiểm kê tài sản"));

            entity.HasIndex(e => e.RefId, "IX_FAAuditDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccumDepreciationAmount)
                .HasComment("Giá trị hao mòn lỹ kế hiện tại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Giá trị tính khấu hao hiện tại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExistInStock)
                .HasDefaultValueSql("((1))")
                .HasComment("0 = Mất; 1 = Còn");
            entity.Property(e => e.FixedAssetId)
                .HasComment("Tài sản cố định")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.OrgPrice)
                .HasComment("Nguyên giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Quality)
                .HasDefaultValueSql("((0))")
                .HasComment("0: Hoạt động tốt, 1: Bị hỏng, 2: Không xác định");
            entity.Property(e => e.Recommendation)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Không kiến nghị; 1 = Ghi giảm; 2 = Khác");
            entity.Property(e => e.RefId)
                .HasComment("RefID của Master")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainingAmount)
                .HasComment("Giá trị còn lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FaauditDetails)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FAAuditDetail_FixedAsset");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FaauditDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FAAuditDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FaauditDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FAAuditDetail_FAAudit");
        });

        modelBuilder.Entity<FaauditMemberDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_FAInventoryDetailMember");

            entity.ToTable("FAAuditMemberDetail", tb => tb.HasComment("Chi tiết các thành viên tham gia kiểm kê"));

            entity.HasIndex(e => e.RefId, "IX_FAAuditMemberDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Họ và tên");
            entity.Property(e => e.Position)
                .HasMaxLength(128)
                .HasComment("Chức vụ");
            entity.Property(e => e.RefId)
                .HasComment("RefID của Master")
                .HasColumnName("RefID");
            entity.Property(e => e.Representative)
                .HasMaxLength(128)
                .HasComment("Đại diện");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.Ref).WithMany(p => p.FaauditMemberDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FAInventoryDetailMember_FAInventory");
        });

        modelBuilder.Entity<FachangeFinancialLeasingToOwner>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("FAChangeFinancialLeasingToOwner");

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FAChangeFinancialLeasingToOwner_RefNo");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FixedAssetCode).HasMaxLength(25);
            entity.Property(e => e.FixedAssetId).HasColumnName("FixedAssetID");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NewAccumDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewDepreciationAccount).HasMaxLength(20);
            entity.Property(e => e.NewDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewDepreciationAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewDepreciationRateMonth).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewDepreciationRateYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewLifeTime).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewLifeTimeRemaining).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewMonthlyDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewMonthlyDepreciationAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewOrgPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewOrgPriceAccount).HasMaxLength(20);
            entity.Property(e => e.NewRemainingAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewRemainingAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewYearlyDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldAccumDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldDepreciationAccount).HasMaxLength(20);
            entity.Property(e => e.OldDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldDepreciationAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldDepreciationRateMonth).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldDepreciationRateYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldLifeTime).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldLifeTimeRemaining).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldMonthlyDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldMonthlyDepreciationAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldOrgPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldOrgPriceAccount).HasMaxLength(20);
            entity.Property(e => e.OldRemainingAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldRemainingAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OldYearlyDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.TotalAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");

            entity.HasOne(d => d.Branch).WithMany(p => p.FachangeFinancialLeasingToOwners)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwner_OrganizationUnit");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FachangeFinancialLeasingToOwners)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwner_FixedAsset");

            entity.HasOne(d => d.NewDepreciationAccountNavigation).WithMany(p => p.FachangeFinancialLeasingToOwnerNewDepreciationAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.NewDepreciationAccount)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwner_Account_NewDepreciation");

            entity.HasOne(d => d.NewOrgPriceAccountNavigation).WithMany(p => p.FachangeFinancialLeasingToOwnerNewOrgPriceAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.NewOrgPriceAccount)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwner_Account_NewOrgPrice");

            entity.HasOne(d => d.OldDepreciationAccountNavigation).WithMany(p => p.FachangeFinancialLeasingToOwnerOldDepreciationAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.OldDepreciationAccount)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwner_Account_OldDepreciation");

            entity.HasOne(d => d.OldOrgPriceAccountNavigation).WithMany(p => p.FachangeFinancialLeasingToOwnerOldOrgPriceAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.OldOrgPriceAccount)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwner_Account_OldOrgPrice");
        });

        modelBuilder.Entity<FachangeFinancialLeasingToOwnerDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FAChangeFinancialLeasingToOwnerDetail", tb => tb.HasComment("Chi tiết"));

            entity.HasIndex(e => e.RefId, "IX_FAChangeFinancialLeasingToOwnerDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.FachangeFinancialLeasingToOwnerDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwnerDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.FachangeFinancialLeasingToOwnerDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwnerDetail_Account_Debit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FachangeFinancialLeasingToOwnerDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FAChangeFinancialLeasingToOwnerDetail_FAChangeFinancialLeasingToOwner");
        });

        modelBuilder.Entity<Fadecrement>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_FAIncrementDecrement");

            entity.ToTable("FADecrement", tb => tb.HasComment("Master Chứng từ ghi giảm TSCD"));

            entity.HasIndex(e => e.BranchId, "IX_FADecrement_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FADecrement_RefNo");

            entity.HasIndex(e => e.RefType, "IX_FADecrement_RefType").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FAIncrementDecrement_RefNo").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK phiếu ghi tăng, ghi giảm TSCĐ")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0: Ghi giảm trên sổ Tài chính; 1: Ghi giảm trên sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do giảm");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hoạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Giá trị còn lại")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.Fadecrements)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_FADecrement_OrganizationUnit");
        });

        modelBuilder.Entity<FadecrementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_FAIncrementDecrementDetail");

            entity.ToTable("FADecrementDetail");

            entity.HasIndex(e => e.RefId, "IX_FADecrementDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccumDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationAccount).HasMaxLength(20);
            entity.Property(e => e.DepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationAmountInMonth)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FaauditRefId).HasColumnName("FAAuditRefID");
            entity.Property(e => e.FixedAssetId).HasColumnName("FixedAssetID");
            entity.Property(e => e.OrgPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrgPriceAccount).HasMaxLength(20);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RemainingAccount).HasMaxLength(20);
            entity.Property(e => e.RemainingAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.DepreciationAccountNavigation).WithMany(p => p.FadecrementDetailDepreciationAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DepreciationAccount)
                .HasConstraintName("FK_FADecrementDetail_Account_Credit");

            entity.HasOne(d => d.FaauditRef).WithMany(p => p.FadecrementDetails)
                .HasForeignKey(d => d.FaauditRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_FADecrementDetail_FAAudit");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FadecrementDetails)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FADecrementDetail_FixedAsset");

            entity.HasOne(d => d.OrgPriceAccountNavigation).WithMany(p => p.FadecrementDetailOrgPriceAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.OrgPriceAccount)
                .HasConstraintName("FK_FADecrementDetail_Account_Debit");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FadecrementDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FADecrementDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FadecrementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FADecrementDetail_FADecrement");

            entity.HasOne(d => d.RemainingAccountNavigation).WithMany(p => p.FadecrementDetailRemainingAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.RemainingAccount)
                .HasConstraintName("FK_FADecrementDetail_Account_Remaining");
        });

        modelBuilder.Entity<FadecrementDetailPost>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FADecrementDetailPost");

            entity.HasIndex(e => e.RefId, "IX_FADecrementDetailPost_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí (dùng cho Thu tiền KH)")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự dòng chi tiết");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_FADecrementDetailPost_AccountObject");

            entity.HasOne(d => d.Contract).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_FADecrementDetailPost_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.FadecrementDetailPostCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_FADecrementDetailPost_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.FadecrementDetailPostDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_FADecrementDetailPost_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_FADecrementDetailPost_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_FADecrementDetailPost_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_FADecrementDetailPost_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_FADecrementDetailPost_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_FADecrementDetailPost_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_FADecrementDetailPost_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.FadecrementDetailPosts)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FADecrementDetailPost_FADecrement");
        });

        modelBuilder.Entity<Fadepreciation>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("FADepreciation", tb => tb.HasComment("Bảng master chứng từ tính khấu hao TSCD"));

            entity.HasIndex(e => e.BranchId, "IX_FADepreciation_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FADepreciation_RefNo").HasFillFactor(90);

            entity.HasIndex(e => e.RefType, "IX_FADepreciation_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0: Phân bổ ở Sổ tài chính; 1: Phân bổ ở Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Month)
                .HasDefaultValueSql("((1))")
                .HasComment("Tháng khấu hao");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hoạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Year).HasComment("Năm khấu hao");

            entity.HasOne(d => d.Branch).WithMany(p => p.Fadepreciations)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_FADepreciation_OrganizationUnit");
        });

        modelBuilder.Entity<FadepreciationDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FADepreciationDetail", tb => tb.HasComment("Bảng chứng từ chi tiết  tính khấu hao TSCD (tab: Tính khấu hao)"));

            entity.HasIndex(e => e.FixedAssetId, "IX_FADepreciationDetail_FixedAssetID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_FADepreciationDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AmountResonableCost)
                .HasComment("Giá trị khấu hao được tính vào chi phí hợp lý")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountUnResonableCost)
                .HasComment("Giá trị khấu hao tháng không được tính vào chi phí hợp lý")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FixedAssetId)
                .HasComment("Tài sản cố định")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.MonthlyDepreciationAmount)
                .HasComment("Giá trị KH tháng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của master")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("thứ tự sắp xếp");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FadepreciationDetails)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FADepreciationDetail_FixedAsset");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FadepreciationDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FADepreciationDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FadepreciationDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FADepreciationDetail_FADepreciation");
        });

        modelBuilder.Entity<FadepreciationDetailAllocation>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_FADepreciationAllocationDetail");

            entity.ToTable("FADepreciationDetailAllocation", tb => tb.HasComment("Bảng chi tiết phân bổ khấu hao tscđ"));

            entity.HasIndex(e => e.RefId, "IX_FADepreciationDetailAllocation_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Chi phí phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationObjectId)
                .HasComment("Đối tượng phân bổ")
                .HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ %")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.FixedAssetId)
                .HasComment("Tài sản CĐ")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.MonthlyDepreciationAmount)
                .HasComment("Giá trị khấu hao tháng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.FadepreciationDetailAllocations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_FADepreciationDetailAllocation_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.FadepreciationDetailAllocations)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_FADepreciationDetailAllocation_ExpenseItem");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FadepreciationDetailAllocations)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FADepreciationDetailAllocation_FixedAsset");

            entity.HasOne(d => d.ListItem).WithMany(p => p.FadepreciationDetailAllocations)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_FADepreciationDetailAllocation_ListItem");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FadepreciationDetailAllocations)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FADepreciationDetailAllocation_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FadepreciationDetailAllocations)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FADepreciationDetailAllocation_FADepreciation");
        });

        modelBuilder.Entity<FadepreciationDetailPost>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_FADepreciationDetailAccount");

            entity.ToTable("FADepreciationDetailPost");

            entity.HasIndex(e => e.RefId, "IX_FADepreciationDetailPost_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.CreditAccountObjectId).HasColumnName("CreditAccountObjectID");
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.DebitAccountObjectId).HasColumnName("DebitAccountObjectID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((1))");

            entity.HasOne(d => d.Contract).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_FADepreciationDetailPost_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.FadepreciationDetailPostCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_FADepreciationDetailPost_Account_Credit");

            entity.HasOne(d => d.CreditAccountObject).WithMany(p => p.FadepreciationDetailPostCreditAccountObjects)
                .HasForeignKey(d => d.CreditAccountObjectId)
                .HasConstraintName("FK_FADepreciationDetailPost_AccountObject_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.FadepreciationDetailPostDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_FADepreciationDetailPost_Account_Debit");

            entity.HasOne(d => d.DebitAccountObject).WithMany(p => p.FadepreciationDetailPostDebitAccountObjects)
                .HasForeignKey(d => d.DebitAccountObjectId)
                .HasConstraintName("FK_FADepreciationDetailPost_AccountObject_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_FADepreciationDetailPost_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_FADepreciationDetailPost_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_FADepreciationDetailPost_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_FADepreciationDetailPost_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_FADepreciationDetailPost_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_FADepreciationDetailPost_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.FadepreciationDetailPosts)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FADepreciationDetailAccount_FADepreciation");
        });

        modelBuilder.Entity<Fatransfer>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("FATransfer", tb => tb.HasComment("Bảng Master Điều chuyển TSCĐ"));

            entity.HasIndex(e => e.BranchId, "IX_FATransfer_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FATransfer_RefNo").HasFillFactor(90);

            entity.HasIndex(e => e.RefType, "IX_FATransfer_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0: Điều chuyển ở Sổ tài chỉnh; 1: Điều chuyển ở Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa");
            entity.Property(e => e.HandOverName)
                .HasMaxLength(128)
                .HasComment("Người bàn giao");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do điều chuyển");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(128)
                .HasComment("Người tiếp nhận");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày điều chuyển")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Biên bản giao nhận số");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");

            entity.HasOne(d => d.Branch).WithMany(p => p.Fatransfers)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_FATransfer_OrganizationUnit");
        });

        modelBuilder.Entity<FatransferDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FATransferDetail", tb => tb.HasComment("Bảng detail Điều chuyển TSCĐ"));

            entity.HasIndex(e => e.FixedAssetId, "IX_FATransferDetail_FixedAssetID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_FATransferDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.FixedAssetId)
                .HasComment("Tài sản cố định")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.FromOrganizationUnitId)
                .HasComment("Từ phòng/ban")
                .HasColumnName("FromOrganizationUnitID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của Master")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("thứ tự sắp xếp");
            entity.Property(e => e.ToOrganizationUnitId)
                .HasComment("Đến phòng/ban")
                .HasColumnName("ToOrganizationUnitID");

            entity.HasOne(d => d.Contract).WithMany(p => p.FatransferDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_FATransferDetail_Contract");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.FatransferDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_FATransferDetail_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.FatransferDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_FATransferDetail_ExpenseItem");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FatransferDetails)
                .HasForeignKey(d => d.FixedAssetId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FATransferDetail_FixedAsset");

            entity.HasOne(d => d.FromOrganizationUnit).WithMany(p => p.FatransferDetailFromOrganizationUnits)
                .HasForeignKey(d => d.FromOrganizationUnitId)
                .HasConstraintName("FK_FATransferDetail_FromOrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.FatransferDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FATransferDetail_FATransfer");

            entity.HasOne(d => d.ToOrganizationUnit).WithMany(p => p.FatransferDetailToOrganizationUnits)
                .HasForeignKey(d => d.ToOrganizationUnitId)
                .HasConstraintName("FK_FATransferDetail_ToOrganizationUnit");
        });

        modelBuilder.Entity<FavoriteReportList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FavoriteReportList");

            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.ReportName).HasMaxLength(255);
            entity.Property(e => e.ReportNameChinese).HasMaxLength(255);
            entity.Property(e => e.ReportNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ReportNameKorean).HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<FileAttachment>(entity =>
        {
            entity.HasKey(e => e.AttachmentId);

            entity.ToTable("FileAttachment");

            entity.HasIndex(e => e.RefId, "IX_FileAttachment_RefID");

            entity.Property(e => e.AttachmentId)
                .ValueGeneratedNever()
                .HasColumnName("AttachmentID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DocumentName).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FileExtension).HasMaxLength(25);
            entity.Property(e => e.FileMimetype)
                .HasMaxLength(100)
                .HasColumnName("FileMIMEType");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.LinkType).HasDefaultValueSql("((1))");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
        });

        modelBuilder.Entity<FixedAsset>(entity =>
        {
            entity.HasKey(e => e.FixedAssetId).HasName("PK_FixedAsset_1");

            entity.ToTable("FixedAsset", tb => tb.HasComment("Bảng ghi tăng TSCĐ"));

            entity.HasIndex(e => e.OrganizationUnitId, "IX_FixedAsset_DepartmentID").HasFillFactor(90);

            entity.HasIndex(e => e.FixedAssetCategoryId, "IX_FixedAsset_FixedAssetCategoryID").HasFillFactor(90);

            entity.HasIndex(e => e.FixedAssetCode, "IX_FixedAsset_FixedAssetCode").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_FixedAsset_RefNo");

            entity.Property(e => e.FixedAssetId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Nhà cung cấp")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccumDepreciationAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Hao mòn lũy kế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AddressDelivery).HasMaxLength(255);
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CapacityMachine).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionDate).HasColumnType("datetime");
            entity.Property(e => e.DecisionNo).HasMaxLength(20);
            entity.Property(e => e.DeliveryRecordDate)
                .HasComment("Biên bản giao nhận ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveryRecordNo)
                .HasMaxLength(20)
                .HasComment("Biên bản giao nhận số");
            entity.Property(e => e.DepreciationAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản khấu hao");
            entity.Property(e => e.DepreciationAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị tính khấu hao")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationAmountByIncomeTax)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị tính khấu hao theo luật thuế TNDN")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationDate)
                .HasComment("Ngày bắt đầu tính khấu hao (ngày bắt đầu sử dụng)")
                .HasColumnType("datetime");
            entity.Property(e => e.DepreciationRateMonth)
                .HasComment("Tỷ lệ khấu hao tháng (%)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationRateYear)
                .HasComment("Tỷ lệ khấu hao năm (%)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DisplayOnBook).HasComment("0: Ghi tăng ở Sổ tài chỉnh; 1: Ghi tăng ở Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FixedAssetCategoryId)
                .HasComment("Loại tài sản cố định")
                .HasColumnName("FixedAssetCategoryID");
            entity.Property(e => e.FixedAssetCode)
                .HasMaxLength(25)
                .HasDefaultValueSql("('')")
                .HasComment("Mã tài sản");
            entity.Property(e => e.FixedAssetName)
                .HasMaxLength(128)
                .HasDefaultValueSql("('')")
                .HasComment("Tên tài sản");
            entity.Property(e => e.FixedAssetOtherBookId).HasColumnName("FixedAssetOtherBookID");
            entity.Property(e => e.GuaranteeCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện bảo hành");
            entity.Property(e => e.GuaranteeDuration)
                .HasMaxLength(50)
                .HasComment("Thời hạn bảo hành");
            entity.Property(e => e.Inactive).HasComment("0: Đang sử dụng; 1: Ngừng theo dõi");
            entity.Property(e => e.IsEnoughVoucher).HasComment("Đã tập hợp đủ chứng từ Nguồn gốc hình thành");
            entity.Property(e => e.IsLimitDepreciationAmount).HasComment("Giới hạn giá trị tính khấu hao");
            entity.Property(e => e.IsNotDepreciation).HasComment("Không tính khấu hao");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.LifeTime)
                .HasDefaultValueSql("((0))")
                .HasComment("Thời gian sử dụng")
                .HasColumnType("decimal(8, 4)");
            entity.Property(e => e.LifeTimeInMonth)
                .HasDefaultValueSql("((0))")
                .HasComment("Thời gian sử dụng (Tháng)")
                .HasColumnType("decimal(8, 4)");
            entity.Property(e => e.LifeTimeRemaining)
                .HasDefaultValueSql("((0))")
                .HasComment("Thời gian sử dụng còn lại (Với TSCĐ đầu kỳ)")
                .HasColumnType("decimal(8, 4)");
            entity.Property(e => e.LifeTimeRemainingInMonth)
                .HasDefaultValueSql("((0))")
                .HasComment("Thời gian sử dụng còn lại (Với TSCĐ đầu kỳ) (Tháng)")
                .HasColumnType("decimal(8, 4)");
            entity.Property(e => e.LifeTimeRemainingUnit).HasComment("Đơn vị tính thời gian sử dụng CÒN LẠI gồm 2 giá trị(0=Tháng;1=Năm)");
            entity.Property(e => e.LifeTimeUnit).HasComment("Đơn vị tính thời gian sử dụng gồm 2 giá trị(0=Tháng;1=Năm)");
            entity.Property(e => e.MadeIn)
                .HasMaxLength(128)
                .HasComment("Nước sản xuất");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(128)
                .HasComment("Nhà sản xuất");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.MonthlyDepreciationAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị khấu hao tháng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MonthlyDepreciationAmountByIncomeTax)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị tính khấu hao THÁNG theo luật thuế TNDN")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MyReportDelivery).HasMaxLength(255);
            entity.Property(e => e.OrgPrice)
                .HasDefaultValueSql("((0))")
                .HasComment("Nguyên giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrgPriceAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nguyên giá");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PricePurchase).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ProductionYear).HasComment("Năm sản xuất");
            entity.Property(e => e.Quality)
                .HasDefaultValueSql("((0))")
                .HasComment("Chất lượng (0=Hoạt động tốt;1=Hỏng)");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((1))")
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ ghi tăng (ngày hạch toán)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefId)
                .HasComment("Bổ sung để tiện việc ghi sổ (bằng FixedAssetID)")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ ghi tăng");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ. Chỉ ra TSCĐ được ghi tăng năm nay hay năm trước");
            entity.Property(e => e.RemainingAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị còn lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RemainingAmountByIncomeTax)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị còn lại tính khấu hao theo luật thuế TNDN")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SerialNumber)
                .HasMaxLength(64)
                .HasComment("Số hiệu");
            entity.Property(e => e.Source)
                .HasMaxLength(100)
                .HasComment("Nguồn gốc hình thành");
            entity.Property(e => e.State)
                .HasDefaultValueSql("((0))")
                .HasComment("Tình trạng ghi tăng (0=Mới;1=Cũ)");
            entity.Property(e => e.TechnicalDocument).HasMaxLength(255);
            entity.Property(e => e.TestRunCost).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TransportationCost).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.VendorAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ");
            entity.Property(e => e.VendorName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp");
            entity.Property(e => e.YearlyDepreciationAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị khấu hao năm")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_FixedAsset_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.FixedAssetBranches)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.DepreciationAccountNavigation).WithMany(p => p.FixedAssetDepreciationAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DepreciationAccount);

            entity.HasOne(d => d.FixedAssetCategory).WithMany(p => p.FixedAssets)
                .HasForeignKey(d => d.FixedAssetCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FixedAsset_FixedAssetCategory");

            entity.HasOne(d => d.OrgPriceAccountNavigation).WithMany(p => p.FixedAssetOrgPriceAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.OrgPriceAccount)
                .HasConstraintName("FK_FixedAsset_Account_OrgAccount");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.FixedAssetOrganizationUnits)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_FixedAsset_OrganizationUnit_DepartmentID");
        });

        modelBuilder.Entity<FixedAssetAttachment>(entity =>
        {
            entity.HasKey(e => e.FixedAssetDetailId);

            entity.ToTable("FixedAssetAttachment", tb => tb.HasComment("Bảng chứa các đính kèm TSCĐ"));

            entity.Property(e => e.FixedAssetDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("FixedAssetDetailID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.FileContent).HasComment("Nội dung tệp");
            entity.Property(e => e.FileExtention).HasMaxLength(50);
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasComment("Tên tài liệu");
            entity.Property(e => e.FileSize).HasComment("Độ lớn");
            entity.Property(e => e.FixedAssetId)
                .HasComment("FK Tài sản cố định")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FixedAssetAttachments)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("FK_FixedAssetAttachment_FixedAsset");
        });

        modelBuilder.Entity<FixedAssetCategory>(entity =>
        {
            entity.ToTable("FixedAssetCategory", tb => tb.HasComment("Loại tài sản cố định"));

            entity.HasIndex(e => e.FixedAssetCategoryCode, "IX_FixedAssetCategoryCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.FixedAssetCategoryId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Loại Tài sản cố định")
                .HasColumnName("FixedAssetCategoryID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DepreciationAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản khấu hao");
            entity.Property(e => e.FixedAssetCategoryCode)
                .HasMaxLength(20)
                .HasComment("Mã loại TSCĐ");
            entity.Property(e => e.FixedAssetCategoryName)
                .HasMaxLength(128)
                .HasComment("Tên loại TSCĐ");
            entity.Property(e => e.Grade)
                .HasDefaultValueSql("((1))")
                .HasComment("Cấp bậc");
            entity.Property(e => e.Inactive)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsParent).HasComment("Là cha");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrgPriceAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nguyên giá");
            entity.Property(e => e.ParentId)
                .HasComment("Mã cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<FixedAssetDetail>(entity =>
        {
            entity.ToTable("FixedAssetDetail", tb => tb.HasComment("Bộ phận cấu thành"));

            entity.Property(e => e.FixedAssetDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("FixedAssetDetailID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả chi tiết các thành phần");
            entity.Property(e => e.FixedAssetId)
                .HasComment("FK Tài sản cố định")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("thứ tự");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");
            entity.Property(e => e.WarrantyTime)
                .HasMaxLength(50)
                .HasComment("Thời hạn bảo hành");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FixedAssetDetails)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("FK_FixedAssetDetail_FixedAsset");
        });

        modelBuilder.Entity<FixedAssetDetailAccessory>(entity =>
        {
            entity.HasKey(e => e.FixedAssetDetailId).HasName("PK_FixedAssetDetailAccessory1");

            entity.ToTable("FixedAssetDetailAccessory", tb => tb.HasComment("Phụ kiện, dụng cụ kèm theo"));

            entity.Property(e => e.FixedAssetDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("FixedAssetDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Giá trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Tên, quy cách, dụng cụ, phụ tùng");
            entity.Property(e => e.FixedAssetId)
                .HasComment("FK Tài sản cố định")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("thứ tự");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FixedAssetDetailAccessories)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("FK_FixedAssetDetailAccessory_FixedAsset1");
        });

        modelBuilder.Entity<FixedAssetDetailAllocation>(entity =>
        {
            entity.HasKey(e => e.FixedAssetDetailId);

            entity.ToTable("FixedAssetDetailAllocation");

            entity.Property(e => e.FixedAssetDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("FixedAssetDetailID");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ (%)")
                .HasColumnType("decimal(9, 4)");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.FixedAssetId)
                .HasComment("FK")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.ObjectId)
                .HasComment("ID của đối tượng phân bổ")
                .HasColumnName("ObjectID");
            entity.Property(e => e.ObjectType).HasComment("Loại đối tượng. 0: ĐT tập hợp CP; 1: Công trình; 2: Đơn hàng; 3: Hợp đồng; 4: Đơn vị");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Số thứ tự");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.FixedAssetDetailAllocations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_FixedAssetDetailAllocation_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.FixedAssetDetailAllocations)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_FixedAssetDetailAllocation_ExpenseItem");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FixedAssetDetailAllocations)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("FK_FixedAssetDetailAllocation_FixedAsset");

            entity.HasOne(d => d.ListItem).WithMany(p => p.FixedAssetDetailAllocations)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_FixedAssetDetailAllocation_ListItem");
        });

        modelBuilder.Entity<FixedAssetDetailBoardDelivery>(entity =>
        {
            entity.HasKey(e => e.FixedAssetDetailId);

            entity.ToTable("FixedAssetDetailBoardDelivery");

            entity.Property(e => e.FixedAssetDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("FixedAssetDetailID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.FixedAssetId).HasColumnName("FixedAssetID");
            entity.Property(e => e.Position).HasMaxLength(128);
            entity.Property(e => e.Representative).HasMaxLength(128);

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FixedAssetDetailBoardDeliveries)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("FK_FixedAssetDetailBoardDelivery_FixedAsset");
        });

        modelBuilder.Entity<FixedAssetDetailSource>(entity =>
        {
            entity.HasKey(e => e.FixedAssetDetailId);

            entity.ToTable("FixedAssetDetailSource", tb => tb.HasComment("Chi tiết TSCĐ - Nguồn gốc hình thành"));

            entity.Property(e => e.FixedAssetDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("FixedAssetDetailID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.FixedAssetId)
                .HasComment("FK")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID của chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefType).HasComment("Loại chúng từ");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Số thứ tự");

            entity.HasOne(d => d.FixedAsset).WithMany(p => p.FixedAssetDetailSources)
                .HasForeignKey(d => d.FixedAssetId)
                .HasConstraintName("FK_FixedAssetDetailSource_FixedAsset");
        });

        modelBuilder.Entity<FixedAssetLedger>(entity =>
        {
            entity.ToTable("FixedAssetLedger", tb => tb.HasComment("Sổ TSCĐ"));

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_FixedAssetLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_FixedAssetLedger_RefID");

            entity.Property(e => e.FixedAssetLedgerId)
                .HasComment("PK - Sổ TSCĐ")
                .HasColumnName("FixedAssetLedgerID");
            entity.Property(e => e.AccumDepreciationAmount)
                .HasComment("Giá trị hao mòn lũy kế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.DepreciationAccount)
                .HasMaxLength(20)
                .HasComment("TK hao mòn");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Giá trị hao mòn hiện thời")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DepreciationRateMonth)
                .HasComment("Tỷ lệ khấu hao tháng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffAccumDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffOrgPriceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FixedAssetCategoryId)
                .HasComment("Mã nhóm tài sản")
                .HasColumnName("FixedAssetCategoryID");
            entity.Property(e => e.FixedAssetCode)
                .HasMaxLength(25)
                .HasComment("Mã tài sản");
            entity.Property(e => e.FixedAssetId)
                .HasComment("ID của tài sản")
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.FixedAssetName)
                .HasMaxLength(128)
                .HasComment("Tên tài sản");
            entity.Property(e => e.IsPostToManagementBook).HasComment("Trạng thái ghi vào vào sổ tài chính");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Có cần cập nhật dữ liệu từ các bảng dư thừa sang không, 0: không, 1: có. Sau khi cập nhật xong thì thiết lập thông tin này về =0");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master");
            entity.Property(e => e.LifeTimeInMonth)
                .HasComment("Tổng số tháng sử dụng của tài sản (Vòng đời của 1 tài sản luôn)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LifeTimeRemainingInMonth)
                .HasComment("Thời gian sử dụng còn lại (thời gian sử dụng hiện thời)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MonthlyDepreciationAmount)
                .HasComment("Giá trị khấu hao tháng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MonthlyDepreciationAmountByIncomeTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MonthlyDepreciationAmountOnDepreciation).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrgPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrgPriceAccount).HasMaxLength(20);
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OriginDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("PK detail chứng từ")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Thứ tự các chứng từ nhập trước, nhập sau");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.RemainingAmount)
                .HasComment("Giá trị còn lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SumDiffAccumDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SumDiffDepreciationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SumDiffLifeTime).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SumDiffRemainingAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDepreciationAmount)
                .HasComment("Tổng giá trị tính khấu hao")
                .HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<FormListParameter>(entity =>
        {
            entity.ToTable("FormListParameter");

            entity.Property(e => e.FormListParameterId)
                .ValueGeneratedNever()
                .HasColumnName("FormListParameterID");
            entity.Property(e => e.FormName).HasMaxLength(50);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<Frb03gtbussiness>(entity =>
        {
            entity.HasKey(e => new { e.RefDetailId, e.IsPostToManagementBook });

            entity.ToTable("FRB03GTBussiness");

            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.BussinessId).HasColumnName("BussinessID");
        });

        modelBuilder.Entity<Frb03opndetailByActivity>(entity =>
        {
            entity.HasKey(e => new { e.AccountNumber, e.IsDebitBalance, e.IsPostToManagementBook, e.BranchId });

            entity.ToTable("FRB03OPNDetailByActivity");

            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.IsDebitBalance).HasDefaultValueSql("((1))");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BussinessAmount).HasColumnType("money");
            entity.Property(e => e.FinancialAmount).HasColumnType("money");
            entity.Property(e => e.InvestmentAmount).HasColumnType("money");
        });

        modelBuilder.Entity<Frb03reportDetailActivity>(entity =>
        {
            entity.HasKey(e => new { e.RefDetailId, e.IsPostToManagementBook });

            entity.ToTable("FRB03ReportDetailActivity", tb => tb.HasComment("Bảng lưu trữ việc chọn hoạt động cho các chứng từ (báo cáo B03)"));

            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của chứng từ gốc")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ActivityId)
                .HasComment("Hoạt động. 0=Hoạt động kinh doanh; 1= Hoạt động đầu tư; 2= Hoạt động tài chính")
                .HasColumnName("ActivityID");
        });

        modelBuilder.Entity<Frb09dnnreportDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId).HasName("PK_RPT_B09_DNN_ReportDetail");

            entity.ToTable("FRB09DNNReportDetail");

            entity.HasIndex(e => e.RefId, "IX_FRB09DNNReportDetail_RefID");

            entity.Property(e => e.ReportDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportDetailID");
            entity.Property(e => e.BuildingEasementOpeningAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Building_Easement_OpeningAmount");
            entity.Property(e => e.ClosingQuantity).HasColumnType("decimal(23, 8)");
            entity.Property(e => e.Description1).HasComment("Mã phẩm chất, quy cách ");
            entity.Property(e => e.Description2).HasComment("Đơn vị tính");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.MachineIssueRightIncrementAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Machine_IssueRight_IncrementAmount");
            entity.Property(e => e.ManagementToolSoftwareClosingAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("ManagementTool_Software_ClosingAmount");
            entity.Property(e => e.OpeningQuantity).HasColumnType("decimal(23, 8)");
            entity.Property(e => e.OtherAssetAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.OtherFormulaAmount)
                .HasComment("Tiền của cột công thức OtherFormula")
                .HasColumnType("decimal(22, 4)");
            entity.Property(e => e.Part).HasMaxLength(20);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("thứ tự sắp xếp ");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.TransportLicenceDecrementAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Transport_Licence_DecrementAmount");

            entity.HasOne(d => d.Ref).WithMany(p => p.Frb09dnnreportDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FRB09DNNReportDetail_FRReportList");
        });

        modelBuilder.Entity<Frb09dnntemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK_RPT_B09_DNN");

            entity.ToTable("FRB09DNNTemplate");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.BuildingEasementOpening).HasColumnName("Building_Easement_Opening");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.MachineIssueRightIncrement).HasColumnName("Machine_IssueRight_Increment");
            entity.Property(e => e.ManagementToolSoftwareClosing).HasColumnName("ManagementTool_Software_Closing");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherFormula).HasComment("cột công thức OtherFormula");
            entity.Property(e => e.Part).HasMaxLength(10);
            entity.Property(e => e.TransportLicenceDecrement).HasColumnName("Transport_Licence_Decrement");
        });

        modelBuilder.Entity<Frb09dnntemplateDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRB09DNNTemplateDefault");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.BuildingEasementOpening).HasColumnName("Building_Easement_Opening");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.MachineIssueRightIncrement).HasColumnName("Machine_IssueRight_Increment");
            entity.Property(e => e.ManagementToolSoftwareClosing).HasColumnName("ManagementTool_Software_Closing");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherFormula).HasComment("cột công thức OtherFormula");
            entity.Property(e => e.Part).HasMaxLength(10);
            entity.Property(e => e.TransportLicenceDecrement).HasColumnName("Transport_Licence_Decrement");
        });

        modelBuilder.Entity<Frb09dnreportDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId).HasName("PK_RPT_B09_ReportDetail");

            entity.ToTable("FRB09DNReportDetail");

            entity.HasIndex(e => e.RefId, "IX_FRB09DNReportDetail_RefID");

            entity.Property(e => e.ReportDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportDetailID");
            entity.Property(e => e.BuildingAndRealtyAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.ClosingBalanceAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.ClosingQuantity).HasColumnType("decimal(23, 8)");
            entity.Property(e => e.Description1).HasMaxLength(255);
            entity.Property(e => e.Description2).HasMaxLength(255);
            entity.Property(e => e.EquipmentIssueRightTotalPayAndCapitalAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Equipment_IssueRight_TotalPayAndCapitalAmount");
            entity.Property(e => e.EquipmentTrademarkPayDebitThisYearAndOtherCapitalAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Equipment_Trademark_PayDebitThisYearAndOtherCapitalAmount");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.IntFaOrtherIntFaPayDebitLastYearAndDiffExchangeRateAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("IntFA_OrtherIntFA_PayDebitLastYearAndDiffExchangeRateAmount");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.LicensePayInterestLastYearAndRevalueFaamount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("License_PayInterestLastYearAndRevalueFAAmount");
            entity.Property(e => e.OpeningBalanceAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.OpeningQuantity).HasColumnType("decimal(23, 8)");
            entity.Property(e => e.OtherFaSoftwareTotalPayLastYearAndTreasuryShareAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("OtherFA_Software_TotalPayLastYearAndTreasuryShareAmount");
            entity.Property(e => e.Part).HasMaxLength(20);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.TransportCopyRightPayInterestAndDecreaseAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Transport_CopyRight_PayInterestAndDecreaseAmount");

            entity.HasOne(d => d.Ref).WithMany(p => p.Frb09dnreportDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FRB09DNReportDetail_FRReportList");
        });

        modelBuilder.Entity<Frb09dnsnreportDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId);

            entity.ToTable("FRB09DNSNReportDetail");

            entity.Property(e => e.ReportDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportDetailID");
            entity.Property(e => e.BuildingEasementOpeningAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Building_Easement_OpeningAmount");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.MachineIssueRightIncrementAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Machine_IssueRight_IncrementAmount");
            entity.Property(e => e.ManagementToolSoftwareClosingAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("ManagementTool_Software_ClosingAmount");
            entity.Property(e => e.Part).HasMaxLength(20);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("thứ tự sắp xếp ");
            entity.Property(e => e.TransportLicenceDecrementAmount)
                .HasColumnType("decimal(25, 4)")
                .HasColumnName("Transport_Licence_DecrementAmount");

            entity.HasOne(d => d.Ref).WithMany(p => p.Frb09dnsnreportDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FRB09DNSNReportDetail_FRReportList");
        });

        modelBuilder.Entity<Frb09dnsntemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRB09DNSNTemplate");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.BuildingEasementOpening)
                .HasComment("Đầu năm")
                .HasColumnName("Building_Easement_Opening");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Nội dung");
            entity.Property(e => e.Formula)
                .HasComment("Thiết lập công thức cho các cột")
                .HasColumnType("xml");
            entity.Property(e => e.FormulaType).HasComment("Loại chỉ tiêu: 0-Chi tiết, 1- Tổng hợp, 2- Tiêu đề, 3- Chú thích");
            entity.Property(e => e.Hidden).HasComment("Không in");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.MachineIssueRightIncrement)
                .HasComment("Số phải nộp trong năm")
                .HasColumnName("Machine_IssueRight_Increment");
            entity.Property(e => e.ManagementToolSoftwareClosing)
                .HasComment("Cuối năm")
                .HasColumnName("ManagementTool_Software_Closing");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Part)
                .HasMaxLength(20)
                .HasComment("Thuộc phần");
            entity.Property(e => e.PartInTab).HasComment("Tab");
            entity.Property(e => e.TransportLicenceDecrement)
                .HasComment("Số đã thực nộp trong năm")
                .HasColumnName("Transport_Licence_Decrement");
        });

        modelBuilder.Entity<Frb09dnsntemplateDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRB09DNSNTemplateDefault");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.BuildingEasementOpening)
                .HasComment("Đầu năm")
                .HasColumnName("Building_Easement_Opening");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Nội dung");
            entity.Property(e => e.Formula)
                .HasComment("Thiết lập công thức cho các cột")
                .HasColumnType("xml");
            entity.Property(e => e.FormulaType).HasComment("Loại chỉ tiêu: 0-Chi tiết, 1- Tổng hợp, 2- Tiêu đề, 3- Chú thích");
            entity.Property(e => e.Hidden).HasComment("Không in");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.MachineIssueRightIncrement)
                .HasComment("Số phải nộp trong năm")
                .HasColumnName("Machine_IssueRight_Increment");
            entity.Property(e => e.ManagementToolSoftwareClosing)
                .HasComment("Cuối năm")
                .HasColumnName("ManagementTool_Software_Closing");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Part)
                .HasMaxLength(20)
                .HasComment("Thuộc phần");
            entity.Property(e => e.PartInTab).HasComment("Tab");
            entity.Property(e => e.TransportLicenceDecrement)
                .HasComment("Số đã thực nộp trong năm")
                .HasColumnName("Transport_Licence_Decrement");
        });

        modelBuilder.Entity<Frb09dntemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK_RPT_B09_DN");

            entity.ToTable("FRB09DNTemplate");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EquipmentIssueRightTotalPayAndCapital).HasColumnName("Equipment_IssueRight_TotalPayAndCapital");
            entity.Property(e => e.EquipmentTrademarkPayDebitThisYearAndOtherCapital).HasColumnName("Equipment_Trademark_PayDebitThisYearAndOtherCapital");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.IntFaOrtherIntFaPayDebitLastYearAndDiffExchangeRate).HasColumnName("IntFA_OrtherIntFA_PayDebitLastYearAndDiffExchangeRate");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.LicensePayInterestLastYearAndRevalueFa).HasColumnName("License_PayInterestLastYearAndRevalueFA");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherFaSoftwareTotalPayLastYearAndTreasuryShare).HasColumnName("OtherFA_Software_TotalPayLastYearAndTreasuryShare");
            entity.Property(e => e.Part).HasMaxLength(20);
            entity.Property(e => e.TransportCopyRightPayInterestAndDecrease).HasColumnName("Transport_CopyRight_PayInterestAndDecrease");
        });

        modelBuilder.Entity<Frb09dntemplateDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRB09DNTemplateDefault");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EquipmentIssueRightTotalPayAndCapital).HasColumnName("Equipment_IssueRight_TotalPayAndCapital");
            entity.Property(e => e.EquipmentTrademarkPayDebitThisYearAndOtherCapital).HasColumnName("Equipment_Trademark_PayDebitThisYearAndOtherCapital");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.IntFaOrtherIntFaPayDebitLastYearAndDiffExchangeRate).HasColumnName("IntFA_OrtherIntFA_PayDebitLastYearAndDiffExchangeRate");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(1000);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(1000);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(1000);
            entity.Property(e => e.LicensePayInterestLastYearAndRevalueFa).HasColumnName("License_PayInterestLastYearAndRevalueFA");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherFaSoftwareTotalPayLastYearAndTreasuryShare).HasColumnName("OtherFA_Software_TotalPayLastYearAndTreasuryShare");
            entity.Property(e => e.Part).HasMaxLength(20);
            entity.Property(e => e.TransportCopyRightPayInterestAndDecrease).HasColumnName("Transport_CopyRight_PayInterestAndDecrease");
        });

        modelBuilder.Entity<FrcostRevenueAndInterest>(entity =>
        {
            entity.HasKey(e => e.ItemIndex).HasName("PK_FRCostRevenueAndInterest_1");

            entity.ToTable("FRCostRevenueAndInterest", tb => tb.HasComment("BẢNG LƯU TRỮ SỐ LIỆU BÁO CÁO DOANH THU CHI PHÍ VÀ PHÂN PHỐI LÃI\n"));

            entity.Property(e => e.ItemIndex).HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .HasComment("Tên chỉ tiêu");
            entity.Property(e => e.Rate)
                .HasComment("Tỷ lệ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrderDisplay).HasMaxLength(20);
        });

        modelBuilder.Entity<Frf01reportDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId).HasName("PK_RPT_F01_ReportDetail");

            entity.ToTable("FRF01ReportDetail");

            entity.HasIndex(e => e.RefId, "IX_FRF01ReportDetail_RefID");

            entity.Property(e => e.ReportDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportDetailID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.AccountName).HasMaxLength(255);
            entity.Property(e => e.AccountNameChinese).HasMaxLength(255);
            entity.Property(e => e.AccountNameEnglish).HasMaxLength(255);
            entity.Property(e => e.AccountNameKorean).HasMaxLength(255);
            entity.Property(e => e.AccountNumber).HasMaxLength(50);
            entity.Property(e => e.ClosingCreditAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.ClosingDebitAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.DebitAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.OpeningCreditAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.OpeningDebitAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.Frf01reportDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_FRF01ReportDetail_FRReportList1");
        });

        modelBuilder.Entity<Frf04situationOfCooperativeMember>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRF04SituationOfCooperativeMember", tb => tb.HasComment("BÁO CÁO TỔNG HỢP TÌNH HÌNH CHO THÀNH VIÊN VAY VỐN CỦA HTX và BÁO CÁO TÌNH HÌNH TĂNG, GIẢM VỐN CHỦ SỞ HỮU CỦA HỢP TÁC XÃ\n"));

            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemID");
            entity.Property(e => e.Breed).HasComment("Chăn nuôi gia súc/Số giảm trong năm (F02)");
            entity.Property(e => e.BreedPoulty).HasComment("Chăn nuôi gia cầm");
            entity.Property(e => e.Bussiness).HasComment("Kinh doanh");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Cropt).HasComment("Trồng trọt/Tăng trong năm (F02)");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.FormulaType).HasDefaultValueSql("((0))");
            entity.Property(e => e.Handmade).HasComment("Thủ công");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Other).HasComment("Khác");
            entity.Property(e => e.Processing).HasComment("Chế biến/Cuối năm (F02)");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.Total).HasComment("Tổng số/Đầu năm (F02)");
        });

        modelBuilder.Entity<Frf04situationOfCooperativeMemberDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRF04SituationOfCooperativeMemberDefault", tb => tb.HasComment("BÁO CÁO TỔNG HỢP TÌNH HÌNH CHO THÀNH VIÊN VAY VỐN CỦA HTX"));

            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemID");
            entity.Property(e => e.Breed).HasComment("Chăn nuôi gia súc/Số giảm trong năm (F02)");
            entity.Property(e => e.BreedPoulty).HasComment("Chăn nuôi gia cầm");
            entity.Property(e => e.Bussiness).HasComment("Kinh doanh");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Cropt).HasComment("Trồng trọt/Tăng trong năm (F02)");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.FormulaType).HasDefaultValueSql("((0))");
            entity.Property(e => e.Handmade).HasComment("Thủ công");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Other).HasComment("Khác");
            entity.Property(e => e.Processing).HasComment("Chế biến/Cuối năm (F02)");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.Total).HasComment("Tổng số/Đầu năm (F02)");
        });

        modelBuilder.Entity<Frf04situationOfCooperativeMemberDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId);

            entity.ToTable("FRF04SituationOfCooperativeMemberDetail");

            entity.HasIndex(e => e.RefId, "IX_FRF04SituationOfCooperativeMemberDetail_RefID");

            entity.Property(e => e.ReportDetailId)
                .ValueGeneratedNever()
                .HasColumnName("ReportDetailID");
            entity.Property(e => e.BreedAmount)
                .HasComment("Chăn nuôi/Giảm trong năm (F02)")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.BreedPoultyAmount)
                .HasComment("Chăn nuôi gia cầm")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.BussinessAmount)
                .HasComment("Kinh doanh")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.CroptAmount)
                .HasComment("Trồng trọt/Tăng trong năm (F02)")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.HandmadeAmount)
                .HasComment("Thủ công")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.OtherAmount)
                .HasComment("Khác")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.ProcessingAmount)
                .HasComment("Chế biến/Cuối năm (F02)")
                .HasColumnType("decimal(25, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportType).HasMaxLength(100);
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số/Đầu năm (F02)")
                .HasColumnType("decimal(25, 4)");

            entity.HasOne(d => d.Ref).WithMany(p => p.Frf04situationOfCooperativeMemberDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FRF04SituationOfCooperativeMemberDetail_FRReportList");
        });

        modelBuilder.Entity<FrobligationToGovTemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRObligationToGovTemplate");

            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.FormulaType).HasDefaultValueSql("((0))");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<FrobligationToGovTemplateDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRObligationToGovTemplateDefault");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(1000);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Fromeinvoice>(entity =>
        {
            entity.HasKey(e => e.TransactionId);

            entity.ToTable("FROMEInvoice");

            entity.HasIndex(e => e.RefId, "IX_FROMEInvoice_RefID");

            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectTel).HasMaxLength(150);
            entity.Property(e => e.BankAccount).HasMaxLength(100);
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.Buyer).HasMaxLength(255);
            entity.Property(e => e.BuyerFullName).HasMaxLength(255);
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(5)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DeletedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedReason).HasMaxLength(255);
            entity.Property(e => e.DeletedRefNo).HasMaxLength(25);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Eid).HasColumnName("EID");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InternalCommand).HasMaxLength(255);
            entity.Property(e => e.InternalCommandOwner).HasMaxLength(255);
            entity.Property(e => e.InternalJournalMemo).HasMaxLength(255);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(25);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvTemplateNo123).HasMaxLength(25);
            entity.Property(e => e.InvTypeCode).HasMaxLength(25);
            entity.Property(e => e.InvoiceCode).HasMaxLength(100);
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NewTypeStatus).HasComment("1: hóa đơn thêm mới, 2: hóa đơn bị hủy, 7: hóa đơn bị thay thế, 8: hóa đơn bị điều chỉnh");
            entity.Property(e => e.OrgId)
                .HasMaxLength(50)
                .HasColumnName("OrgID");
            entity.Property(e => e.OrgInvDate).HasColumnType("datetime");
            entity.Property(e => e.OrgInvNo).HasMaxLength(25);
            entity.Property(e => e.OrgInvSeries).HasMaxLength(20);
            entity.Property(e => e.OrgInvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.OtherTerm).HasMaxLength(255);
            entity.Property(e => e.Payer).HasMaxLength(255);
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.Receiver).HasMaxLength(255);
            entity.Property(e => e.ReceiverAddress).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefIdsainvoiceDelete).HasColumnName("RefIDSAInvoiceDelete");
            entity.Property(e => e.RefTypeSainvoiceDelete).HasColumnName("RefTypeSAInvoiceDelete");
            entity.Property(e => e.SellerAddress).HasMaxLength(255);
            entity.Property(e => e.ShippingAddress).HasMaxLength(255);
            entity.Property(e => e.StockInAddress).HasMaxLength(255);
            entity.Property(e => e.StockInFullName).HasMaxLength(255);
            entity.Property(e => e.StockInLegalName).HasMaxLength(255);
            entity.Property(e => e.StockInTaxCode).HasMaxLength(50);
            entity.Property(e => e.StockOutAddress).HasMaxLength(255);
            entity.Property(e => e.StockOutFullName).HasMaxLength(255);
            entity.Property(e => e.SupplierName).HasMaxLength(400);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalSaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
            entity.Property(e => e.Transport).HasMaxLength(255);
            entity.Property(e => e.TransportContractCode).HasMaxLength(255);
            entity.Property(e => e.TransporterName).HasMaxLength(255);
        });

        modelBuilder.Entity<FromeinvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("FROMEInvoiceDetail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.ChassisNumber).HasMaxLength(50);
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionsTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DeductionsTaxAmountOC");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EngineNumber).HasMaxLength(50);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InventoryItemCode).HasMaxLength(50);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
            entity.Property(e => e.UnitName).HasMaxLength(255);
            entity.Property(e => e.UnitPrice)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatrate406)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate406");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.Transaction).WithMany(p => p.FromeinvoiceDetails)
                .HasForeignKey(d => d.TransactionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FROMEInvoiceDetail_FROMEInvoice");
        });

        modelBuilder.Entity<FrreportDetail>(entity =>
        {
            entity.HasKey(e => e.ReportDetailId);

            entity.ToTable("FRReportDetail");

            entity.HasIndex(e => e.RefId, "IX_FRReportDetail_RefID");

            entity.Property(e => e.ReportDetailId)
                .ValueGeneratedNever()
                .HasColumnName("ReportDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.OtherAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OtherPrevAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PrevAmount).HasColumnType("decimal(25, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportType).HasMaxLength(100);

            entity.HasOne(d => d.Ref).WithMany(p => p.FrreportDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FRReportDetail_FRReportList");
        });

        modelBuilder.Entity<FrreportList>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_RPT_FinancialReport");

            entity.ToTable("FRReportList", tb => tb.HasTrigger("trg_FRReportList_DataChanged"));

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AuditorCommentCode).HasMaxLength(20);
            entity.Property(e => e.AuditorCommentName).HasMaxLength(255);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BussinessRespondActivityContinue)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CurrencyName).HasMaxLength(128);
            entity.Property(e => e.DirectorName).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ForeignName).HasMaxLength(128);
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IsB01bDnn).HasColumnName("IsB01bDNN");
            entity.Property(e => e.IsGetInfoFromLastFrreport).HasColumnName("IsGetInfoFromLastFRReport");
            entity.Property(e => e.IsIncludedB03Indirect)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsIncludedB03_Indirect");
            entity.Property(e => e.IsSimilarBranch).HasDefaultValueSql("((1))");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PeriodName).HasMaxLength(100);
            entity.Property(e => e.ReportCreatedBy).HasMaxLength(128);
            entity.Property(e => e.ReportCreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportName).HasMaxLength(255);
            entity.Property(e => e.ToDate).HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.FrreportLists)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_FRReportList_OrganizationUnit");
        });

        modelBuilder.Entity<Frtemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRTemplate");

            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemID");
            entity.Property(e => e.AccountingSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.FormulaType).HasDefaultValueSql("((0))");
            entity.Property(e => e.Hidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemIndex).HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<FrtemplateDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRTemplateDefault");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<FrtemplateDrilldownDetail>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("FRTemplateDrilldownDetail");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.AccountNumberSort).HasMaxLength(25);
            entity.Property(e => e.ColumnsAmountfilter).HasMaxLength(50);
            entity.Property(e => e.CorrespondingAccountNumberfilter).HasMaxLength(25);
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.Formula).HasColumnType("xml");
            entity.Property(e => e.ItemCode).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<GeneralLedger>(entity =>
        {
            entity.ToTable("GeneralLedger", tb => tb.HasTrigger("trg_GeneralLedger_DataChanged"));

            entity.HasIndex(e => new { e.AccountNumber, e.PostedDate }, "IX_GeneralLedger_AccountNumber");

            entity.HasIndex(e => e.AccountObjectId, "IX_GeneralLedger_AccountObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_GeneralLedger_BranchID").HasFillFactor(90);

            entity.HasIndex(e => e.ContractId, "IX_GeneralLedger_ContractID").HasFillFactor(90);

            entity.HasIndex(e => e.EmployeeId, "IX_GeneralLedger_EmployeeID").HasFillFactor(90);

            entity.HasIndex(e => e.ExpenseItemId, "IX_GeneralLedger_ExpenseItemID").HasFillFactor(90);

            entity.HasIndex(e => e.InvRefId, "IX_GeneralLedger_InvRefID");

            entity.HasIndex(e => e.InventoryItemId, "IX_GeneralLedger_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_GeneralLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => e.JobId, "IX_GeneralLedger_JobID").HasFillFactor(90);

            entity.HasIndex(e => e.LoanagreementId, "IX_GeneralLedger_LOANAgreementID");

            entity.HasIndex(e => e.ListItemId, "IX_GeneralLedger_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitId, "IX_GeneralLedger_OrganizationUnitID").HasFillFactor(90);

            entity.HasIndex(e => e.PucontractId, "IX_GeneralLedger_PUContractID").HasFillFactor(90);

            entity.HasIndex(e => new { e.PostedDate, e.AccountNumber }, "IX_GeneralLedger_PostedDate");

            entity.HasIndex(e => e.ProjectWorkId, "IX_GeneralLedger_ProjectWorkID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefDetailId, e.IsPostToManagementBook, e.EntryType }, "IX_GeneralLedger_RefDetailID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook, e.BranchId }, "IX_GeneralLedger_RefID");

            entity.HasIndex(e => e.RefType, "IX_GeneralLedger_RefType").HasFillFactor(90);

            entity.HasIndex(e => e.RefDate, "IX_GeneralLedger_WithContract").HasFilter("([ContractID] IS NULL)");

            entity.Property(e => e.GeneralLedgerId).HasColumnName("GeneralLedgerID");
            entity.Property(e => e.AccountName).HasMaxLength(128);
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount).HasMaxLength(50);
            entity.Property(e => e.AccountObjectBankName).HasMaxLength(128);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectNameDi)
                .HasMaxLength(400)
                .HasColumnName("AccountObjectNameDI");
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountNumber).HasMaxLength(50);
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutExchangeRateLedger).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContactName).HasMaxLength(400);
            entity.Property(e => e.ContractCode).HasMaxLength(255);
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.ContractName).HasMaxLength(255);
            entity.Property(e => e.ContractSignDate).HasColumnType("datetime");
            entity.Property(e => e.CorrespondingAccountNumber).HasMaxLength(20);
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeCode).HasMaxLength(25);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName).HasMaxLength(128);
            entity.Property(e => e.EntryType).HasDefaultValueSql("((1))");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvRefId).HasColumnName("InvRefID");
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InventoryItemCode).HasMaxLength(50);
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.IsPostedForCashOutDiff).HasComment("0: Dòng định khoản thường; 1: Dòng xử lý CLTG tiền");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceOc)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("MainUnitPriceOC");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermCode).HasMaxLength(20);
            entity.Property(e => e.PaymentTermId).HasColumnName("PaymentTermID");
            entity.Property(e => e.PaymentTermName).HasMaxLength(128);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractCode)
                .HasMaxLength(50)
                .HasColumnName("PUContractCode");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PucontractName)
                .HasMaxLength(255)
                .HasColumnName("PUContractName");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.PusignDate)
                .HasColumnType("datetime")
                .HasColumnName("PUSignDate");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate1).HasColumnType("datetime");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.RefNo1).HasMaxLength(20);
            entity.Property(e => e.RefNo2).HasMaxLength(20);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.StockCode).HasMaxLength(20);
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.StockName).HasMaxLength(128);
            entity.Property(e => e.UnResonableCost).HasDefaultValueSql("((0))");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceOc)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("UnitPriceOC");
        });

        modelBuilder.Entity<GlparalellVoucher>(entity =>
        {
            entity.ToTable("GLParalellVoucher");

            entity.Property(e => e.GlparalellVoucherId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("GLParalellVoucherID");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.DisplayOnBook)
                .HasDefaultValueSql("((0))")
                .HasComment("0- hiển thị trên số tài chính, 1- hiển thị trên sổ quản trị");
            entity.Property(e => e.ParalellRefNo)
                .HasMaxLength(20)
                .HasComment("RefNo của chứng từ ghi đồng thời");
            entity.Property(e => e.VoucherRefId)
                .HasComment("ID của chứng từ gốc")
                .HasColumnName("VoucherRefID");
        });

        modelBuilder.Entity<Glvoucher>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("GLVoucher", tb =>
                {
                    tb.HasComment("Chứng từ nghiệp vụ khác, Hạch toán chi phí lương, Xử lý chênh lệch tỷ giá");
                    tb.HasTrigger("trg_GLVoucher_DataChanged");
                });

            entity.HasIndex(e => e.BranchId, "IX_GLVoucher_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_GLVoucher_RefNo").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_GLVoucher_RefNoFinance");

            entity.HasIndex(e => e.RefType, "IX_GLVoucher_RefType").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AdvancedAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AdvancedAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AdvancedAmountOC");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có/Tài khoản xử lý lãi khi đánh giá ngoại tệ cuối năm");
            entity.Property(e => e.CrossEntryDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ/Tài khoản xử lý lỗ khi đánh giá ngoại tệ cuối năm");
            entity.Property(e => e.DeductionAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số thuế GTGT đầu vào được khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionAmountLastPeriod)
                .HasComment("Thuế GTGT đầu vào được khấu trừ từ kỳ trước chuyển sang")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionAmountThisPeriod)
                .HasComment("Thuế GTGT đầu vào được khấu trừ của kỳ này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeptStatus)
                .HasDefaultValueSql("((0))")
                .HasComment("Tình trạng đòi nợ: (0=nợ bình thường;1=Nợ khó đòi;2=Nợ không thể đòi)");
            entity.Property(e => e.DiffAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiffAmountOC");
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EinvoiceType).HasColumnName("EInvoiceType");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Month).HasComment("Tháng tính tỷ giá xuất quỹ");
            entity.Property(e => e.OutputAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số thuế GTGT đầu ra dùng để hiển thị trên chứng từ khấu trừ thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ParalellRefId).HasColumnName("ParalellRefID");
            entity.Property(e => e.PeriodTypeVatdeduction).HasColumnName("PeriodTypeVATDeduction");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReceiptType).HasDefaultValueSql("((0))");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("0");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("TransactionID");
            entity.Property(e => e.Year).HasComment("Năm tính tỷ giá xuất quỹ");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.GlvoucherAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_GLVoucher_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Glvouchers)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_GLVoucher_OrganizationUnit");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.GlvoucherCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_GLVoucher_CreditAccount");

            entity.HasOne(d => d.Currency).WithMany(p => p.Glvouchers)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_GLVoucher_CCY");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.GlvoucherDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_GLVoucher_DebitAccount");

            entity.HasOne(d => d.Employee).WithMany(p => p.GlvoucherEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_GLVoucher_EmployeeID");
        });

        modelBuilder.Entity<GlvoucherCrossEntryDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherCrossEntryDetail", tb => tb.HasTrigger("trg_GLVoucherCrossEntryDetail_DataChanged"));

            entity.HasIndex(e => e.AccountNumber, "IX_AccountNumber");

            entity.HasIndex(e => e.AccountObjectId, "IX_AccountingObjectID");

            entity.HasIndex(e => e.BranchId, "IX_BranchID");

            entity.HasIndex(e => e.DebtKeyId, "IX_GLVoucherCrossEntryDetail_DebtKeyID");

            entity.HasIndex(e => e.PayKeyId, "IX_GLVoucherCrossEntryDetail_PayKeyID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CrossDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CrossDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CrossDiscountAmountOC");
            entity.Property(e => e.CrossDiscountExchangeDiffAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebtAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebtAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebtAmountOC");
            entity.Property(e => e.DebtDescription).HasMaxLength(500);
            entity.Property(e => e.DebtDueDate).HasColumnType("datetime");
            entity.Property(e => e.DebtEmployeeId).HasColumnName("DebtEmployeeID");
            entity.Property(e => e.DebtExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebtInvDate).HasColumnType("datetime");
            entity.Property(e => e.DebtKeyId)
                .HasMaxLength(150)
                .HasComputedColumnSql("([dbo].[Func_Build_DebtKeyID]([DebtRefType],[DebtRefID],[AccountObjectID],[DebtInvNo],[DebtInvDate],[DebtDueDate],[AccountNumber]))", true)
                .HasColumnName("DebtKeyID");
            entity.Property(e => e.DebtPostedDate).HasColumnType("datetime");
            entity.Property(e => e.DebtRefDate).HasColumnType("datetime");
            entity.Property(e => e.DebtRefId).HasColumnName("DebtRefID");
            entity.Property(e => e.DebtRefNo).HasMaxLength(25);
            entity.Property(e => e.DebtableAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebtableAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebtableAmountOC");
            entity.Property(e => e.DiscountAccount).HasMaxLength(20);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.ExchangeDiffAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeDiffVoucherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.GlvoucherRefId).HasColumnName("GLVoucherRefID");
            entity.Property(e => e.IsDebtVoucherPosted).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPayVoucherPosted).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MappingCrossId).HasColumnName("MappingCrossID");
            entity.Property(e => e.PayAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PayAmountOC");
            entity.Property(e => e.PayDescription).HasMaxLength(500);
            entity.Property(e => e.PayKeyId)
                .HasMaxLength(150)
                .HasComputedColumnSql("([dbo].[Func_Build_PayKeyID]([PayRefType],[PayRefID],[AccountObjectID],[PayRefNo],[PayRefDate],[AccountNumber]))", true)
                .HasColumnName("PayKeyID");
            entity.Property(e => e.PayPostedDate).HasColumnType("datetime");
            entity.Property(e => e.PayRefDate).HasColumnType("datetime");
            entity.Property(e => e.PayRefId).HasColumnName("PayRefID");
            entity.Property(e => e.PayRefNo).HasMaxLength(25);
            entity.Property(e => e.PayableAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayableAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PayableAmountOC");
            entity.Property(e => e.PaymentTermId).HasColumnName("PaymentTermID");
            entity.Property(e => e.ReceiptType).HasDefaultValueSql("((0))");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
            entity.Property(e => e.TotalDebtableAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDebtableAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDebtableAmountOC");
            entity.Property(e => e.TotalPayableAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalPayableAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalPayableAmountOC");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.GlvoucherCrossEntryDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherCrossEntryDetail_Account");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.GlvoucherCrossEntryDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherCrossEntryDetail_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.GlvoucherCrossEntryDetails)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherCrossEntryDetail_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.GlvoucherCrossEntryDetails)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_GLVoucherCrossEntryDetail_CCY");

            entity.HasOne(d => d.GlvoucherRef).WithMany(p => p.GlvoucherCrossEntryDetails)
                .HasForeignKey(d => d.GlvoucherRefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GLVoucherCrossEntryDetail_GLVoucher");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.GlvoucherCrossEntryDetails)
                .HasForeignKey(d => d.PaymentTermId)
                .HasConstraintName("FK_GLVoucherCrossEntryDetail_PaymentTerm");
        });

        modelBuilder.Entity<GlvoucherDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetail", tb => tb.HasComment("(Bảng chi tiết)Chứng từ nghiệp vụ khác, Hạch toán chi phí lương "));

            entity.HasIndex(e => e.ContractId, "IX_GLVoucherDetail_ContractID").HasFillFactor(90);

            entity.HasIndex(e => e.CreditAccount, "IX_GLVoucherDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_GLVoucherDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.JobId, "IX_GLVoucherDetail_JobID").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_GLVoucherDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng Nợ")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền quy đổi/Số chênh lệch trên Tỷ giá xuất quỹ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục chi/thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmount)
                .HasComment("Số tiền Quy đổi theo tỷ giá xuất quỹ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountOc)
                .HasComment("Số tiền đã xuất quỹ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutAmountOC");
            entity.Property(e => e.CashOutAmountOrg)
                .HasComment("Số tiền Quy đổi đã xuất quỹ (theo chứng từ gốc)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutCurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền tỷ giá xuất quỹ")
                .HasColumnName("CashOutCurrencyID");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutExchangeRate)
                .HasComment("Tỷ giá xuất quỹ bình quân")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CreditAccountObjectId)
                .HasComment("Đối tượng Có")
                .HasColumnName("CreditAccountObjectID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.DebitBankAccount)
                .HasMaxLength(50)
                .HasComment("Số TK ngân hàng của đối tượng Nợ");
            entity.Property(e => e.DebitBankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng của đối tượng Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.IsListOnTaxDeclaration).HasComment("Kê lên tờ khai");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.LastExchangeRate)
                .HasDefaultValueSql("(($0.0000))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.NotIncludeInvoice).HasComment("Không có hóa đơn");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("Hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TaxAccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.TaxAccountObjectId).HasColumnName("TaxAccountObjectID");
            entity.Property(e => e.TaxAccountObjectName).HasMaxLength(400);
            entity.Property(e => e.TaxAccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasComment("% thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.GlvoucherDetailAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_GLVoucherDetail_AccountingObjectID");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_GLVoucherDetail_BankAccount");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_GLVoucherDetail_BudgetItem");

            entity.HasOne(d => d.CashOutCurrency).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.CashOutCurrencyId)
                .HasConstraintName("FK_GLVoucherDetail_CCY");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.GlvoucherDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_GLVoucherDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.GlvoucherDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_GLVoucherDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_GLVoucherDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.GlvoucherDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_GLVoucherDetail_Account_Credit");

            entity.HasOne(d => d.CreditAccountObject).WithMany(p => p.GlvoucherDetailCreditAccountObjects)
                .HasForeignKey(d => d.CreditAccountObjectId)
                .HasConstraintName("FK_GLVoucherDetail_CreditAccountingObjectID");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.GlvoucherDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_GLVoucherDetail_Account_Debit");

            entity.HasOne(d => d.Employee).WithMany(p => p.GlvoucherDetailEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_GLVoucherDetail_EmployeeID");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_GLVoucherDetail_ExpenseItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_GLVoucherDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_GLVoucherDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_GLVoucherDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_GLVoucherDetail_LOANAgreement");

            entity.HasOne(d => d.Order).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_GLVoucherDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_GLVoucherDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_GLVoucherDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_GLVoucherDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_GLVoucherDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetail_GLVoucher");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.GlvoucherDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<GlvoucherDetailAdvancedPayment>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailAdvancedPayment");

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailAdvancedPayment_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SettlementThistimeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SettlementThistimeAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SettlementThistimeAmountOC");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoucherRefDetailId).HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailAdvancedPayments)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailAdvancedPayment_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailDebtPayment>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_GLVoucherDetailDebtPayment_1");

            entity.ToTable("GLVoucherDetailDebtPayment", tb => tb.HasComment("Bảng detail chứa thông tin tab Chứng từ thanh toán, công nợ trên Đánh giá lại TK ngoại tệ"));

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailDebtPayment_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.DiffAmount)
                .HasComment("Chênh lệch đánh giá lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LastExchangeRate)
                .HasComment("Tỷ giá đánh giá lại gần nhất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReValueAmount)
                .HasComment("Số tiền đánh giá lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReamainingAmount)
                .HasComment("Số chưa đối trừ Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReamainingAmountOc)
                .HasComment("Số chưa đối trừ nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReamainingAmountOC");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RevalueExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherAccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản Công nợ trên chứng từ gốc");
            entity.Property(e => e.VoucherAccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("VoucherAccountObjectID");
            entity.Property(e => e.VoucherExchangeRate)
                .HasComment("Tỷ giá trên chứng từ gốc")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherInvDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherJounalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master của chứng từ gốc");
            entity.Property(e => e.VoucherPostedDate)
                .HasComment("PostedDate của chứng từ gốc")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate)
                .HasComment("RefDate của chứng từ gốc")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ gốc")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNoFinance)
                .HasMaxLength(25)
                .HasComment("RefNoFiance của chứng từ gốc");
            entity.Property(e => e.VoucherRefNoManagement)
                .HasMaxLength(25)
                .HasComment("RefNoManagement của chứng từ gốc");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ gốc");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailDebtPayments)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailDebtPayment_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailExpense>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailExpenses", tb => tb.HasComment("Bảng xác định chi phí của chứng từ: Phân bổ chi phí trả trước"));

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailExpenses_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PrepaidExpensesId)
                .HasComment("ID chi phí trả trước")
                .HasColumnName("PrepaidExpensesID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainingAmount)
                .HasComment("Số tiền chưa phân bổ")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.PrepaidExpenses).WithMany(p => p.GlvoucherDetailExpenses)
                .HasForeignKey(d => d.PrepaidExpensesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherDetailExpenses_PrepaidExpenses");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailExpenses)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailExpenses_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailExpensesAllocation>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailExpensesAllocation");

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailExpensesAllocation_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationObjectId).HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CostAccount).HasMaxLength(20);
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.PrepaidExpensesId).HasColumnName("PrepaidExpensesID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TotalAllocationAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.GlvoucherDetailExpensesAllocations)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_GLVoucherDetailExpensesAllocation_ExpenseItem");

            entity.HasOne(d => d.PrepaidExpenses).WithMany(p => p.GlvoucherDetailExpensesAllocations)
                .HasForeignKey(d => d.PrepaidExpensesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherDetailExpensesAllocation_PrepaidExpenses");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailExpensesAllocations)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailExpensesAllocation_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailForeignExchange>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailForeignExchange", tb => tb.HasComment("Bảng detail Đánh giá lại Tài khoản ngoại tệ"));

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailForeignExchange_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản đánh giá lại");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.CreditAmount)
                .HasComment("Dư có")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasComment("Dư có nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.CreditDifference)
                .HasComment("Chênh lệch")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditRevaluate)
                .HasComment("Dư nợ đánh giá lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmount)
                .HasComment("Dư nợ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasComment("Dư nợ nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.DebitDifference)
                .HasComment("Chênh lệch")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitRevaluate)
                .HasComment("Dư nợ đánh giá lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.GlvoucherDetailForeignExchanges)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherDetailForeignExchange_Account");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.GlvoucherDetailForeignExchanges)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_GLVoucherDetailForeignExchange_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.GlvoucherDetailForeignExchanges)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_GLVoucherDetailForeignExchange_BankAccount");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailForeignExchanges)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailForeignExchange_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailRevenue>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailRevenue");

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailRevenue_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PreReceiptRevenueId).HasColumnName("PreReceiptRevenueID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RemainingAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.PreReceiptRevenue).WithMany(p => p.GlvoucherDetailRevenues)
                .HasForeignKey(d => d.PreReceiptRevenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherDetailRevenue_PreReceiptRevenueID");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailRevenues)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailRevenue_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailRevenueAllocation>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailRevenueAllocation");

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailRevenueAllocation_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAccount).HasMaxLength(20);
            entity.Property(e => e.AllocationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationObjectId).HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PreReceiptRevenueId).HasColumnName("PreReceiptRevenueID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TotalAllocationAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AllocationAccountNavigation).WithMany(p => p.GlvoucherDetailRevenueAllocations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AllocationAccount)
                .HasConstraintName("FK_GLVoucherDetailRevenueAllocation_AllocationAccount");

            entity.HasOne(d => d.PreReceiptRevenue).WithMany(p => p.GlvoucherDetailRevenueAllocations)
                .HasForeignKey(d => d.PreReceiptRevenueId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLVoucherDetailRevenueAllocation_PreReceiptRevenueID");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailRevenueAllocations)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailRevenueAllocation_GLVoucher");
        });

        modelBuilder.Entity<GlvoucherDetailTax>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherDetailTax", tb => tb.HasComment("Bảng chi tiết các loại thuế của chứng từ nghiệp vụ khác"));

            entity.HasIndex(e => e.RefId, "IX_GLVoucherDetailTax_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính của bảng Detail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải/Tên vật tư");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm hàng hóa dịch vụ")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("Khóa chính của bảng Master")
                .HasColumnName("RefID");
            entity.Property(e => e.Sign).HasDefaultValueSql("((1))");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.TacareerGroupId).HasColumnName("TACareerGroupID");
            entity.Property(e => e.TurnoverAmount)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.GlvoucherDetailTaxes)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_GLVoucherDetailTax_AccountObject");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.GlvoucherDetailTaxes)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_GLVoucherDetailTax_InvestmentProject");

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherDetailTaxes)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherDetailTax_GLVoucher");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.GlvoucherDetailTaxes)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_GLVoucherDetailTax_TACareerGroup");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.GlvoucherDetailTaxes)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount)
                .HasConstraintName("FK_GLVoucherDetailTax_Account");
        });

        modelBuilder.Entity<GlvoucherList>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("GLVoucherList", tb => tb.HasComment("Danh sách chứng từ ghi sổ"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_GLVoucherList_RefNo").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((1))");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasDefaultValueSql("('')")
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ ghi sổ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ ghi sổ (Sổ tài chính)");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số tiền ")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.GlvoucherLists)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_GLVoucherList_OrganizationUnit");
        });

        modelBuilder.Entity<GlvoucherListDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("GLVoucherListDetail", tb => tb.HasComment("Chi tiết Chứng từ ghi sổ"));

            entity.HasIndex(e => e.RefId, "IX_GLVoucherListDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefDetailId, e.RefId, e.VoucherRefId, e.VoucherRefDetailId, e.VoucherRefType, e.VoucherRefDate, e.VoucherPostedDate, e.VoucherRefNo, e.DebitAccount, e.CreditAccount }, "IX_VoucherListDetail")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền chứng từ gốc")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải detail của chứng từ gốc");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải trên master của chứng từ gốc");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.VoucherAccountObjectId)
                .HasComment("Đối tượng hạch toán trên chứng từ gốc")
                .HasColumnName("VoucherAccountObjectID");
            entity.Property(e => e.VoucherPostedDate)
                .HasComment("Ngày hạch toán chứng từ gốc")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate)
                .HasComment("Ngày chúng từ gốc")
                .HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("Detail ID của chứng từ gốc")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("ID của chứng từ gốc")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc");
            entity.Property(e => e.VoucherRefType).HasComment("Loại chứng từ");
            entity.Property(e => e.VoucherTypeCode).HasMaxLength(20);

            entity.HasOne(d => d.Ref).WithMany(p => p.GlvoucherListDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLVoucherListDetail_GLVoucherList");

            entity.HasOne(d => d.VoucherAccountObject).WithMany(p => p.GlvoucherListDetails)
                .HasForeignKey(d => d.VoucherAccountObjectId)
                .HasConstraintName("FK_GLVoucherListDetail_AccountObject");
        });

        modelBuilder.Entity<HelpBalancingGuideLastedDate>(entity =>
        {
            entity.ToTable("HelpBalancingGuideLastedDate");

            entity.Property(e => e.HelpBalancingGuideLastedDateId)
                .ValueGeneratedNever()
                .HasColumnName("HelpBalancingGuideLastedDateID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.FunctionName).HasMaxLength(150);
            entity.Property(e => e.LastedDate).HasColumnType("datetime");
            entity.Property(e => e.ToDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<HelthCompany>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HelthCompany");

            entity.Property(e => e.ItemId)
                .HasMaxLength(255)
                .HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
        });

        modelBuilder.Entity<HistoryRecentPrice>(entity =>
        {
            entity.ToTable("HistoryRecentPrice");

            entity.Property(e => e.HistoryRecentPriceId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryRecentPriceID");
            entity.Property(e => e.AccountingObjectId).HasColumnName("AccountingObjectID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<HistoryVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("HistoryVoucher");

            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.MainOutwardQuantity).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardRefDetailId).HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.StockId).HasColumnName("StockID");
        });

        modelBuilder.Entity<ImportCollection>(entity =>
        {
            entity.HasKey(e => e.KeyId).HasName("PK_ImportCollection_1");

            entity.ToTable("ImportCollection");

            entity.Property(e => e.KeyId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("KeyID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.DetailTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng Detail cần nhập khẩu");
            entity.Property(e => e.KeyCode)
                .HasMaxLength(50)
                .HasComment("Key để phân biệt nhập khẩu nghiệp vụ nào");
            entity.Property(e => e.MasterTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng Master cần nhập khẩu");
            entity.Property(e => e.TemplateFileName)
                .HasMaxLength(255)
                .HasComment("Tên file mẫu");
        });

        modelBuilder.Entity<ImportCollectionConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId);

            entity.ToTable("ImportCollectionConfig");

            entity.Property(e => e.ConfigId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("ConfigID");
            entity.Property(e => e.AllowNull).HasComment("Cho phép để trống hay không");
            entity.Property(e => e.Choosed).HasComment("Được chọn hay không");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(50)
                .HasComment("Key của cột");
            entity.Property(e => e.ColumnOnSheet)
                .HasMaxLength(255)
                .HasComment("Tên của cột trên sheet (config để tự nhận trên mẫu chuẩn, mẫu khách hàng tự sinh thì phải tự chọn)");
            entity.Property(e => e.DataType).HasComment("Loại dữ liệu");
            entity.Property(e => e.DictinaryData)
                .HasMaxLength(50)
                .HasComment("Tên bảng danh mục chứa đối tượng cần kiểm tra tồn tại (nếu để trống thì ko kiểm tra)");
            entity.Property(e => e.KeyId)
                .HasComment("Khóa chính của bảng danh sách nhập khẩu")
                .HasColumnName("KeyID");

            entity.HasOne(d => d.Key).WithMany(p => p.ImportCollectionConfigs)
                .HasForeignKey(d => d.KeyId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ImportCollectionConfig_ImportCollection");
        });

        modelBuilder.Entity<ImportColumn>(entity =>
        {
            entity.ToTable("ImportColumn");

            entity.HasIndex(e => new { e.ImportTableId, e.ColumnId }, "IX_ImportColumn_ColumnID")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ImportColumnId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ImportColumnID");
            entity.Property(e => e.ColumnId)
                .HasMaxLength(100)
                .HasColumnName("ColumnID");
            entity.Property(e => e.ColumnName).HasMaxLength(255);
            entity.Property(e => e.ColumnNameExcel).HasMaxLength(255);
            entity.Property(e => e.ColumnNameExcelMapping).HasMaxLength(255);
            entity.Property(e => e.ColumnNameTooltip).HasMaxLength(255);
            entity.Property(e => e.ColumnReference).HasMaxLength(500);
            entity.Property(e => e.DataType).HasMaxLength(100);
            entity.Property(e => e.DefaultDescription).HasMaxLength(255);
            entity.Property(e => e.DefaultValue).HasMaxLength(2000);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImportTableId).HasColumnName("ImportTableID");
            entity.Property(e => e.MaxValue).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.MinValue).HasColumnType("numeric(18, 4)");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NotNull)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("NotNULL");
            entity.Property(e => e.NotNullsystem)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("NotNULLSystem");
            entity.Property(e => e.Shown).HasDefaultValueSql("((1))");
            entity.Property(e => e.TableId)
                .HasMaxLength(100)
                .HasColumnName("TableID");
            entity.Property(e => e.TableReference).HasMaxLength(100);

            entity.HasOne(d => d.ImportTable).WithMany(p => p.ImportColumns)
                .HasForeignKey(d => d.ImportTableId)
                .HasConstraintName("FK_ImportColumn_ImportTable");
        });

        modelBuilder.Entity<ImportDictionary>(entity =>
        {
            entity.HasKey(e => e.ImportDictionaryId).HasName("PK_ColumnDictionary");

            entity.ToTable("ImportDictionary");

            entity.Property(e => e.ImportDictionaryId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ImportDictionaryID");
            entity.Property(e => e.ColumnId)
                .HasMaxLength(255)
                .HasColumnName("ColumnID");
            entity.Property(e => e.ColumnName).HasMaxLength(255);
            entity.Property(e => e.ColumnNameExcel).HasMaxLength(255);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImportExternalColumn>(entity =>
        {
            entity.ToTable("ImportExternalColumn");

            entity.Property(e => e.ImportExternalColumnId)
                .ValueGeneratedNever()
                .HasColumnName("ImportExternalColumnID");
            entity.Property(e => e.ColumnId)
                .HasMaxLength(100)
                .HasColumnName("ColumnID");
            entity.Property(e => e.ColumnName).HasMaxLength(255);
            entity.Property(e => e.ColumnNameExternal).HasMaxLength(255);
            entity.Property(e => e.ColumnNameTooltip).HasMaxLength(255);
            entity.Property(e => e.ColumnReference).HasMaxLength(500);
            entity.Property(e => e.DataType).HasMaxLength(100);
            entity.Property(e => e.DefaultValue).HasMaxLength(2000);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImportExternalTableId).HasColumnName("ImportExternalTableID");
            entity.Property(e => e.MaxValue).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MinValue).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NotNull).HasColumnName("NotNULL");
            entity.Property(e => e.NotNullsystem).HasColumnName("NotNULLSystem");
            entity.Property(e => e.Shown)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.TableId)
                .HasMaxLength(100)
                .HasColumnName("TableID");
            entity.Property(e => e.TableReference).HasMaxLength(100);
            entity.Property(e => e.Validate).HasMaxLength(2000);

            entity.HasOne(d => d.ImportExternalTable).WithMany(p => p.ImportExternalColumns)
                .HasForeignKey(d => d.ImportExternalTableId)
                .HasConstraintName("FK_ImportExternalColumn_ImportExternalTable");
        });

        modelBuilder.Entity<ImportExternalItem>(entity =>
        {
            entity.ToTable("ImportExternalItem");

            entity.Property(e => e.ImportExternalItemId)
                .ValueGeneratedNever()
                .HasColumnName("ImportExternalItemID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.TableMaster).HasMaxLength(100);
        });

        modelBuilder.Entity<ImportExternalTable>(entity =>
        {
            entity.ToTable("ImportExternalTable");

            entity.Property(e => e.ImportExternalTableId)
                .ValueGeneratedNever()
                .HasColumnName("ImportExternalTableID");
            entity.Property(e => e.ImportExternalItemId).HasColumnName("ImportExternalItemID");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.TableId)
                .HasMaxLength(100)
                .HasColumnName("TableID");
            entity.Property(e => e.TableName).HasMaxLength(255);
            entity.Property(e => e.Validate).HasMaxLength(50);

            entity.HasOne(d => d.ImportExternalItem).WithMany(p => p.ImportExternalTables)
                .HasForeignKey(d => d.ImportExternalItemId)
                .HasConstraintName("FK_ImportExternalTable_ImportExternalItem");
        });

        modelBuilder.Entity<ImportItem>(entity =>
        {
            entity.ToTable("ImportItem");

            entity.HasIndex(e => new { e.RefType, e.VoucherType }, "IX_ImportItem_RefType")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ImportItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ImportItemID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.TableMaster).HasMaxLength(255);
            entity.Property(e => e.TemplateFileName).HasMaxLength(255);
        });

        modelBuilder.Entity<ImportOpeningAccountEntry>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("ImportOpeningAccountEntry");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(128);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountNumber).HasMaxLength(50);
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CashBookPostedDate).HasColumnType("datetime");
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ImportOpeningAccountEntryDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("ImportOpeningAccountEntryDetail");

            entity.HasIndex(e => e.RefId, "IX_ImportOpeningAccountEntryDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.DebitAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.EmployeeCode).HasMaxLength(128);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExpenseItemCode).HasMaxLength(20);
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobCode).HasMaxLength(25);
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemCode).HasMaxLength(50);
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.OpncontractCode)
                .HasMaxLength(50)
                .HasColumnName("OPNContractCode");
            entity.Property(e => e.OpnpucontractCode)
                .HasMaxLength(50)
                .HasColumnName("OPNPUContractCode");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitCode).HasMaxLength(20);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkCode).HasMaxLength(20);
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.PuorderRefNo)
                .HasMaxLength(50)
                .HasColumnName("PUOrderRefNo");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SaorderRefNo)
                .HasMaxLength(50)
                .HasColumnName("SAOrderRefNo");

            entity.HasOne(d => d.Ref).WithMany(p => p.ImportOpeningAccountEntryDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ImportOpeningAccountEntryDetail_ImportOpeningAccountEntry");
        });

        modelBuilder.Entity<ImportOpeningAccountEntryDetailInvoice>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("ImportOpeningAccountEntryDetailInvoice");

            entity.HasIndex(e => e.RefId, "IX_ImportOpeningAccountEntryDetailInvoice_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeCode).HasMaxLength(50);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(50);
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvoiceAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("InvoiceAmountOC");
            entity.Property(e => e.PayAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PayAmountOC");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.ImportOpeningAccountEntryDetailInvoices)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ImportOpeningAccountEntryDetailInvoice_ImportOpeningAccountEntry");
        });

        modelBuilder.Entity<ImportOpeningInventoryEntry>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("ImportOpeningInventoryEntry");

            entity.HasIndex(e => new { e.PostedDate, e.RefNo, e.InventoryItemCode, e.StockCode, e.UnitName, e.ExpiryDate, e.LotNo, e.BranchCode, e.DisplayOnBook, e.SortOrder, e.InventoryResaleTypeId }, "IX_ImportOpeningInventoryEntry_KeyID");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchCode).HasMaxLength(20);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ExchangeRateOperator).HasMaxLength(3);
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryItemCode).HasMaxLength(50);
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.InventoryResaleTypeId).HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitName).HasMaxLength(20);
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PanelHeightQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.StockCode).HasMaxLength(20);
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitName).HasMaxLength(20);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<ImportReferenceColumn>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("ImportReferenceColumn");

            entity.Property(e => e.ReferenceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReferenceID");
            entity.Property(e => e.ColumnName).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<ImportTable>(entity =>
        {
            entity.ToTable("ImportTable");

            entity.HasIndex(e => new { e.ImportItemId, e.TableId }, "IX_ImportTable_TableID")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ImportTableId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ImportTableID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ImportItemId).HasColumnName("ImportItemID");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.TableId)
                .HasMaxLength(100)
                .HasColumnName("TableID");
            entity.Property(e => e.TableName).HasMaxLength(255);
            entity.Property(e => e.Validate).HasMaxLength(500);
            entity.Property(e => e.ValidateCaption).HasMaxLength(500);

            entity.HasOne(d => d.ImportItem).WithMany(p => p.ImportTables)
                .HasForeignKey(d => d.ImportItemId)
                .HasConstraintName("FK_ImportTable_ImportItem");
        });

        modelBuilder.Entity<InassemblyDisassembly>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("INAssemblyDisassembly", tb => tb.HasComment("Bảng Master Lệnh Sản xuất, lắp ráp, tháo dỡ"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_INAssemblyDisassembly_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.InventoryItemId)
                .HasComment("ID thành phẩm Lắp ráp, Hàng hóa tháo dỡ")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsOutWardedLastYear)
                .HasComment("Đã lập phiếu xuất năm trước")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityInwardLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày lắp ráp, tháo dỡ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số lệnh Lắp ráp/Tháo dỡ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("210 = Lắp ráp; 211 = Tháo dỡ");
            entity.Property(e => e.TotalAmountFinanceInwardLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountFinanceLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagementInwardLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagementLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");

            entity.HasOne(d => d.Branch).WithMany(p => p.InassemblyDisassemblies)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INAssemblyDisassembly_OrganizationUnit");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InassemblyDisassemblies)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INAssemblyDisassembly_InventoryItem");

            entity.HasOne(d => d.Unit).WithMany(p => p.InassemblyDisassemblies)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INAssemblyDisassembly_Unit");
        });

        modelBuilder.Entity<InassemblyDisassemblyDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_INAssemblyDisAssemblyDetail");

            entity.ToTable("INAssemblyDisassemblyDetail", tb => tb.HasComment("Bảng chi tiết Lệnh Lắp ráp, Tháo dỡ"));

            entity.HasIndex(e => e.RefId, "IX_INAssemblyDisAssemblyDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_INAssemblyDisassemblyDetail_InventoryItemID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng/Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId)
                .HasComment("Kho")
                .HasColumnName("StockID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính(bộ, chiếc, mét...)")
                .HasColumnName("UnitID");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InassemblyDisassemblyDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INAssemblyDisAssemblyDetail_InventoryItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.InassemblyDisassemblyDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INAssemblyDisAssemblyDetail_INAssemblyDisassembly");

            entity.HasOne(d => d.Unit).WithMany(p => p.InassemblyDisassemblyDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INAssemblyDisassemblyDetail_Unit");
        });

        modelBuilder.Entity<Inaudit>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_INAdjustment");

            entity.ToTable("INAudit", tb => tb.HasComment("Kiểm kê kho"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_INAudit_RefNo");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.AuditDate)
                .HasComment("Kiểm kê đến ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0 = Kiểm kê trên Sổ tài chinh;1 = Kiểm kê trên Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.IninwardRefId).HasColumnName("INInwardRefID");
            entity.Property(e => e.InoutwardRefId).HasColumnName("INOutwardRefID");
            entity.Property(e => e.IsExecuted).HasComment("Đã xử lý chênh lệch");
            entity.Property(e => e.IsQualityAudit).HasComment("Kiểm kê phẩm chất");
            entity.Property(e => e.IsValueAudit).HasComment("Kiểm kê giá trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Mục đích");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự");
            entity.Property(e => e.RefTime)
                .HasComment("Giờ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("219 = Kiểm kê kho");
            entity.Property(e => e.StockId)
                .HasComment("Kho")
                .HasColumnName("StockID");
            entity.Property(e => e.Summary)
                .HasMaxLength(255)
                .HasComment("Kết luận sau kiểm kê");

            entity.HasOne(d => d.Branch).WithMany(p => p.Inaudits)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INAudit_OrganizationUnit");

            entity.HasOne(d => d.IninwardRef).WithMany(p => p.Inaudits)
                .HasForeignKey(d => d.IninwardRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INAudit_INInward");

            entity.HasOne(d => d.InoutwardRef).WithMany(p => p.Inaudits)
                .HasForeignKey(d => d.InoutwardRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INAudit_INOutward");
        });

        modelBuilder.Entity<InauditDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_INAdjustmentDetail");

            entity.ToTable("INAuditDetail", tb => tb.HasComment("Chi tiết kiểm kê kho"));

            entity.HasIndex(e => e.InventoryItemId, "IX_INAuditDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_INAuditDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AmountAudit)
                .HasComment("Thành tiền kiểm kê")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOnBook)
                .HasComment("Thành tiền trên số kế toán")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffAmount)
                .HasComment("Số tiền chênh lệch")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffPanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.DiffQuantity)
                .HasComment("Số lượng chênh lệch")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ExecuteAction)
                .HasDefaultValueSql("((0))")
                .HasComment("0 = Không xử lý; 1 = Nhập kho; 2 = Xuất kho");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.GoodQuantity)
                .HasComment("Số lượng còn tốt 100%")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.LostQuantity)
                .HasComment("Số lượng mất phẩm chất")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.LowQuantity)
                .HasComment("Số lương kém phẩm chất")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelHeightQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantityOnBook).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityAudit)
                .HasComment("Số lượng kiểm kê")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityOnBook)
                .HasComment("Số lượng trên số kế toán")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SerialNumber1).HasMaxLength(50);
            entity.Property(e => e.SerialNumber2).HasMaxLength(50);
            entity.Property(e => e.SerialNumber3).HasMaxLength(50);
            entity.Property(e => e.SerialNumber4).HasMaxLength(50);
            entity.Property(e => e.SerialNumber5).HasMaxLength(50);
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InauditDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INAuditDetail_InventoryItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.InauditDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INAuditDetail_INAudit");

            entity.HasOne(d => d.Stock).WithMany(p => p.InauditDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_INAuditDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.InauditDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INAuditDetail_Unit");
        });

        modelBuilder.Entity<InauditMemberDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_INAdjustmentMemberDetail");

            entity.ToTable("INAuditMemberDetail", tb => tb.HasComment("Bảng chi tiết các thành viên tham gia kiểm kê"));

            entity.HasIndex(e => e.RefId, "IX_INAuditMemberDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Họ và tên");
            entity.Property(e => e.Position)
                .HasMaxLength(128)
                .HasComment("Chức vụ");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Representative)
                .HasMaxLength(128)
                .HasComment("Đại diện");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp dòng");

            entity.HasOne(d => d.Ref).WithMany(p => p.InauditMemberDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INAuditMemberDetail_INAudit");
        });

        modelBuilder.Entity<InbotTrialInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InbotTrialInfo");

            entity.Property(e => e.SessionId).HasMaxLength(125);
        });

        modelBuilder.Entity<InbotTrialProcess>(entity =>
        {
            entity.HasKey(e => e.ProcessId);

            entity.ToTable("InbotTrialProcess");

            entity.HasIndex(e => e.CompanyTaxCode, "IX_InbotTrialProcess_CompanyTaxCode");

            entity.HasIndex(e => e.InvoiceId, "IX_InbotTrialProcess_InvoiceId");

            entity.HasIndex(e => e.SessionId, "IX_InbotTrialProcess_SessionId");

            entity.Property(e => e.ProcessId).HasMaxLength(50);
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(25);
            entity.Property(e => e.InvoiceId).HasMaxLength(50);
            entity.Property(e => e.SessionId).HasMaxLength(125);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<IninventoryBook>(entity =>
        {
            entity.HasKey(e => e.InventoryBookId);

            entity.ToTable("INInventoryBook");

            entity.HasIndex(e => e.RefId, "IX_INInventoryBook_RefID").HasFillFactor(90);

            entity.Property(e => e.InventoryBookId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InventoryBookID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((2))");
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceiptName).HasMaxLength(128);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(20);

            entity.HasOne(d => d.AccountObject).WithMany(p => p.IninventoryBooks)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INInventoryBook_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.IninventoryBooks)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_INInventoryBook_OrganizationUnit");
        });

        modelBuilder.Entity<IninventoryBookDetail>(entity =>
        {
            entity.HasKey(e => e.InventoryBookDetailId);

            entity.ToTable("INInventoryBookDetail", tb => tb.HasComment("Chi tiết chứng từ được ghi vào sổ Thủ kho"));

            entity.Property(e => e.InventoryBookDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("InventoryBookDetailID");
            entity.Property(e => e.ActualInwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng thực thủ kho nhập kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ActualOutwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("((0))")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.FromStockId)
                .HasComment("Lưu giá trị từ kho khi chứng từ là chuyển kho")
                .HasColumnName("FromStockID");
            entity.Property(e => e.InventoryBookId)
                .HasComment("FK")
                .HasColumnName("InventoryBookID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng nhập kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainActualInwardQuantity)
                .HasComment("Số lượng nhập kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainActualOutwardQuantity)
                .HasComment("Số lượng xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.OutwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng thực thủ kho xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của chứng từ gốc")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự dòng");
            entity.Property(e => e.StockId)
                .HasComment("Kho")
                .HasColumnName("StockID");
            entity.Property(e => e.ToStockId)
                .HasComment("Lưu giá trị đến kho khi chuyển kho")
                .HasColumnName("ToStockID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");

            entity.HasOne(d => d.FromStock).WithMany(p => p.IninventoryBookDetailFromStocks).HasForeignKey(d => d.FromStockId);

            entity.HasOne(d => d.InventoryBook).WithMany(p => p.IninventoryBookDetails)
                .HasForeignKey(d => d.InventoryBookId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_INInventoryBookDetail_INInventoryBook");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.IninventoryBookDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_INInventoryBookDetail_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.IninventoryBookDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_INInventoryBookDetail_Unit1");

            entity.HasOne(d => d.Stock).WithMany(p => p.IninventoryBookDetailStocks)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_INInventoryBookDetail_Stock");

            entity.HasOne(d => d.ToStock).WithMany(p => p.IninventoryBookDetailToStocks).HasForeignKey(d => d.ToStockId);

            entity.HasOne(d => d.Unit).WithMany(p => p.IninventoryBookDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INInventoryBookDetail_Unit");
        });

        modelBuilder.Entity<IninventoryBookDetailUnpost>(entity =>
        {
            entity.HasKey(e => e.InventoryBookDetailUnPostId).HasName("PK_INInventoryBookDetailUnpost_1");

            entity.ToTable("INInventoryBookDetailUnpost", tb => tb.HasComment("Bảng lưu thông tin số lượng thực xuất, số lượng thực nhập khi bỏ ghi trên sổ thủ kho"));

            entity.Property(e => e.InventoryBookDetailUnPostId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Key")
                .HasColumnName("InventoryBookDetailUnPostID");
            entity.Property(e => e.ActualInwardQuantity)
                .HasComment("Số lượng thực thủ kho nhập kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ActualOutwardQuantity)
                .HasComment("Số lượng xuất kho của thủ kho xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi vào vào sổ quản trị");
            entity.Property(e => e.MainActualInwardQuantity)
                .HasComment("Số lượng thực thủ kho nhập kho theo đơn vị tính chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainActualOutwardQuantity)
                .HasComment("Số lượng xuất kho của thủ kho xuất kho theo đơn vị tính chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của chứng từ gốc")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của chứng từ gốc")
                .HasColumnName("RefID");
        });

        modelBuilder.Entity<IninvoiceHubOutward>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("INInvoiceHubOutward");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AssemblyRefId).HasColumnName("AssemblyRefID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ContactName).HasMaxLength(128);
            entity.Property(e => e.ContractCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((2))");
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FromStockId).HasColumnName("FromStockID");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InvNo).HasMaxLength(50);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(50);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.IsGetForInvoice).HasComputedColumnSql("(case when [InvSeries]<>'' AND right(rtrim([InvSeries]),(1))='E' then CONVERT([bit],(1),(0)) when [InvNo] IS NULL then CONVERT([bit],(1),(0)) when [InvNo]='' then CONVERT([bit],(1),(0)) else CONVERT([bit],(1),(0)) end)", true);
            entity.Property(e => e.IsPostedInventoryBookFinance).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPostedInventoryBookManagement).HasDefaultValueSql("((0))");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderNo).HasMaxLength(255);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
            entity.Property(e => e.ShippingAddress).HasMaxLength(255);
            entity.Property(e => e.ToStockId).HasColumnName("ToStockID");
            entity.Property(e => e.TotalAmountFinance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Transport).HasMaxLength(50);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(400);

            entity.HasOne(d => d.AccountObject).WithMany(p => p.IninvoiceHubOutwardAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INInvoiceHubOutward_AccountingObject");

            entity.HasOne(d => d.AssemblyRef).WithMany(p => p.IninvoiceHubOutwards)
                .HasForeignKey(d => d.AssemblyRefId)
                .HasConstraintName("FK_INInvoiceHubOutward_INAssemblyDisassembly");

            entity.HasOne(d => d.Branch).WithMany(p => p.IninvoiceHubOutwards)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_INInvoiceHubOutward_OrganizationUnit");

            entity.HasOne(d => d.Employee).WithMany(p => p.IninvoiceHubOutwardEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.FromStock).WithMany(p => p.IninvoiceHubOutwardFromStocks).HasForeignKey(d => d.FromStockId);

            entity.HasOne(d => d.ToStock).WithMany(p => p.IninvoiceHubOutwardToStocks).HasForeignKey(d => d.ToStockId);

            entity.HasOne(d => d.Transporter).WithMany(p => p.IninvoiceHubOutwardTransporters).HasForeignKey(d => d.TransporterId);
        });

        modelBuilder.Entity<IninvoiceHubOutwardDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("INInvoiceHubOutwardDetail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AmountFinance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId).HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId).HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InassemblyRefDetailId).HasColumnName("INAssemblyRefDetailID");
            entity.Property(e => e.InassemblyRefId).HasColumnName("INAssemblyRefID");
            entity.Property(e => e.IntransferRefDetailId).HasColumnName("INTransferRefDetailID");
            entity.Property(e => e.IntransferRefId).HasColumnName("INTransferRefID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPriceFinance).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceManagement).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProductionId).HasColumnName("ProductionID");
            entity.Property(e => e.ProductionOrderRefId).HasColumnName("ProductionOrderRefID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuvoucherRefDetailId).HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId).HasColumnName("PUVoucherRefID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SaleAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SalePrice)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceFinance).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceManagement).HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_AccountObject");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ContractDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_ContractDetailInventoryItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.IninvoiceHubOutwardDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.IninvoiceHubOutwardDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_ListItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.IninvoiceHubOutwardDetailMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Order).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_OrganizationUnit");

            entity.HasOne(d => d.Production).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_INProductionOrderProduct");

            entity.HasOne(d => d.ProductionOrderRef).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ProductionOrderRefId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_INProductionOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_PUContract");

            entity.HasOne(d => d.PuvoucherRef).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.PuvoucherRefId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_PUVoucher");

            entity.HasOne(d => d.Ref).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_INOutward");

            entity.HasOne(d => d.SaorderRefDetail).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.SaorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_SAOrderDetail");

            entity.HasOne(d => d.Stock).WithMany(p => p.IninvoiceHubOutwardDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.IninvoiceHubOutwardDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INInvoiceHubOutwardDetail_Unit");
        });

        modelBuilder.Entity<IninvoiceHubTransfer>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("INInvoiceHubTransfer");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CommonInventoryName).HasMaxLength(255);
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.ContractCode).HasMaxLength(255);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.ContractOwner).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((2))");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InvNo).HasMaxLength(50);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(50);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.IsGetForInvoice).HasComputedColumnSql("(case when [InvSeries]<>'' AND right(rtrim([InvSeries]),(1))='E' then CONVERT([bit],(1),(0)) when [InvNo] IS NULL then CONVERT([bit],(1),(0)) when [InvNo]='' then CONVERT([bit],(1),(0)) else CONVERT([bit],(1),(0)) end)", true);
            entity.Property(e => e.IsPostedInventoryBookFinance).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPostedInventoryBookManagement).HasDefaultValueSql("((0))");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListDate).HasColumnType("datetime");
            entity.Property(e => e.ListNo).HasMaxLength(20);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
            entity.Property(e => e.TotalAmountFinance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Transport).HasMaxLength(50);
            entity.Property(e => e.TransportContractCode).HasMaxLength(50);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(400);

            entity.HasOne(d => d.Branch).WithMany(p => p.IninvoiceHubTransfers)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INInvoiceHubTransfer_OrganizationUnit");

            entity.HasOne(d => d.Transporter).WithMany(p => p.IninvoiceHubTransfers)
                .HasForeignKey(d => d.TransporterId)
                .HasConstraintName("FK_INInvoiceHubTransfer_AccountObject");
        });

        modelBuilder.Entity<IninvoiceHubTransferDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("INInvoiceHubTransferDetail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AmountFinance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId).HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId).HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.FromStockId).HasColumnName("FromStockID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPriceFinance).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceManagement).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuvoucherOrInwardRefDetailId).HasColumnName("PUVoucherOrInwardRefDetailID");
            entity.Property(e => e.PuvoucherOrInwardRefId).HasColumnName("PUVoucherOrInwardRefID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SalePrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ToStockId).HasColumnName("ToStockID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceFinance).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceManagement).HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.Contract).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.IninvoiceHubTransferDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.IninvoiceHubTransferDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_ExpenseItem");

            entity.HasOne(d => d.FromStock).WithMany(p => p.IninvoiceHubTransferDetailFromStocks).HasForeignKey(d => d.FromStockId);

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_ListItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.IninvoiceHubTransferDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_PUContract");

            entity.HasOne(d => d.Ref).WithMany(p => p.IninvoiceHubTransferDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_INTransfer");

            entity.HasOne(d => d.ToStock).WithMany(p => p.IninvoiceHubTransferDetailToStocks).HasForeignKey(d => d.ToStockId);

            entity.HasOne(d => d.Unit).WithMany(p => p.IninvoiceHubTransferDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INInvoiceHubTransferDetail_Unit");
        });

        modelBuilder.Entity<Ininward>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_INInwardOutward");

            entity.ToTable("INInward", tb =>
                {
                    tb.HasComment("Bảng Master của phiếu nhập kho");
                    tb.HasTrigger("trg_INInward_DataChanged");
                });

            entity.HasIndex(e => e.BranchId, "IX_INInwardOutward_BranchID").HasFillFactor(90);

            entity.HasIndex(e => e.PostedDate, "IX_INInwardOutward_PostedDate").HasFillFactor(90);

            entity.HasIndex(e => e.RefDate, "IX_INInwardOutward_RefDate").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_INInwardOutward_RefNo").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_INInward_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AssemblyRefId).HasColumnName("AssemblyRefID");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(128)
                .HasComment("Người giao hàng");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook)
                .HasDefaultValueSql("((2))")
                .HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo trên phiếu thu");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryPostedDate)
                .HasComment("Ngày ghi sổ kho")
                .HasColumnType("datetime");
            entity.Property(e => e.IsCreatedSareturnLastYear)
                .HasComment("Đã lập bán trả lại năm trước")
                .HasColumnName("IsCreatedSAReturnLastYear");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedInventoryBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ tài chính)");
            entity.Property(e => e.IsPostedInventoryBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ quản trị)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OutwardDependentRefId).HasColumnName("OutwardDependentRefID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày phiếu nhập")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SareturnRefId)
                .HasComment("RefID của chứng từ Bán trả lại")
                .HasColumnName("SAReturnRefID");
            entity.Property(e => e.TotalAmountFinance)
                .HasComment("Tổng thành tiền Sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagement)
                .HasComment("Tổng thành tiền Sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UnitPriceMethod)
                .HasDefaultValueSql("((0))")
                .HasComment("Phương thức nhập/tính đơn giá nhập. 0 = Lấy từ giá xuất bán; 1 = Nhập đơn giá bằng tay");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.IninwardAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INInward_AccountingObject");

            entity.HasOne(d => d.AssemblyRef).WithMany(p => p.Ininwards)
                .HasForeignKey(d => d.AssemblyRefId)
                .HasConstraintName("FK_INInward_INAssemblyDisassembly");

            entity.HasOne(d => d.Branch).WithMany(p => p.Ininwards)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_INInward_OrganizationUnit");

            entity.HasOne(d => d.Employee).WithMany(p => p.IninwardEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_INInward_AccountObject_Employee");

            entity.HasOne(d => d.SareturnRef).WithMany(p => p.Ininwards)
                .HasForeignKey(d => d.SareturnRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INInward_SAReturn");
        });

        modelBuilder.Entity<IninwardDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_INInwardOutwardDetail");

            entity.ToTable("INInwardDetail", tb => tb.HasComment("Bảng Detail của phiếu nhập kho và xuất kho"));

            entity.HasIndex(e => e.OutwardRefDetailId, "IX_INInwardDetail_OutwardRefDetailID");

            entity.HasIndex(e => new { e.ProductionOrderRefId, e.InventoryItemId, e.ProductionId }, "IX_INInwardDetail_ProductionOrderRefID");

            entity.HasIndex(e => e.SaorderRefDetailId, "IX_INInwardDetail_SAOrderRefDetailID");

            entity.HasIndex(e => e.InventoryItemId, "IX_INInwardOutwardDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_INInwardOutwardDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.StockId, "IX_INInwardOutwardDetail_StockID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AmountFinance)
                .HasComment("Số tiền (Sổ tài chính)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountFinanceOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountFinanceOC");
            entity.Property(e => e.AmountManagement)
                .HasComment("Số tiền (Sổ quản trị)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountManagementOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountManagementOC");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId).HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId).HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục CP")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.InassemblyRefDetailId).HasColumnName("INAssemblyRefDetailID");
            entity.Property(e => e.InassemblyRefId).HasColumnName("INAssemblyRefID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng/Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.IsPromotion).HasComment("Là hàng khuyến mại");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng tập hợp chi phí")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPriceFinance)
                .HasComment("Đơn giá theo đơn vị chính (Sổ tài chính)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceManagement)
                .HasComment("Đơn giá theo đơn vị chính (Sổ quản trị)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OutwardRefDetailId)
                .HasComment("RefDetailID của phiếu xuất kho (dùng cho Nhập kho từ hàng bán trả lại Lấy từ giá xuất bán)")
                .HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.OutwardRefId)
                .HasComment("RefID của phiếu xuất kho (dùng cho Nhập kho từ hàng bán trả lại Lấy từ giá xuất bán)")
                .HasColumnName("OutwardRefID");
            entity.Property(e => e.ProductionId).HasColumnName("ProductionID");
            entity.Property(e => e.ProductionOrderRefId)
                .HasComment("RefID của lệnh sản xuất")
                .HasColumnName("ProductionOrderRefID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính(bộ, chiếc, mét...)")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceFinance)
                .HasComment("Đơn giá (Sổ tài chính)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceManagement)
                .HasComment("Đơn giá (Sổ quản trị)")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INInwardDetail_AccountObject");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ContractDetailId)
                .HasConstraintName("FK_INInwardDetail_ContractDetailInventoryItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_INInwardDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.IninwardDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_INInwardOutwardDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.IninwardDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_INInwardOutwardDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_INInwardDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INInwardOutwardDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INInwardDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INInwardDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_INInwardDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.IninwardDetailMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Order).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_INInwardDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_INInwardDetail_OrganizationUnit");

            entity.HasOne(d => d.Production).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INInwardDetail_INProductionOrderProduct");

            entity.HasOne(d => d.ProductionOrderRef).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ProductionOrderRefId)
                .HasConstraintName("FK_INInwardDetail_INProductionOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_INInwardDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_INInwardDetail_PUContract");

            entity.HasOne(d => d.Ref).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INInwardDetail_INInward");

            entity.HasOne(d => d.SaorderRefDetail).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.SaorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INInwardDetail_SAOrderDetail");

            entity.HasOne(d => d.Stock).WithMany(p => p.IninwardDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_INInwardOutwardDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.IninwardDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INInwardDetail_Unit");
        });

        modelBuilder.Entity<IninwardOutwardList>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_INInwardOutwardList_RefID");

            entity.ToTable("INInwardOutwardList");

            entity.HasIndex(e => e.PostedDate, "IX_INInwardOutwardList_PostedDate").HasFillFactor(90);

            entity.HasIndex(e => e.RefDate, "IX_INInwardOutwardList_RefDate").HasFillFactor(90);

            entity.HasIndex(e => e.RefNoFinance, "IX_INInwardOutwardList_RefNoFinance").HasFillFactor(90);

            entity.HasIndex(e => e.RefNoManagement, "IX_INInwardOutwardList_RefNomanagement").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount).HasMaxLength(50);
            entity.Property(e => e.AccountObjectBankName).HasMaxLength(255);
            entity.Property(e => e.AccountObjectContactName).HasMaxLength(128);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AssemblyRefId).HasColumnName("AssemblyRefID");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BranchImportMst)
                .HasMaxLength(50)
                .HasColumnName("BranchImportMST");
            entity.Property(e => e.BranchImportName).HasMaxLength(400);
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CabadocumentIncluded)
                .HasMaxLength(255)
                .HasColumnName("CABADocumentIncluded");
            entity.Property(e => e.CabajournalMemo)
                .HasMaxLength(500)
                .HasColumnName("CABAJournalMemo");
            entity.Property(e => e.CabapostedDate)
                .HasColumnType("datetime")
                .HasColumnName("CABAPostedDate");
            entity.Property(e => e.CabarefDate)
                .HasColumnType("datetime")
                .HasColumnName("CABARefDate");
            entity.Property(e => e.CabarefNoFinance)
                .HasMaxLength(20)
                .HasColumnName("CABARefNoFinance");
            entity.Property(e => e.CabarefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("CABARefNoManagement");
            entity.Property(e => e.CadocumentIncluded)
                .HasMaxLength(255)
                .HasColumnName("CADocumentIncluded");
            entity.Property(e => e.CajournalMemo)
                .HasMaxLength(500)
                .HasColumnName("CAJournalMemo");
            entity.Property(e => e.CapostedDate)
                .HasColumnType("datetime")
                .HasColumnName("CAPostedDate");
            entity.Property(e => e.CarefDate)
                .HasColumnType("datetime")
                .HasColumnName("CARefDate");
            entity.Property(e => e.CarefNoFinance)
                .HasMaxLength(20)
                .HasColumnName("CARefNoFinance");
            entity.Property(e => e.CarefNoManagement)
                .HasMaxLength(20)
                .HasColumnName("CARefNoManagement");
            entity.Property(e => e.CashBookPostedDate).HasColumnType("datetime");
            entity.Property(e => e.ContactName).HasMaxLength(400);
            entity.Property(e => e.ContractCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FromStockAddress).HasMaxLength(255);
            entity.Property(e => e.FromStockId).HasColumnName("FromStockID");
            entity.Property(e => e.IdentificationNumber).HasMaxLength(20);
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.Intype).HasColumnName("INType");
            entity.Property(e => e.InvNo).HasMaxLength(50);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(50);
            entity.Property(e => e.InventoryPostedDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceCode).HasMaxLength(100);
            entity.Property(e => e.IsCreatedSareturnLastYear)
                .HasComment("Đã lập bán trả lại năm trước")
                .HasColumnName("IsCreatedSAReturnLastYear");
            entity.Property(e => e.IsSaleWithOutward).HasDefaultValueSql("((0))");
            entity.Property(e => e.IssueBy).HasMaxLength(120);
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListTableName).HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderNo).HasMaxLength(255);
            entity.Property(e => e.OutDocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.OutwardDependentRefId).HasColumnName("OutwardDependentRefID");
            entity.Property(e => e.PayReason).HasMaxLength(255);
            entity.Property(e => e.Payer).HasMaxLength(128);
            entity.Property(e => e.PayerAddress).HasMaxLength(255);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermId).HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId).HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.Receiver).HasMaxLength(128);
            entity.Property(e => e.ReceiverAddress).HasMaxLength(255);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.RevenueStatusName).HasMaxLength(100);
            entity.Property(e => e.SainvoiceRefId).HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SareturnRefId).HasColumnName("SAReturnRefID");
            entity.Property(e => e.ToStockAddress).HasMaxLength(255);
            entity.Property(e => e.ToStockId).HasColumnName("ToStockID");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountFinance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalCustomBeforeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalFreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalImportTaxAmountOC");
            entity.Property(e => e.TotalInwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSpecialConsumeTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSpecialConsumeTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSpecialConsumeTaxAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
            entity.Property(e => e.Transport).HasMaxLength(50);
            entity.Property(e => e.TransporterId).HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName).HasMaxLength(400);
        });

        modelBuilder.Entity<Inoutward>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("INOutward", tb =>
                {
                    tb.HasComment("Bảng master xuất kho");
                    tb.HasTrigger("trg_INOutward_DataChanged");
                });

            entity.HasIndex(e => e.RefDate, "IX_INOutward_RefDate");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_INOutward_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AssemblyRefId).HasColumnName("AssemblyRefID");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.BranchImportMst)
                .HasMaxLength(50)
                .HasColumnName("BranchImportMST");
            entity.Property(e => e.BranchImportName).HasMaxLength(400);
            entity.Property(e => e.ContactName)
                .HasMaxLength(128)
                .HasComment("Tên người nhận/Bộ phận/Của");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Hợp đồng số");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook)
                .HasDefaultValueSql("((2))")
                .HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.FromStockAddress).HasMaxLength(255);
            entity.Property(e => e.FromStockId)
                .HasComment("Xuất tại kho")
                .HasColumnName("FromStockID");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InvNo)
                .HasMaxLength(50)
                .HasComment("Số chứng từ (Xuất hàng cho các đơn vị hạch toán phụ thuộc)");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(50)
                .HasComment("Mẫu số HĐ");
            entity.Property(e => e.InventoryPostedDate)
                .HasComment("Ngày ghi sổ kho")
                .HasColumnType("datetime");
            entity.Property(e => e.InvoiceCode).HasMaxLength(100);
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.IsGetForInvoice).HasComputedColumnSql("(case when [InvSeries]<>'' AND right(rtrim([InvSeries]),(1))='E' then CONVERT([bit],(1),0) when [InvNo] IS NULL then CONVERT([bit],(1),0) when [InvNo]='' then CONVERT([bit],(1),0) else CONVERT([bit],(1),0) end)", true);
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedInventoryBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ tài chính)");
            entity.Property(e => e.IsPostedInventoryBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ quản trị)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do xuất/Về việc");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrderDate)
                .HasComment("Ngày lệnh điều động")
                .HasColumnType("datetime");
            entity.Property(e => e.OrderNo)
                .HasMaxLength(255)
                .HasComment("Lệnh điều động số");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.RevenueStatus).HasComment("Tình trạng ghi nhận doanh thu. 0 = Chưa lập; 1 = Đã lập");
            entity.Property(e => e.ShippingAddress).HasMaxLength(255);
            entity.Property(e => e.ToStockAddress).HasMaxLength(255);
            entity.Property(e => e.ToStockId)
                .HasComment("Nhập tại kho")
                .HasColumnName("ToStockID");
            entity.Property(e => e.TotalAmountFinance)
                .HasComment("Tổng thành tiền Sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagement)
                .HasComment("Tổng thành tiền Sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Transport)
                .HasMaxLength(50)
                .HasComment("Phương tiện vận chuyển");
            entity.Property(e => e.TransporterId)
                .HasComment("Người vận chuyển (danh mục nhân viên)")
                .HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(400)
                .HasComment("Tên người vận chuyển");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.InoutwardAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INOutward_AccountingObject");

            entity.HasOne(d => d.AssemblyRef).WithMany(p => p.Inoutwards)
                .HasForeignKey(d => d.AssemblyRefId)
                .HasConstraintName("FK_INOutward_INAssemblyDisassembly");

            entity.HasOne(d => d.Branch).WithMany(p => p.Inoutwards)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_INOutward_OrganizationUnit");

            entity.HasOne(d => d.Employee).WithMany(p => p.InoutwardEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.FromStock).WithMany(p => p.InoutwardFromStocks).HasForeignKey(d => d.FromStockId);

            entity.HasOne(d => d.ToStock).WithMany(p => p.InoutwardToStocks).HasForeignKey(d => d.ToStockId);

            entity.HasOne(d => d.Transporter).WithMany(p => p.InoutwardTransporters).HasForeignKey(d => d.TransporterId);
        });

        modelBuilder.Entity<InoutwardDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("INOutwardDetail", tb => tb.HasComment("Bảng chi tiết Xuất kho"));

            entity.HasIndex(e => new { e.ContractDetailId, e.RefId, e.InventoryItemId, e.ContractId }, "IX_INOutwardDetail_Contract").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_INOutwardDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductionOrderRefId, e.InventoryItemId, e.ProductionId }, "IX_INOutwardDetail_ProductionOrderRefID");

            entity.HasIndex(e => e.RefId, "IX_INOutwardDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => new { e.SaorderRefDetailId, e.RefId, e.OrderId, e.InventoryItemId }, "IX_INOutwardDetail_SAOrder").HasFillFactor(90);

            entity.HasIndex(e => e.StockId, "IX_INOutwardDetail_StockID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AmountFinance)
                .HasComment("Số tiền trên sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountManagement)
                .HasComment("Số tiền trên sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId)
                .HasComment("RefDetailID của chứng từ Nhập đối trừ")
                .HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId)
                .HasComment("RefID của chứng từ Nhập đối trừ")
                .HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("((0))")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục CP")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.InassemblyRefDetailId).HasColumnName("INAssemblyRefDetailID");
            entity.Property(e => e.InassemblyRefId).HasColumnName("INAssemblyRefID");
            entity.Property(e => e.IntransferRefDetailId)
                .HasComment("ID của dòng detail chứng từ chuyển kho")
                .HasColumnName("INTransferRefDetailID");
            entity.Property(e => e.IntransferRefId)
                .HasComment("ID của chứng từ chuyển kho")
                .HasColumnName("INTransferRefID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng/Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.IsPromotion).HasComment("Là hàng khuyến mại");
            entity.Property(e => e.IsUnUpdateOutwardPrice).HasComment("Ko cập nhật giá xuất (Là hàng nhận bán Đại lý/Ủy thác XK)");
            entity.Property(e => e.JobId)
                .HasComment("Công việc (sx sản phẩm, công trình, dự án, ...)")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPriceFinance)
                .HasComment("Đơn giá theo đơn vị chính (Sổ tài chính)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceManagement)
                .HasComment("Đơn giá theo đơn vị chính (Sổ quản trị)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProductionId)
                .HasComment("ID thành phẩm")
                .HasColumnName("ProductionID");
            entity.Property(e => e.ProductionOrderRefId)
                .HasComment("RefID của lệnh sản xuất")
                .HasColumnName("ProductionOrderRefID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuvoucherRefDetailId).HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId).HasColumnName("PUVoucherRefID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SaleAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SalePrice)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính(bộ, chiếc, mét...)")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceFinance)
                .HasComment("Đơn giá Sổ tài chỉnh")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceManagement)
                .HasComment("Đơn giá Sổ quản trị")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_INOutwardDetail_AccountObject");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ContractDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INOutwardDetail_ContractDetailInventoryItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_INOutwardDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.InoutwardDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.InoutwardDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_INOutwardDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INOutwardDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INOutwardDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INOutwardDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_INOutwardDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.InoutwardDetailMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Order).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_INOutwardDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_INOutwardDetail_OrganizationUnit");

            entity.HasOne(d => d.Production).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INOutwardDetail_INProductionOrderProduct");

            entity.HasOne(d => d.ProductionOrderRef).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ProductionOrderRefId)
                .HasConstraintName("FK_INOutwardDetail_INProductionOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_INOutwardDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_INOutwardDetail_PUContract");

            entity.HasOne(d => d.PuvoucherRef).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.PuvoucherRefId)
                .HasConstraintName("FK_INOutwardDetail_PUVoucher");

            entity.HasOne(d => d.Ref).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INOutwardDetail_INOutward");

            entity.HasOne(d => d.SaorderRefDetail).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.SaorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_INOutwardDetail_SAOrderDetail");

            entity.HasOne(d => d.Stock).WithMany(p => p.InoutwardDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_INOutwardDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.InoutwardDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INOutwardDetail_Unit");
        });

        modelBuilder.Entity<InproductionOrder>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("INProductionOrder", tb => tb.HasComment("Bảng master Lệnh sản xuất"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_INProductionOrder_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số lệnh sản xuất");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("212 = Lệnh sản xuất");
            entity.Property(e => e.Status).HasComment("0 = Chưa thực hiện; 1 = Đang thực hiện; 2 = Tạm dừng; 3 = Hoàn thành; 4 = Đã hủy bỏ");
        });

        modelBuilder.Entity<InproductionOrderDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("INProductionOrderDetail");

            entity.HasIndex(e => e.InventoryItemId, "IX_INProductionOrderDetail_InventoryItemID");

            entity.HasIndex(e => e.ProductionId, "IX_INProductionOrderDetail_ProductionID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên nguyên vật liệu");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã nguyên vật liệu")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.OutwardQuantityLastYear)
                .HasComment("Số đã xuất năm trước")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ProductionId)
                .HasComment("FK")
                .HasColumnName("ProductionID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng NVL")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityOnUnit)
                .HasComment("Số lượng NVL trên 1 đon vị SP")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.InproductionOrderDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_INProductionOrderDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InproductionOrderDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INProductionOrderDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.InproductionOrderDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INProductionOrderDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.InproductionOrderDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INProductionOrderDetail_ListItem");

            entity.HasOne(d => d.Production).WithMany(p => p.InproductionOrderDetails)
                .HasForeignKey(d => d.ProductionId)
                .HasConstraintName("FK_INProductionOrderDetail_INProductionOrderProduct");

            entity.HasOne(d => d.Unit).WithMany(p => p.InproductionOrderDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INProductionOrderDetail_Unit");
        });

        modelBuilder.Entity<InproductionOrderProduct>(entity =>
        {
            entity.HasKey(e => e.ProductionId).HasName("PK_INAssemblyDisassemblyProduct");

            entity.ToTable("INProductionOrderProduct", tb => tb.HasComment("Bảng chứa các thành phẩm của Lệnh Sản xuất"));

            entity.HasIndex(e => e.InventoryItemId, "IX_INProductionOrderProduct_InventoryItemID");

            entity.HasIndex(e => e.RefId, "IX_INProductionOrderProduct_RefID");

            entity.Property(e => e.ProductionId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ProductionID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên thành phẩm");
            entity.Property(e => e.InventoryItemId)
                .HasComment("ID thành phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InwardQuantityLastYear)
                .HasComment("Số đã nhập năm trước")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự săp xếp dòng");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");

            entity.HasOne(d => d.Contract).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_INAssemblyDisassemblyProduct_Contract");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INAssemblyDisassemblyProduct_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INAssemblyDisassemblyProduct_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INProductionOrderProduct_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_INAssemblyDisassemblyProduct_SAOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INProductionOrderProduct_INProductionOrder");

            entity.HasOne(d => d.Unit).WithMany(p => p.InproductionOrderProducts)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INProductionOrderProduct_Unit");
        });

        modelBuilder.Entity<InserialNumber>(entity =>
        {
            entity.HasKey(e => e.BookSerialNumberId).IsClustered(false);

            entity.ToTable("INSerialNumber", tb => tb.HasComment("Bảng lưu trữ dữ liệu liên quan đến các chứng từ có sử dụng mã quy cách. Sử dụng bảng để lấy dữ liệu cho các sổ liên quan đến mã quy cách\r\n- Các chứng từ Nhập kho/Xuất kho/Chuyển kho\r\n- Các chứng từ bán hàng/Bán trả lại"));

            entity.HasIndex(e => e.BookSerialNumberId, "IX_INSerialNumber_InventoryItemID")
                .IsClustered()
                .HasFillFactor(90);

            entity.HasIndex(e => e.BookSerialNumberId, "IX_INSerialNumber_InwardQuantity").HasFillFactor(90);

            entity.HasIndex(e => e.BookSerialNumberId, "IX_INSerialNumber_OutwardQuantity").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefId, e.RefDetailId }, "IX_INSerialNumber_RefID_RefDetailID");

            entity.Property(e => e.BookSerialNumberId)
                .HasDefaultValueSql("(newid())")
                .HasComment("ID của sổ mã quy cách")
                .HasColumnName("BookSerialNumberID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh phục vụ cho việc khi xuất thì lấy các mã quy cách của chứng từ nhập trên chi nhánh đang làm việc")
                .HasColumnName("BranchID");
            entity.Property(e => e.ConfrontingBookSerialNumberId)
                .HasComment("ID của dòng nhập, sử dụng để lấy số lượng tồn sau mỗi lần xuất/trả lại")
                .HasColumnName("ConfrontingBookSerialNumberID");
            entity.Property(e => e.ConfrontingRefDetailId)
                .HasComment("Số chứng từ nhập tương ứng")
                .HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId)
                .HasComment("Số chứng từ nhập tương ứng")
                .HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ConfrontingRefType).HasComment("Loại chứng từ nhập tương ứng (ví dụ Xuất thì xuất từ nhập nào, trả lại thì trả lại của chứng từ bán nào)");
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((0))");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Vật tư hàng hóa")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng nhập kho, trả lại")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InwardStockId)
                .HasComment("Kho nhập, kho trả lại")
                .HasColumnName("InwardStockID");
            entity.Property(e => e.OutwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng xuất, bán hàng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OutwardStockId)
                .HasComment("Kho xuất, kho bán")
                .HasColumnName("OutwardStockID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("ID chi tiết chứng từ")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID chứng từ: Nhập kho, Xuất kho, Chuyển kho, bán hàng, bán trả lại, số dư ban đầu")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ trên sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ trên sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Thứ tự chứng từ khi trong cùng 1 ngày");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SerialNumber1)
                .HasMaxLength(50)
                .HasComment("Mã quy cách 1");
            entity.Property(e => e.SerialNumber2)
                .HasMaxLength(50)
                .HasComment("Mã quy cách 2");
            entity.Property(e => e.SerialNumber3)
                .HasMaxLength(50)
                .HasComment("Mã quy cách 3");
            entity.Property(e => e.SerialNumber4)
                .HasMaxLength(50)
                .HasComment("Mã quy cách 4");
            entity.Property(e => e.SerialNumber5)
                .HasMaxLength(50)
                .HasComment("Mã quy cách 5");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự các dòng chi tiết");
        });

        modelBuilder.Entity<Intransfer>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("INTransfer", tb =>
                {
                    tb.HasComment("Bảng master chứng từ chuyển kho");
                    tb.HasTrigger("trg_INTransfer_DataChanged");
                });

            entity.HasIndex(e => e.PostedDate, "IX_INTransfer_PostedDate").HasFillFactor(90);

            entity.HasIndex(e => e.RefDate, "IX_INTransfer_RefDate").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_INTransfer_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.CommonInventoryName).HasMaxLength(255);
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(255)
                .HasComment("Hợp đồng kinh tế/Lệnh điều động");
            entity.Property(e => e.ContractDate)
                .HasComment("Ngày hợp đồng/Điều động")
                .HasColumnType("datetime");
            entity.Property(e => e.ContractOwner)
                .HasMaxLength(50)
                .HasComment("Hợp đồng/Lệnh điều động của");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook)
                .HasDefaultValueSql("((2))")
                .HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InvNo)
                .HasMaxLength(50)
                .HasComment("Xuất kho gửi bán đại lý/Xuất kho kiêm vận chuyển nội bộ");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(50)
                .HasComment("Mẫu số");
            entity.Property(e => e.InventoryPostedDate)
                .HasComment("Ngày ghi sổ kho")
                .HasColumnType("datetime");
            entity.Property(e => e.InvoiceCode).HasMaxLength(100);
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.IsGetForInvoice).HasComputedColumnSql("(case when [InvSeries]<>'' AND right(rtrim([InvSeries]),(1))='E' then CONVERT([bit],(1),0) when [InvNo] IS NULL then CONVERT([bit],(1),0) when [InvNo]='' then CONVERT([bit],(1),0) else CONVERT([bit],(1),0) end)", true);
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedInventoryBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ tài chính)");
            entity.Property(e => e.IsPostedInventoryBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ quản trị)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Với đại lý/Về việc");
            entity.Property(e => e.ListDate).HasColumnType("datetime");
            entity.Property(e => e.ListNo).HasMaxLength(20);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("230 = Xuất kho kiêm vận chuyển nội bộ; 231 = Xuất kho gửi bán đại lý; 232 = Xuất chuyển kho nội bộ");
            entity.Property(e => e.TotalAmountFinance)
                .HasComment("Tổng thành tiền Sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountManagement)
                .HasComment("Tổng thành tiền Sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Transport)
                .HasMaxLength(50)
                .HasComment("Phương tiện vận chuyển");
            entity.Property(e => e.TransportContractCode)
                .HasMaxLength(50)
                .HasComment("Hợp đồng vận chuyển");
            entity.Property(e => e.TransporterId)
                .HasComment("Mã Người vận chuyển")
                .HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(400)
                .HasComment("Tên người vận chuyển");

            entity.HasOne(d => d.Branch).WithMany(p => p.Intransfers)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INTransfer_OrganizationUnit");

            entity.HasOne(d => d.Transporter).WithMany(p => p.Intransfers)
                .HasForeignKey(d => d.TransporterId)
                .HasConstraintName("FK_INTransfer_AccountObject");
        });

        modelBuilder.Entity<IntransferDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("INTransferDetail", tb => tb.HasComment("Bảng Detail của phiếu chuyển kho"));

            entity.HasIndex(e => e.InventoryItemId, "IX_INTransferDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_INTransferDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AmountFinance)
                .HasComment("Tiền vốn Sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountManagement)
                .HasComment("Tiền vốn Sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId)
                .HasComment("RefDetailID của chứng từ Nhập đối trừ")
                .HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId)
                .HasComment("RefID của chứng từ Nhập đối trừ")
                .HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.FromStockAddress).HasMaxLength(255);
            entity.Property(e => e.FromStockId)
                .HasComment("Từ kho")
                .HasColumnName("FromStockID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPriceFinance)
                .HasComment("Đơn giá theo đơn vị chính (Sổ tài chính)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceManagement)
                .HasComment("Đơn giá theo đơn vị chính (Sổ quản trị)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuvoucherOrInwardRefDetailId).HasColumnName("PUVoucherOrInwardRefDetailID");
            entity.Property(e => e.PuvoucherOrInwardRefId).HasColumnName("PUVoucherOrInwardRefID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SaleAmount)
                .HasComment("Thành tiền bán (Xuất kho gửi bán đại lý)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SalePrice)
                .HasComment("Đơn giá bán (Xuất kho gửi bán đại lý)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SavoucherRefDetailId).HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId).HasColumnName("SAVoucherRefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.ToStockAddress).HasMaxLength(255);
            entity.Property(e => e.ToStockId)
                .HasComment("Đến kho")
                .HasColumnName("ToStockID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceFinance)
                .HasComment("Đơn giá vốn Sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceManagement)
                .HasComment("Đơn giá vốn Sổ quản trị")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.Contract).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_INTransferDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.IntransferDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_INTransferDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.IntransferDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_INTransferDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_INTransferDetail_ExpenseItem");

            entity.HasOne(d => d.FromStock).WithMany(p => p.IntransferDetailFromStocks).HasForeignKey(d => d.FromStockId);

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INTransferDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_INTransferDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_INTransferDetail_ListItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.IntransferDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_INTransferDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_INTransferDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_INTransferDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_INTransferDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_INTransferDetail_PUContract");

            entity.HasOne(d => d.Ref).WithMany(p => p.IntransferDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_INTransferDetail_INTransfer");

            entity.HasOne(d => d.ToStock).WithMany(p => p.IntransferDetailToStocks).HasForeignKey(d => d.ToStockId);

            entity.HasOne(d => d.Unit).WithMany(p => p.IntransferDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_INTransferDetail_Unit");
        });

        modelBuilder.Entity<InunitQuantityConvert>(entity =>
        {
            entity.HasKey(e => e.ConvertId);

            entity.ToTable("INUnitQuantityConvert");

            entity.Property(e => e.ConvertId)
                .ValueGeneratedNever()
                .HasColumnName("ConvertID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
        });

        modelBuilder.Entity<InunitQuantityConvertDetail>(entity =>
        {
            entity.HasKey(e => e.ConvertDetailId);

            entity.ToTable("INUnitQuantityConvertDetail");

            entity.Property(e => e.ConvertDetailId)
                .ValueGeneratedNever()
                .HasColumnName("ConvertDetailID");
            entity.Property(e => e.ConvertId).HasColumnName("ConvertID");
            entity.Property(e => e.ConvertRate).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ExchangeRateOperator).HasMaxLength(3);
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitName).HasMaxLength(20);

            entity.HasOne(d => d.Convert).WithMany(p => p.InunitQuantityConvertDetails)
                .HasForeignKey(d => d.ConvertId)
                .HasConstraintName("FK_INUnitQuantityConvertDetail_INUnitQuantityConvert");
        });

        modelBuilder.Entity<InvTemplate>(entity =>
        {
            entity.HasKey(e => e.InvTemplateId).HasName("PK_InvTemplate_1");

            entity.ToTable("InvTemplate");

            entity.Property(e => e.InvTemplateId)
                .ValueGeneratedNever()
                .HasColumnName("InvTemplateID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.InvTemplateName).HasMaxLength(128);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InvType>(entity =>
        {
            entity.ToTable("InvType", tb => tb.HasComment("Loại hóa đơn"));

            entity.Property(e => e.InvTypeId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.InvTypeCode)
                .HasMaxLength(25)
                .HasComment("Tên loại hóa đơn");
            entity.Property(e => e.InvTypeName)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.InvoiceTemplatePrefix)
                .HasMaxLength(20)
                .HasComment("Tiền tố mẫu số hóa đơn");
            entity.Property(e => e.InvoiceType).HasComment("0=Loại hóa đơn bán hàng;1=Loại hóa đơn xuất chuyển kho");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<InventoryItem>(entity =>
        {
            entity.ToTable("InventoryItem", tb =>
                {
                    tb.HasComment("Danh mục Vật tư hàng hóa");
                    tb.HasTrigger("trg_InventoryItem_DataChanged");
                });

            entity.HasIndex(e => e.InventoryItemCode, "IX_InventoryItemCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.InventoryCategorySpecialTaxId, "IX_InventoryItem_InventoryCategorySpecialTaxID").HasFillFactor(90);

            entity.Property(e => e.InventoryItemId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.BackEndFormula).HasComment("Công thức tính số lượng trên chứng từ bán hàng chuyển từ công thức NSD ra để dùng tính toán trên chứng từ bán hàng");
            entity.Property(e => e.BarCode)
                .HasMaxLength(20)
                .HasComment("Mã vạch (dùng máy đọc mã vạch gí vào phát lên ngay). Khi mua, bán hàng, lại gí vào tự động tìm ra VTHH đó.");
            entity.Property(e => e.BaseOnFormula).HasComment("Lưu Value của Enum Dựa trên cách tính khi thiết lập công thức tính số lượng. Cho phép NSD không nhập liệu");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cogsaccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chi phí")
                .HasColumnName("COGSAccount");
            entity.Property(e => e.CostMethod)
                .HasDefaultValueSql("((0))")
                .HasComment("Phương pháp tính giá (vẫn để pp tính giá trong danh mục này vì thỉnh thoảng vẫn có KH muốn mỗi VTHH tính theo 1 pp  khác nhau)");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DefaultStockId)
                .HasComment("Kho ngầm định")
                .HasColumnName("DefaultStockID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Mô tả thêm thông tin hàng hóa, quy cách");
            entity.Property(e => e.DiscountAccount).HasMaxLength(20);
            entity.Property(e => e.DiscountType)
                .HasDefaultValueSql("((0))")
                .HasComment("Loại chiết khấu (0= % chiết khấu;1= Số tiền chiết khấu, ; 2= Số tiền CK/1 đơn vị SL)");
            entity.Property(e => e.ExportTaxRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế xuất khẩu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FixedSalePrice)
                .HasComment("Giá bán cố định")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.FixedUnitPrice)
                .HasComment("Đơn giá mua cố định")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.FrontEndFormula).HasComment("Công thức tính số lượng trên chứng từ bán hàng do NSD nhập");
            entity.Property(e => e.GuarantyPeriod)
                .HasMaxLength(100)
                .HasComment("Thời hạn bảo hành");
            entity.Property(e => e.Image).HasComment("Hình ảnh");
            entity.Property(e => e.ImportTaxRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế nhập khẩu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.InventoryAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản kho");
            entity.Property(e => e.InventoryCategorySpecialTaxId)
                .HasComment("Nhóm HHDV chịu thuế tiêu thu đặc biệt")
                .HasColumnName("InventoryCategorySpecialTaxID");
            entity.Property(e => e.InventoryItemCategoryCode).HasComment("Lưu Mã của các nhóm VTHH, phân tách nhau bởi dấu ;");
            entity.Property(e => e.InventoryItemCategoryList).HasComment("Lưu MISACodeID của các nhóm VTHH, phân tách nhau bởi dấu ;");
            entity.Property(e => e.InventoryItemCode)
                .HasMaxLength(50)
                .HasDefaultValueSql("('')")
                .HasComment("Mã vật tư, hàng hóa");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên vật tư, hàng hóa");
            entity.Property(e => e.InventoryItemSource)
                .HasMaxLength(255)
                .HasComment("Nguồn gốc hàng hóa");
            entity.Property(e => e.InventoryItemType)
                .HasDefaultValueSql("((0))")
                .HasComment("Tính chất:0 Là Vật tư hàng hóa; 1: Là thành phẩm; 2 Là dịch vụ;3 Chỉ là diễn giải");
            entity.Property(e => e.IsFollowSerialNumber)
                .HasDefaultValueSql("((0))")
                .HasComment("Theo dõi theo mã quy cách");
            entity.Property(e => e.IsSaleDiscount)
                .HasDefaultValueSql("((0))")
                .HasComment("Có chiết khấu hay ko? (Nếu giá trị được = True thì khi bán hàng lấy % chiết khấu hoặc số tiền chiết khấu từ danh mục lên cột chiết khấu trên hóa đơn bán hàng)");
            entity.Property(e => e.IsSystem).HasComment("Là hệ thống");
            entity.Property(e => e.IsUnitPriceAfterTax).HasComment("Là đơn giá sau thuế");
            entity.Property(e => e.MinimumStock)
                .HasComment("Số lượng tồn tối thiểu")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseDescription)
                .HasMaxLength(500)
                .HasComment("Diễn giải khi mua");
            entity.Property(e => e.PurchaseDiscountRate)
                .HasComment("Tỷ lệ chiết khấu khi mua hàng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReturnAccount).HasMaxLength(20);
            entity.Property(e => e.SaleAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản doanh thu");
            entity.Property(e => e.SaleDescription)
                .HasMaxLength(500)
                .HasComment("Diễn giải khi bán");
            entity.Property(e => e.SaleOffAccount).HasMaxLength(20);
            entity.Property(e => e.SalePrice1)
                .HasComment("Đơn giá bán 1")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SalePrice2)
                .HasComment("Đơn giá bán 2")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SalePrice3)
                .HasComment("Đơn giá bán 3")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.TacareerGroupId).HasColumnName("TACareerGroupID");
            entity.Property(e => e.TaxRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất GTGT: 0=0%;5=5%;10=10%;-1=KCT")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá mua")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vat43type)
                .HasMaxLength(50)
                .HasDefaultValueSql("(N'Chưa xác định')")
                .HasColumnName("VAT43Type");

            entity.HasOne(d => d.BaseOnFormulaNavigation).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.BaseOnFormula)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_InventoryItem_InventoryQuantityFormulaTemplate");

            entity.HasOne(d => d.Branch).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_InventoryItem_OrganizationUnit");

            entity.HasOne(d => d.CogsaccountNavigation).WithMany(p => p.InventoryItemCogsaccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Cogsaccount);

            entity.HasOne(d => d.DefaultStock).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.DefaultStockId)
                .HasConstraintName("FK_InventoryItem_Stock_Default");

            entity.HasOne(d => d.DiscountAccountNavigation).WithMany(p => p.InventoryItemDiscountAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DiscountAccount);

            entity.HasOne(d => d.InventoryAccountNavigation).WithMany(p => p.InventoryItemInventoryAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.InventoryAccount);

            entity.HasOne(d => d.InventoryCategorySpecialTax).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.InventoryCategorySpecialTaxId)
                .HasConstraintName("FK_InventoryItem_InventoryItemCategorySpecialTax");

            entity.HasOne(d => d.ReturnAccountNavigation).WithMany(p => p.InventoryItemReturnAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.ReturnAccount);

            entity.HasOne(d => d.SaleAccountNavigation).WithMany(p => p.InventoryItemSaleAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.SaleAccount);

            entity.HasOne(d => d.SaleOffAccountNavigation).WithMany(p => p.InventoryItemSaleOffAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.SaleOffAccount);

            entity.HasOne(d => d.Unit).WithMany(p => p.InventoryItems)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_InventoryItem_Unit");
        });

        modelBuilder.Entity<InventoryItemBelongToCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InventoryItemBelongToCategory");

            entity.HasIndex(e => new { e.InventoryItemId, e.InventoryCategoryId }, "CLIX_InventoryItemBelongToCategory")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.InventoryCategoryId).HasColumnName("InventoryCategoryID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");

            entity.HasOne(d => d.InventoryCategory).WithMany()
                .HasForeignKey(d => d.InventoryCategoryId)
                .HasConstraintName("FK_InventoryItemBelongToCategory_InventoryItemCategory");

            entity.HasOne(d => d.InventoryItem).WithMany()
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemBelongToCategory_InventoryItem");
        });

        modelBuilder.Entity<InventoryItemCalculatePriceError>(entity =>
        {
            entity.HasKey(e => e.ErrorId);

            entity.Property(e => e.ErrorId)
                .ValueGeneratedNever()
                .HasColumnName("ErrorID");
            entity.Property(e => e.CalculatePriceMethod)
                .HasMaxLength(50)
                .HasComment("BQTT: Phuong phap binh quan tuc thoi\r\n");
            entity.Property(e => e.DatetimeAct)
                .HasColumnType("datetime")
                .HasColumnName("Datetime_act");
            entity.Property(e => e.InventoryItemId)
                .HasMaxLength(50)
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsPostToManagementBook).HasComment("Phân biệt tính giá cho sổ tài chính hay sổ quản trị: =0 Số tài chinh; =1 cho sổ quản trị");
            entity.Property(e => e.StockId)
                .HasMaxLength(50)
                .HasColumnName("StockID");
        });

        modelBuilder.Entity<InventoryItemCategory>(entity =>
        {
            entity.HasKey(e => e.InventoryCategoryId);

            entity.ToTable("InventoryItemCategory", tb =>
                {
                    tb.HasComment("Nhóm VTHH");
                    tb.HasTrigger("trg_InventoryItemCategory_DataChanged");
                });

            entity.HasIndex(e => e.InventoryCategoryCode, "IX_InventoryItemCategory")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.InventoryCategoryId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Loại vật tư")
                .HasColumnName("InventoryCategoryID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả loại hàng hóa");
            entity.Property(e => e.Grade)
                .HasDefaultValueSql("((1))")
                .HasComment("Cấp bậc");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.InventoryCategoryCode)
                .HasMaxLength(20)
                .HasComment("Mã loại vật tư");
            entity.Property(e => e.InventoryCategoryName)
                .HasMaxLength(128)
                .HasComment("Tên loại vật tư");
            entity.Property(e => e.IsParent).HasComment("Là cha");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasComment("Mã cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<InventoryItemCategorySpecialTax>(entity =>
        {
            entity.HasKey(e => e.InventoryCategorySpecialTaxId);

            entity.ToTable("InventoryItemCategorySpecialTax", tb => tb.HasComment("Bảng nhóm HHDV chịu thuế TTĐB"));

            entity.HasIndex(e => e.InventoryCategorySpecialTaxCode, "IX_InventoryItemCategorySpecialTax")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.InventoryCategorySpecialTaxId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK nhóm thuế TTĐB")
                .HasColumnName("InventoryCategorySpecialTaxID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Grade)
                .HasDefaultValueSql("((1))")
                .HasComment("Cấp bậc");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.InventoryCategorySpecialTaxCode)
                .HasMaxLength(20)
                .HasComment("Mã nhóm HH chịu thuế TTĐB");
            entity.Property(e => e.InventoryCategorySpecialTaxName)
                .HasMaxLength(255)
                .HasComment("Tên nhóm HH chịu thuế TTĐB");
            entity.Property(e => e.IsParent).HasComment("Là cha");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống. VD: Vật tư, Hàng hóa, Dịch vụ được thiết lập là IsSystem=TRUE.");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasComment("Mã cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.SubsectionCode).HasMaxLength(20);
            entity.Property(e => e.SubsectionName).HasMaxLength(255);
            entity.Property(e => e.TaxRate)
                .HasComment("Thuế suất thuế TTĐB")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Unit)
                .HasMaxLength(100)
                .HasComment("Đơn vị tính");
        });

        modelBuilder.Entity<InventoryItemCategorySpecialTaxDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InventoryItemCategorySpecialTaxDetail");

            entity.Property(e => e.Fromdate).HasColumnType("datetime");
            entity.Property(e => e.InventoryCategorySpecialTaxCode).HasMaxLength(20);
            entity.Property(e => e.InventoryCategorySpecialTaxName).HasMaxLength(255);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Todate).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(100);
        });

        modelBuilder.Entity<InventoryItemDetailDiscount>(entity =>
        {
            entity.HasKey(e => e.InventoryItemDetailId);

            entity.ToTable("InventoryItemDetailDiscount", tb => tb.HasComment("Bảng chi tiết chiết khấu theo từng mặt hàng theo  số lượng"));

            entity.Property(e => e.InventoryItemDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Vật tư")
                .HasColumnName("InventoryItemDetailID");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Số tiền chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountRate)
                .HasComment("Tỷ lệ % chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FromQuantity)
                .HasComment("Từ số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InventoryItemId)
                .HasComment("FK")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.ToQuantity)
                .HasComment("Đến số lượng")
                .HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InventoryItemDetailDiscounts)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemDetailDiscount_InventoryItem");
        });

        modelBuilder.Entity<InventoryItemDetailNorm>(entity =>
        {
            entity.HasKey(e => e.InventoryItemDetailId);

            entity.ToTable("InventoryItemDetailNorm", tb => tb.HasComment("chi tiết định mức nguyên vật liệu"));

            entity.Property(e => e.InventoryItemDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Vật tư")
                .HasColumnName("InventoryItemDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InventoryItemId)
                .HasComment("FK")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.MaterialId)
                .HasComment("Mã nguyên vật liệu (Các VTHH có tính chất là VTHH)")
                .HasColumnName("MaterialID");
            entity.Property(e => e.MaterialName)
                .HasMaxLength(500)
                .HasComment("Tên nguyên vật liệu");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InventoryItemDetailNorms)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemDetailNorm_InventoryItem");

            entity.HasOne(d => d.Unit).WithMany(p => p.InventoryItemDetailNorms)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_InventoryItemDetailNorm_Unit");
        });

        modelBuilder.Entity<InventoryItemDetailSerialType>(entity =>
        {
            entity.HasKey(e => e.InventoryItemDetailId);

            entity.ToTable("InventoryItemDetailSerialType", tb => tb.HasComment("Chi tiết Loại quy cách"));

            entity.Property(e => e.InventoryItemDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("InventoryItemDetailID");
            entity.Property(e => e.AllowDuplicate).HasComment("Cho phép trùng");
            entity.Property(e => e.DisplayName)
                .HasMaxLength(128)
                .HasComment("Tên hiển thị");
            entity.Property(e => e.InventoryItemId)
                .HasComment("FK: KHóa ngoại")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.Selected).HasComment("Có được chọn hay không?");
            entity.Property(e => e.SerialTypeName)
                .HasMaxLength(128)
                .HasComment("Tên mã quy cách");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InventoryItemDetailSerialTypes)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemDetailSerialType_InventoryItem");
        });

        modelBuilder.Entity<InventoryItemHistory>(entity =>
        {
            entity.HasKey(e => e.InventoryItemHistoryId).HasName("PK_InventoryItemHistory_1");

            entity.ToTable("InventoryItemHistory");

            entity.HasIndex(e => e.BranchId, "IX_HistoryBranchID");

            entity.HasIndex(e => e.InventoryItemId, "IX_HistoryInventoryItemID");

            entity.HasIndex(e => e.InventoryItemHistoryId, "IX_InventoryItemHistory");

            entity.HasIndex(e => new { e.BranchId, e.IsPostToManagementBook, e.StockId, e.InventoryItemId }, "IX_InventoryItemHistory_BranchID_StockID_InventoryID");

            entity.HasIndex(e => e.StockId, "IX_InventoryItemHistory_StockID");

            entity.HasIndex(e => new { e.InwardRefId, e.BranchId, e.IsPostToManagementBook, e.OutwardRefId }, "IX_InwardRefID_OutRefID");

            entity.HasIndex(e => e.IsUnUpdateOutwardPrice, "IX_IsUnUpdateOutwardPrice_InventoryItemHistory");

            entity.HasIndex(e => e.OutwardRefDetailId, "IX_OutwardRefDetailID_History");

            entity.Property(e => e.InventoryItemHistoryId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InventoryItemHistoryID");
            entity.Property(e => e.AdjustOutwardRefDetailId).HasColumnName("AdjustOutwardRefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.InreportType)
                .HasDefaultValueSql("((0))")
                .HasColumnName("INReportType");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InwardAmountBalance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardMainQuantityBalance).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InwardMainUnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardPostedDate).HasColumnType("datetime");
            entity.Property(e => e.InwardRefDetailId).HasColumnName("InwardRefDetailID");
            entity.Property(e => e.InwardRefId).HasColumnName("InwardRefID");
            entity.Property(e => e.InwardRefOrder)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.IsPosted).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUnUpdateOutwardPrice).HasDefaultValueSql("((0))");
            entity.Property(e => e.MainOutwardQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OutwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardMainUnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OutwardRefDetailId).HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.OutwardRefId).HasColumnName("OutwardRefID");
            entity.Property(e => e.OutwardRefOrder)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime");
            entity.Property(e => e.StockId).HasColumnName("StockID");
        });

        modelBuilder.Entity<InventoryItemLogOverQuantity>(entity =>
        {
            entity.HasKey(e => e.OvercomeQuantityId);

            entity.ToTable("InventoryItemLogOverQuantity");

            entity.Property(e => e.OvercomeQuantityId)
                .ValueGeneratedNever()
                .HasColumnName("OvercomeQuantityID");
            entity.Property(e => e.AccumQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.AccumQuantityBefore)
                .HasComment("Tồn ngay trước đó, trước khi thực hiện xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CalculateId).HasColumnName("CalculateID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.InventoryItemCode).HasMaxLength(50);
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.StockCode).HasMaxLength(50);
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.StockName).HasMaxLength(128);
        });

        modelBuilder.Entity<InventoryItemLogUnPost>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("InventoryItemLogUnPost");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("LogID");
            entity.Property(e => e.ActionTypeId)
                .HasComment("=1: Bỏ ghi sổ ; = 2: Ghi sổ ")
                .HasColumnName("ActionTypeID");
            entity.Property(e => e.ApplicationPartAlias)
                .HasMaxLength(500)
                .HasComment("Phân hệ");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ComputerIp)
                .HasMaxLength(150)
                .HasComment("Địa chỉ IP máy tính đăng nhập")
                .HasColumnName("ComputerIP");
            entity.Property(e => e.ComputerName)
                .HasMaxLength(150)
                .HasComment("Tên máy tính đăng nhập");
            entity.Property(e => e.DatetimeAction)
                .HasComment("Thời gian xảy ra  bỏ ghi sổ hoặc ghi sổ")
                .HasColumnType("datetime");
            entity.Property(e => e.InrefOrder)
                .HasComment("Thời gian ghi chứng từ")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsWorkingWithManagementBook).HasComment("=1: làm việc trên sổ quản trị;\r\n=0 : làm việc trên sổ tài chinh;\r\n");
            entity.Property(e => e.LoginName)
                .HasMaxLength(100)
                .HasComment("Tên đăng nhập");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("Mã dòng vật tư trong chứng từ tương ứng trong table Detail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("Mã chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.Reference).HasComment("Tham chiếu");
            entity.Property(e => e.UserId)
                .HasComment("UserID thực hiện")
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<InventoryItemPriceFifo>(entity =>
        {
            entity.HasKey(e => e.InventoryItemFifopriceId).IsClustered(false);

            entity.ToTable("InventoryItemPriceFIFO");

            entity.HasIndex(e => e.Amount, "IX_Amount");

            entity.HasIndex(e => e.CalculateId, "IX_CalculateID");

            entity.HasIndex(e => new { e.CalculateId, e.BranchId, e.IsPostToManagementBook, e.StockId, e.InventoryItemId }, "IX_ClusterIndex_InventoryItemPriceFIFO").IsClustered();

            entity.HasIndex(e => e.BranchId, "IX_HistoryBranchID");

            entity.HasIndex(e => e.InventoryItemId, "IX_HistoryInventoryItemID");

            entity.HasIndex(e => e.InventoryLedgerIdinward, "IX_History_InventoryLedgerIDInward");

            entity.HasIndex(e => e.InventoryLedgerIdoutward, "IX_History_InventoryLedgerIDOutward");

            entity.HasIndex(e => e.InventoryLedgerIddeduct, "IX_InventoryLedgerIDDeduct");

            entity.HasIndex(e => e.InwardRefOrder, "IX_InwardRefOrder");

            entity.HasIndex(e => e.MainQuantity, "IX_MainQuantity_InventoryItemPriceFIFO");

            entity.HasIndex(e => e.OutwardRefDetailId, "IX_OutwardRefDetailID_History");

            entity.HasIndex(e => e.StockId, "IX_StockID");

            entity.Property(e => e.InventoryItemFifopriceId)
                .ValueGeneratedNever()
                .HasColumnName("InventoryItemFIFOpriceID");
            entity.Property(e => e.AdjustOutwardRefDetailId).HasColumnName("AdjustOutwardRefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountNotRound).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.AmountOutwardCalculate)
                .HasDefaultValueSql("((0))")
                .HasComment("Giá trị xuất của dòng xuất; đối voi CT nhập xuất hết phần cuối cùng , amount này bằng tổng ban đầu trừ đi tổng đã xuất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CalculateId)
                .HasComment("Dùng để phân biệt chức năng tính giá khi Ghi sổ và chạy chức năng tính giá; = GuiEmpty khi là chức năng tính giá")
                .HasColumnName("CalculateID");
            entity.Property(e => e.DescriptionRow).HasMaxLength(1000);
            entity.Property(e => e.InreportType).HasColumnName("INReportType");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryLedgerIddeduct)
                .HasComment("Dùng để phân biệt giữa CT giảm trừ và CT xuất ; Là InventoryLedgerID của chứng từ giảm điều chỉnh : VD kiểm kê ; =1: Là giảm trừ ; =0 hoặc NULL  là CT xuất")
                .HasColumnName("InventoryLedgerIDDeduct");
            entity.Property(e => e.InventoryLedgerIdinward).HasColumnName("InventoryLedgerIDInward");
            entity.Property(e => e.InventoryLedgerIdoutward).HasColumnName("InventoryLedgerIDOutward");
            entity.Property(e => e.InwardAmountBalance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardMainQuantityBalance).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InwardMainUnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardMainUnitPriceForUpdateLedger)
                .HasComment("Giá này dành tính cho hàng mua trả lại sau đó update vào Ledger")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardMainUnitPriceOrigin)
                .HasComment("Giá của nhập khi: lần đầu lấy theo giá CT nhập, sau khi có giảm trừ  cho các CT điều chỉnh phía trước thì thay đổi giá nhập sẽ update vào trường naỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardPostedDate).HasColumnType("datetime");
            entity.Property(e => e.InwardRefDetailId).HasColumnName("InwardRefDetailID");
            entity.Property(e => e.InwardRefId).HasColumnName("InwardRefID");
            entity.Property(e => e.InwardRefOrder).HasColumnType("datetime");
            entity.Property(e => e.IsAdjust)
                .HasDefaultValueSql("((0))")
                .HasComment("=1: Chung tu nhap kho dieu chinh Gia tri; =0: Chung tu nhap kho thong thuong");
            entity.Property(e => e.IsAllocateWithAdjust)
                .HasDefaultValueSql("((0))")
                .HasComment("Đối với dòng nhập khi phân bổ cho dòng xuất:\n=1 : Nếu có tham gia xuất cùng với dòng nhập điều chỉnh SL =0; Amount > 0\n; = 0: Nếu không có dòng nhập điều chỉnh( SL=0, Amount > 0) tham gia xuất cùng");
            entity.Property(e => e.IsRemainOutwardBeforeStartDate)
                .HasDefaultValueSql("((0))")
                .HasComment("=1: là dòng chứa phần tồn xuất chưa hết trước ngày StartDate; =0: Là dòng nhập và phân bổ binh thường");
            entity.Property(e => e.IsRowForGetOutwardPriceSareturn)
                .HasDefaultValueSql("((0))")
                .HasComment("=1: Giá xuất đuoc dùng để update lại cho hàng bán trả lại;\n=0: Không dùng để  update lại cho hàng bán trả lại;")
                .HasColumnName("IsRowForGetOutwardPriceSAreturn");
            entity.Property(e => e.MainOutwardQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainQuantityNotRound).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.OutwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardDatetimeDeduct).HasColumnType("datetime");
            entity.Property(e => e.OutwardMainUnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OutwardRefDetailId).HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.OutwardRefId).HasColumnName("OutwardRefID");
            entity.Property(e => e.OutwardRefOrder).HasColumnType("datetime");
            entity.Property(e => e.StockId).HasColumnName("StockID");
        });

        modelBuilder.Entity<InventoryItemPriceFifoadjust>(entity =>
        {
            entity.HasKey(e => e.InventoryItemFifoadjust);

            entity.ToTable("InventoryItemPriceFIFOAdjust");

            entity.HasIndex(e => new { e.CalculateId, e.InventoryLedgerIdinward }, "IX_Calculate_inward");

            entity.HasIndex(e => new { e.CalculateId, e.InventoryLedgerIdadjust }, "IX_InventoryItemPriceFIFOAdjust_InventoryLedgerIDAdjust");

            entity.HasIndex(e => new { e.BranchId, e.InwardRefDetailId, e.IsPostToManagementBook }, "IX_InventoryItemPriceFIFOAdjust_InwardRefDetailID");

            entity.HasIndex(e => new { e.BranchId, e.IsPostToManagementBook, e.OutwardRefDetailId }, "IX_InventoryItemPriceFIFOAdjust_OutwardRefDetailID");

            entity.Property(e => e.InventoryItemFifoadjust)
                .ValueGeneratedNever()
                .HasColumnName("InventoryItemFIFOAdjust");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CalculateId).HasColumnName("CalculateID");
            entity.Property(e => e.DatetimeInsert).HasColumnType("datetime");
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryLedgerIdadjust).HasColumnName("InventoryLedgerIDAdjust");
            entity.Property(e => e.InventoryLedgerIdinward).HasColumnName("InventoryLedgerIDInward");
            entity.Property(e => e.InwardRefDetailId).HasColumnName("InwardRefDetailID");
            entity.Property(e => e.OutwardRefDetailId).HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.StockId).HasColumnName("StockID");
        });

        modelBuilder.Entity<InventoryItemPriceFifoadjustReport>(entity =>
        {
            entity.HasKey(e => e.InventoryItemFifoadjust);

            entity.ToTable("InventoryItemPriceFIFOAdjustReport");

            entity.HasIndex(e => new { e.CalculateId, e.InventoryLedgerIdinward }, "IX_Calculate_inward_Report");

            entity.HasIndex(e => e.InventoryLedgerIdadjust, "IX_InventoryItemPriceFIFOAdjustReport");

            entity.HasIndex(e => e.InventoryLedgerIdinward, "IX_InventoryItemPriceFIFOAdjustReport_1");

            entity.HasIndex(e => new { e.OutwardRefDetailId, e.BranchId, e.IsPostToManagementBook }, "IX_InventoryItemPriceFIFOAdjustReport_2");

            entity.HasIndex(e => new { e.InwardRefDetailId, e.BranchId, e.IsPostToManagementBook }, "IX_InventoryItemPriceFIFOAdjustReport_3");

            entity.HasIndex(e => new { e.BranchId, e.InwardRefDetailId, e.IsPostToManagementBook }, "IX_InventoryItemPriceFIFOAdjustReport_InwardRefDetailID");

            entity.HasIndex(e => new { e.BranchId, e.IsPostToManagementBook, e.OutwardRefDetailId }, "IX_InventoryItemPriceFIFOAdjustReport_OutwardRefDetailID");

            entity.Property(e => e.InventoryItemFifoadjust)
                .ValueGeneratedNever()
                .HasColumnName("InventoryItemFIFOAdjust");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CalculateId).HasColumnName("CalculateID");
            entity.Property(e => e.DatetimeInsert).HasColumnType("datetime");
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryLedgerIdadjust).HasColumnName("InventoryLedgerIDAdjust");
            entity.Property(e => e.InventoryLedgerIdinward).HasColumnName("InventoryLedgerIDInward");
            entity.Property(e => e.InwardRefDetailId).HasColumnName("InwardRefDetailID");
            entity.Property(e => e.OutwardRefDetailId).HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.StockId).HasColumnName("StockID");
        });

        modelBuilder.Entity<InventoryItemPriceFifoassembly>(entity =>
        {
            entity.HasKey(e => e.InventoryItemFifoassemblyId);

            entity.ToTable("InventoryItemPriceFIFOAssembly");

            entity.HasIndex(e => new { e.CalculateId, e.InventoryLedgerIdproduct }, "IX_InventoryItemPriceFIFOAssembly_InventoryLedgerIDProduct");

            entity.Property(e => e.InventoryItemFifoassemblyId)
                .ValueGeneratedNever()
                .HasColumnName("InventoryItemFIFOAssemblyID");
            entity.Property(e => e.AmountProduct).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AssemblyRefId).HasColumnName("AssemblyRefID");
            entity.Property(e => e.CalculateId).HasColumnName("CalculateID");
            entity.Property(e => e.DatetimeInsert).HasColumnType("datetime");
            entity.Property(e => e.InventoryLedgerIdproduct).HasColumnName("InventoryLedgerIDProduct");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(22, 8)");
        });

        modelBuilder.Entity<InventoryItemPriceFifotransfer>(entity =>
        {
            entity.HasKey(e => e.InventoryItemFifotransferId)
                .HasName("PK_InventoryItemPriceFIFOTransferID")
                .IsClustered(false);

            entity.ToTable("InventoryItemPriceFIFOTransfer");

            entity.HasIndex(e => new { e.CalculateId, e.InventoryLedgerId }, "IX_Calculate_IDLedger");

            entity.HasIndex(e => new { e.CalculateId, e.InventoryLedgerId, e.RefDetailId, e.IsInward }, "IX_Cluster_InventoryItemPriceFIFOTransfer").IsClustered();

            entity.Property(e => e.InventoryItemFifotransferId)
                .ValueGeneratedNever()
                .HasColumnName("InventoryItemFIFOTransferID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CalculateId).HasColumnName("CalculateID");
            entity.Property(e => e.DatetimeInsert).HasColumnType("datetime");
            entity.Property(e => e.InventoryLedgerId).HasColumnName("InventoryLedgerID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
        });

        modelBuilder.Entity<InventoryItemPriceOutwardImmeNoStock>(entity =>
        {
            entity.HasKey(e => e.IdAction)
                .HasName("PK_InventoryItemPriceOutwardImmeNoStockNoStock")
                .IsClustered(false);

            entity.ToTable("InventoryItemPriceOutwardImmeNoStock");

            entity.HasIndex(e => new { e.BranchId, e.ActionRowOnMaterial, e.IsPostToManagementBook, e.InventoryItemId }, "Cluster_Colums_NoStock").IsClustered();

            entity.HasIndex(e => e.AssemblyRefId, "IX_AssemblyRefID_NoStock");

            entity.HasIndex(e => e.BranchId, "IX_BranchID");

            entity.HasIndex(e => e.DateTimeAction, "IX_DateTimeAction_NoStock");

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_InventoryItemPriceOutwardImmeNoStock_RefID");

            entity.HasIndex(e => new { e.OutwardRefId, e.OutwardRefDetailId }, "IX_OutwardRefID_OutwardRefDetail_NoStock");

            entity.HasIndex(e => e.RefDetailId, "IX_RefDetailID_NoStock");

            entity.HasIndex(e => e.PostedDate, "ix_PostedDate_NoStock");

            entity.Property(e => e.IdAction)
                .ValueGeneratedNever()
                .HasColumnName("ID_Action");
            entity.Property(e => e.AccumAmountStock).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumQuantityMainUnit).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ActionDetail).HasComment("=1: Tồn đầu; \r\n=2: Nhập kho thông thường ;\r\n=3:  Trả lại hàng mua ( không áp giá xuất kho , nhưng vẫn sử dụng SL, Giá trị để tính giá xuất ) \r\n; 4: Xuất kho thông thường\r\n ;5: Điều chuyển kho\r\n‘ ;=6: Nhập kho bán hàng trả lại\r\n");
            entity.Property(e => e.ActionRowOnMaterial).HasComment("Tăng theo thời gian đối với vật tư  trong 1  kho. ");
            entity.Property(e => e.AmountRow)
                .HasComment("Giá trị trên row , theo nguyên tệ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountRowMainUnit)
                .HasComment("Giá trị row theo ĐV tính chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountStockAfterActionMainUnit)
                .HasComment("Giá trị kho sau hành động nhập/ xuất của row hiện tại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AssemblyRefId)
                .HasComment("Mã chứng từ lắp ráp")
                .HasColumnName("AssemblyRefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ConvertRate)
                .HasComment("Tỷ lệ quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DateTimeAction)
                .HasComment("Thời gian xảy ra action nhập xuất kho, chuyển kho khi thực hiện ghi sổ/ bỏ ghi sổ;  gồm cả Date + Time\r\nGiá trị= Phần date của  PostedDate  + Phần time của Inreforder của table InventoryLedger\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasComment("Phép toán Nhân ;  Chia  khi chuyển mã đơn vị tính");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã VT")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsNeedUpdatePrice)
                .HasDefaultValueSql("((0))")
                .HasComment("=1: cần update lại giá xuất kho ; =0: Ko can update lai gia xuat");
            entity.Property(e => e.IsPostToManagementBook).HasComment("=0: Thuộc về sổ tài chính; =1: Thuộc về sổ quản trị");
            entity.Property(e => e.IsUnUpdateOutwardPrice).HasComment("Tương tự cột này trong InventoryLedger; \r\nKo cập nhật giá xuất (Áp dụng cho bán đại lý, mua trả lại, giảm giá, điều chỉnh giảm GT, ...):Dòng chứng từ xuất nhưng Không cập nhật đơn giá: \r\n= 1 là không  cập nhật ;  = 0 là có cập nhật/ trường hợp k phải chứng từ xuất thì = 0");
            entity.Property(e => e.LastTimeUpdatePrice)
                .HasComment("Thời gian update lại giá xuất kho gần đây nhất")
                .HasColumnType("datetime");
            entity.Property(e => e.MainUnitId)
                .HasComment("Mã đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.OutwardRefDetailId)
                .HasComment("RefDetailID của phiếu xuất kho (dùng cho Nhập kho từ hàng bán trả lại Lấy từ giá xuất bán)")
                .HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.OutwardRefId)
                .HasComment("RefID của phiếu xuất kho (dùng cho Nhập kho từ hàng bán trả lại Lấy từ giá xuất bán)")
                .HasColumnName("OutwardRefID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PriceMainUnit)
                .HasComment("Giá VT  theo đơn vị tính chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.PriceOutwardStockMainUnit)
                .HasComment("Giá xuất kho VT sau hành động , theo ĐV tính chính , theo nguyên tệ")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.PriceRow)
                .HasComment("Giá VT trên row vào , theo nguyên tệ")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng VT")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityMainUnit)
                .HasComment("Số lượng VT theo đơn vị tính chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("Lưu RefIDDetail tương ứng với chi tiết trong table Detail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("Lưu RefID tương ứng với chi tiết trong table Master")
                .HasColumnName("RefID");
            entity.Property(e => e.RefType).HasComment("Mã loại chứng từ");
            entity.Property(e => e.RemainQuantityMainUnit)
                .HasComment("Số lượng tồn sau hành động này tại dòng hiện tại theo ĐV tính chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự row trong bảng Detail");
            entity.Property(e => e.TypeActionInOut).HasComment("=1: Nhập ; = 2: Xuất kho;");
            entity.Property(e => e.UnitId)
                .HasComment("Mã đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceMethod).HasComment("Phân biệt giá nhập tay hay lấy từ giá xuất ( ĐV hàng bán trả lại); 0 = Lấy từ giá xuất bán; 1 = Nhập đơn giá bằng tay");
        });

        modelBuilder.Entity<InventoryItemPriceOutwardImmediate>(entity =>
        {
            entity.HasKey(e => e.IdAction).IsClustered(false);

            entity.ToTable("InventoryItemPriceOutwardImmediate");

            entity.HasIndex(e => new { e.StockId, e.InventoryItemId, e.ActionRowOnMaterial, e.IsPostToManagementBook, e.BranchId }, "Cluster_Colums").IsClustered();

            entity.HasIndex(e => e.AssemblyRefId, "IX_AssemblyRefID");

            entity.HasIndex(e => e.BranchId, "IX_BranchID");

            entity.HasIndex(e => e.DateTimeAction, "IX_DateTimeAction");

            entity.HasIndex(e => e.RefId, "IX_InventoryItemPriceOutwardImmediate_RefID");

            entity.HasIndex(e => new { e.OutwardRefId, e.OutwardRefDetailId }, "IX_OutwardRefID_OutwardRefDetail");

            entity.HasIndex(e => e.RefDetailId, "IX_RefDetailID");

            entity.HasIndex(e => e.PostedDate, "ix_PostedDate");

            entity.Property(e => e.IdAction)
                .ValueGeneratedNever()
                .HasColumnName("ID_Action");
            entity.Property(e => e.AccumAmountStock)
                .HasComment("là tổng giá trị lũy kế , tổng giá trị  nhập - tổng giá trị xuất: có thể âm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumQuantityMainUnit)
                .HasDefaultValueSql("((0))")
                .HasComment("là số tồn thực tế có thể là âm = Tổng nhập - tổng xuất \r\n( tính trên 1 vật tư trong 1 kho)")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ActionDetail).HasComment("=1: Tồn đầu; \r\n=2: Nhập kho thông thường ;\r\n=3:  Trả lại hàng mua ( không áp giá xuất kho , nhưng vẫn sử dụng SL, Giá trị để tính giá xuất ) \r\n; 4: Xuất kho thông thường\r\n ;5: Điều chuyển kho\r\n‘ ;=6: Nhập kho bán hàng trả lại\r\n");
            entity.Property(e => e.ActionRowOnMaterial).HasComment("Tăng dần từ 1  theo thời gian đối với vật tư  trong 1 kho.  ");
            entity.Property(e => e.AmountRow)
                .HasComment("Giá trị trên row , theo nguyên tệ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountRowMainUnit)
                .HasComment("Giá trị row theo ĐV tính chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountStockAfterActionMainUnit)
                .HasComment("Giá trị kho sau hành động nhập/ xuất của row hiện tại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AssemblyRefId)
                .HasComment("Mã chứng từ lắp ráp")
                .HasColumnName("AssemblyRefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ConvertRate)
                .HasComment("Tỷ lệ quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DateTimeAction)
                .HasComment("Thời gian xảy ra action nhập xuất kho, chuyển kho khi thực hiện ghi sổ/ bỏ ghi sổ;  gồm cả Date + Time\r\nGiá trị= Phần date của  PostedDate  + Phần time của Inreforder của table InventoryLedger\r\n")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasComment("Mô tả");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasComment("Phép toán Nhân ;  Chia  khi chuyển mã đơn vị tính");
            entity.Property(e => e.InventoryItemId)
                .HasComment("ID vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsCaculateByStock)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNeedUpdatePrice)
                .HasDefaultValueSql("((0))")
                .HasComment("=1: cần update lại giá xuất kho ; =0: Ko can update lai gia xuat");
            entity.Property(e => e.IsPostToManagementBook).HasComment("=0: Thuộc về sổ tài chính; =1: Thuộc về sổ quản trị");
            entity.Property(e => e.IsUnUpdateOutwardPrice).HasComment("Tương tự cột này trong InventoryLedger; \r\nKo cập nhật giá xuất (Áp dụng cho bán đại lý, mua trả lại, giảm giá, điều chỉnh giảm GT, ...):Dòng chứng từ xuất nhưng Không cập nhật đơn giá: \r\n= 1 là không  cập nhật ;  = 0 là có cập nhật/ trường hợp k phải chứng từ xuất thì = 0");
            entity.Property(e => e.LastTimeUpdatePrice)
                .HasComment("Thời gian update lại giá xuất kho gần đây nhất")
                .HasColumnType("datetime");
            entity.Property(e => e.MainUnitId)
                .HasComment("Mã đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.OutwardRefDetailId)
                .HasComment("RefDetailID của phiếu xuất kho (dùng cho Nhập kho từ hàng bán trả lại Lấy từ giá xuất bán)")
                .HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.OutwardRefId)
                .HasComment("RefID của phiếu xuất kho (dùng cho Nhập kho từ hàng bán trả lại Lấy từ giá xuất bán)")
                .HasColumnName("OutwardRefID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PriceMainUnit)
                .HasComment("Giá VT  theo đơn vị tính chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.PriceOutwardStockMainUnit)
                .HasComment("Giá xuất kho VT sau hành động , theo ĐV tính chính , theo nguyên tệ")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.PriceRow)
                .HasComment("Giá VT trên row nhập vào , theo nguyên tệ")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng VT")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityMainUnit)
                .HasComment("Số lượng VT theo đơn vị tính chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("Lưu RefIDDetail tương ứng với chi tiết trong table Detail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("Lưu RefID tương ứng với chi tiết trong table Master")
                .HasColumnName("RefID");
            entity.Property(e => e.RefType).HasComment("Mã loại chứng từ");
            entity.Property(e => e.RemainQuantityMainUnit)
                .HasComment("Số lượng tồn sau hành động này tại dòng hiện tại theo ĐV tính chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự row trong bảng Detail");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
            entity.Property(e => e.TypeActionInOut).HasComment("=1: Nhập ; = 2: Xuất kho;\r\n");
            entity.Property(e => e.UnitId)
                .HasComment("Mã đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceMethod).HasComment("Phân biệt giá nhập tay hay lấy từ giá xuất ( ĐV hàng bán trả lại); 0 = Lấy từ giá xuất bán; 1 = Nhập đơn giá bằng tay");
        });

        modelBuilder.Entity<InventoryItemPurchaseFixedUnitPrice>(entity =>
        {
            entity.HasKey(e => e.InventoryItemDetailId);

            entity.ToTable("InventoryItemPurchaseFixedUnitPrice");

            entity.Property(e => e.InventoryItemDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InventoryItemDetailID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.Currency).WithMany(p => p.InventoryItemPurchaseFixedUnitPrices)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_InventoryItemPurchaseFixedUnitPrice_CCY");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InventoryItemPurchaseFixedUnitPrices)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemPurchaseFixedUnitPrice_InventoryItem");

            entity.HasOne(d => d.Unit).WithMany(p => p.InventoryItemPurchaseFixedUnitPrices)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_InventoryItemPurchaseFixedUnitPrice_Unit");
        });

        modelBuilder.Entity<InventoryItemPurchaseUnitPrice>(entity =>
        {
            entity.HasKey(e => e.InventoryItemDetailId);

            entity.ToTable("InventoryItemPurchaseUnitPrice", tb => tb.HasComment("Bảng chi tiết Đơn giá mua của VTHH"));

            entity.HasIndex(e => new { e.InventoryItemId, e.SortOrder }, "IX_InventoryItemPurchaseUnitPrice_InventoryItem");

            entity.Property(e => e.InventoryItemDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Vật tư")
                .HasColumnName("InventoryItemDetailID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("FK")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá mua")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.Currency).WithMany(p => p.InventoryItemPurchaseUnitPrices)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_InventoryItemPurchaseUnitPrice_CCY");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InventoryItemPurchaseUnitPrices)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemPurchaseUnitPrice_InventoryItem");

            entity.HasOne(d => d.Unit).WithMany(p => p.InventoryItemPurchaseUnitPrices)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_InventoryItemPurchaseUnitPrice_Unit");
        });

        modelBuilder.Entity<InventoryItemType>(entity =>
        {
            entity.HasKey(e => e.InventoryItemTypeValue);

            entity.ToTable("InventoryItemType", tb => tb.HasComment("Bảng lưu trữ các tính chất của VTHH"));

            entity.Property(e => e.InventoryItemTypeValue).ValueGeneratedNever();
            entity.Property(e => e.InventoryItemTypeName).HasMaxLength(100);
        });

        modelBuilder.Entity<InventoryItemUnitConvert>(entity =>
        {
            entity.ToTable("InventoryItemUnitConvert", tb => tb.HasComment("Bảng lưu đơn vị chuyển đổi"));

            entity.HasIndex(e => new { e.InventoryItemId, e.UnitId }, "IX_InventoryItemUnitConvert_InventoryItemID");

            entity.Property(e => e.InventoryItemUnitConvertId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Vật tư")
                .HasColumnName("InventoryItemUnitConvertID");
            entity.Property(e => e.ConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi về đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Phép tính chuyển đổi");
            entity.Property(e => e.FixedSalePrice)
                .HasComment("Giá bán cố định")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.InventoryItemId)
                .HasComment("FK Vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.SalePrice1)
                .HasComment("Đơn giá bán 1")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SalePrice2)
                .HasComment("Đơn giá bán 2")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SalePrice3)
                .HasComment("Đơn giá bán 3")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Số thứ tự");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị chuyển đổi")
                .HasColumnName("UnitID");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.InventoryItemUnitConverts)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_InventoryItemUnitConvert_InventoryItem");

            entity.HasOne(d => d.Unit).WithMany(p => p.InventoryItemUnitConverts)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InventoryItemUnitConvert_Unit");
        });

        modelBuilder.Entity<InventoryLedger>(entity =>
        {
            entity.ToTable("InventoryLedger", tb =>
                {
                    tb.HasComment("Sổ chi tiết vật tư (không cần dùng InventoryBalance)");
                    tb.HasTrigger("trg_InventoryLedger_DataChanged");
                });

            entity.HasIndex(e => e.ConfrontingRefDetailId, "IX_InventoryLedger_ConfrontingRefDetailID").HasFillFactor(90);

            entity.HasIndex(e => e.InrefOrder, "IX_InventoryLedger_INRefOrder").HasFillFactor(90);

            entity.HasIndex(e => new { e.InventoryItemId, e.StockId, e.InrefOrder }, "IX_InventoryLedger_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsPostToManagementBook, e.PostedDate, e.InventoryItemId }, "IX_InventoryLedger_IsPostToManagementBook_PostedDate");

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_InventoryLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => new { e.ExpiryDate, e.LotNo, e.InventoryItemId }, "IX_InventoryLedger_LotNo").HasFillFactor(90);

            entity.HasIndex(e => e.PostedDate, "IX_InventoryLedger_PostedDate").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_InventoryLedger_RefID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefDetailId, e.IsPostToManagementBook, e.AccountNumber }, "IX_RefDetailID_IsPostToManagementBook_AccNumber");

            entity.Property(e => e.InventoryLedgerId)
                .HasComment("PK - Sổ chi tiết vật tư")
                .HasColumnName("InventoryLedgerID");
            entity.Property(e => e.AccountName)
                .HasMaxLength(128)
                .HasComment("Tên tài khoản");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectCode)
                .HasMaxLength(50)
                .HasComment("Mã đối tượng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng hạch toán kế toán")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AccountObjectNameDi)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng ( lấy từ danh mục)")
                .HasColumnName("AccountObjectNameDI");
            entity.Property(e => e.AssemblyRefId).HasColumnName("AssemblyRefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ConfrontingRefDetailId)
                .HasComment("Số chứng từ nhập đối trừ (Áp dụng cho PP đích danh)")
                .HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId)
                .HasComment("Số chứng từ nhập đối trừ (Áp dụng cho PP đích danh)")
                .HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(255)
                .HasComment("Người nhận tiền/Người chi tiền");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(255)
                .HasComment("Mã hợp đồng");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.ContractName)
                .HasMaxLength(255)
                .HasComment("Tên hợp đồng");
            entity.Property(e => e.CorrespondingAccountNumber)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải detail");
            entity.Property(e => e.EmployeeCode)
                .HasMaxLength(25)
                .HasComment("Mã nhân viên");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(128)
                .HasComment("Tên nhân viên");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.FifoaccumInwardAmountMainUnitAfterRow)
                .HasComment("Tổng nhập lũy kế amount sau row nhập hiện tại tại ( so sánh theo thời gian hạch toán)")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FIFOAccumInwardAmountMainUnitAfterRow");
            entity.Property(e => e.FifoaccumInwardQuantityMainUnitAfterRow)
                .HasComment("Tổng lũy kế số lượng nhập kho theo ĐV tính chính , tính đến thời gian hạch toán của phiếu nhập,  tính cả dòng hiện tại")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("FIFOAccumInwardQuantityMainUnitAfterRow");
            entity.Property(e => e.FifoaccumLastUpdate)
                .HasColumnType("datetime")
                .HasColumnName("FIFOAccumLastUpdate");
            entity.Property(e => e.FifoaccumOutwardAmountMainUnitAfterRow)
                .HasComment("Tổng xuất lũy kế amount  sau row xuất hiện tại tại ( so sánh theo thời gian hạch toán)")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FIFOAccumOutwardAmountMainUnitAfterRow");
            entity.Property(e => e.FifoaccumOutwardQuantityMainUnitAfterRow)
                .HasComment("Tổng lũy kế số lượng xuất kho theo ĐV tính chính , tính đến trước thời gian hạch toán của phiếu xuất (  không tính  dòng hiện tại)")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("FIFOAccumOutwardQuantityMainUnitAfterRow");
            entity.Property(e => e.FifoinventoryLedgerIdfirstInwardForAllocate)
                .HasComment("InventoryLedgerID của dòng nhập kho đầu tiên phân bổ cho một phiếu xuất")
                .HasColumnName("FIFOInventoryLedgerIDfirstInwardForAllocate");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryItemCode)
                .HasMaxLength(50)
                .HasComment("Mã vật tư, hàng hóa");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên vật tư, hàng hóa");
            entity.Property(e => e.InventoryResaleTypeId).HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.InwardAmount)
                .HasComment("Giá trị nhập kho (Sổ tài chính)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardAmountBalance)
                .HasComment("Giá trị tồn trên chứng từ nhập kho (dùng cho phương pháp NTXT và đích danh) (Sổ tài chính)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng nhập kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InwardQuantityBalance)
                .HasComment("Số lượng tồn trên chứng từ nhập kho (dùng cho phương pháp NTXT và đích danh)")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.IsInward)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPostToManagementBook).HasComment("Trạng thái ghi vào vào sổ quản trị");
            entity.Property(e => e.IsPromotion).HasComment("1=Là hàng khuyến mại;0=không phải là hàng khuyến mại");
            entity.Property(e => e.IsUnUpdateOutwardPrice).HasComment("Ko cập nhật giá xuất (Áp dụng cho bán đại lý, mua trả lại, giảm giá, điều chỉnh giảm GT, ...)");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Có cần cập nhật dữ liệu từ các bảng dư thừa sang không, 0: không, 1: có. Sau khi cập nhật xong thì thiết lập thông tin này về =0");
            entity.Property(e => e.JobId)
                .HasComment("Công việc")
                .HasColumnName("JobID");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainInwardQuantity)
                .HasComment("Số lượng nhập kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainOutwardQuantity)
                .HasComment("Số lượng xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("ĐVT")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId)
                .HasComment("ID Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("ID đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OutwardAmount)
                .HasComment("Giá trị xuât kho (Sổ tài chính)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OutwardQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng xuất kho")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OutwardRefDetailId).HasColumnName("OutwardRefDetailID");
            entity.Property(e => e.OutwardRefId).HasColumnName("OutwardRefID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ProductionId).HasColumnName("ProductionID");
            entity.Property(e => e.ProductionOrderRefId)
                .HasComment("RefID của lệnh sản xuất")
                .HasColumnName("ProductionOrderRefID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractCode)
                .HasMaxLength(50)
                .HasColumnName("PUContractCode");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PucontractName)
                .HasMaxLength(255)
                .HasColumnName("PUContractName");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của chúng từ gốc")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của chứng từ gốc")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
            entity.Property(e => e.RefOrder).HasComment("Thứ tự của chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.SortOrder).HasComment("Dùng để sắp xếp các chứng từ nào insert vào trước sau chứng từ nào Insert vào sau");
            entity.Property(e => e.StockCode)
                .HasMaxLength(20)
                .HasComment("Mã kho");
            entity.Property(e => e.StockId)
                .HasComment("Kho")
                .HasColumnName("StockID");
            entity.Property(e => e.StockName)
                .HasMaxLength(128)
                .HasComment("Tên kho");
            entity.Property(e => e.UnitId)
                .HasComment("ĐVT")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá (Sổ tài chính)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceMethod).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<InventoryLogAction>(entity =>
        {
            entity.HasKey(e => e.IdLog).IsClustered(false);

            entity.ToTable("InventoryLogAction");

            entity.HasIndex(e => e.DateLog, "IX_DateLog");

            entity.Property(e => e.IdLog)
                .ValueGeneratedNever()
                .HasColumnName("ID_LOG");
            entity.Property(e => e.DateLog).HasColumnType("datetime");
            entity.Property(e => e.LogContent).HasMaxLength(500);
        });

        modelBuilder.Entity<InventoryQuantityFormulaTemplate>(entity =>
        {
            entity.HasKey(e => e.FormulaId);

            entity.ToTable("InventoryQuantityFormulaTemplate");

            entity.Property(e => e.FormulaId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("FormulaID");
            entity.Property(e => e.Formula).HasComment("Công thức mẫu");
            entity.Property(e => e.FormulaName)
                .HasMaxLength(128)
                .HasComment("Tên công thức");
            entity.Property(e => e.SortOrder).HasComment("Sắp xếp");
        });

        modelBuilder.Entity<InvestmentProject>(entity =>
        {
            entity.ToTable("InvestmentProject");

            entity.Property(e => e.InvestmentProjectId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InvestmentProjectID");
            entity.Property(e => e.AgencyIssued).HasMaxLength(200);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DateIssued).HasColumnType("datetime");
            entity.Property(e => e.District).HasMaxLength(100);
            entity.Property(e => e.DocurmentCode).HasMaxLength(200);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Inactive).HasDefaultValueSql("((0))");
            entity.Property(e => e.InvestmentAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvestmentProjectCode).HasMaxLength(12);
            entity.Property(e => e.InvestmentProjectName).HasMaxLength(200);
            entity.Property(e => e.MakingAddress).HasMaxLength(200);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(500);
            entity.Property(e => e.OwnerName).HasMaxLength(200);
            entity.Property(e => e.OwnerTaxCode).HasMaxLength(50);
            entity.Property(e => e.ProvinceOrCity).HasMaxLength(100);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.WardOrCommune).HasMaxLength(100);

            entity.HasOne(d => d.Branch).WithMany(p => p.InvestmentProjects)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_InvestmentProject_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.InvestmentProjects)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_InvestmentProject_CCY");
        });

        modelBuilder.Entity<InvoiceBot>(entity =>
        {
            entity.ToTable("InvoiceBot");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.BuyerAddress).HasMaxLength(400);
            entity.Property(e => e.BuyerFullName).HasMaxLength(255);
            entity.Property(e => e.BuyerName).HasMaxLength(400);
            entity.Property(e => e.BuyerTaxCode).HasMaxLength(50);
            entity.Property(e => e.CcyCode).HasMaxLength(10);
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InfoNd123status).HasColumnName("InfoND123Status");
            entity.Property(e => e.InvSvcProvider).HasMaxLength(50);
            entity.Property(e => e.InvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.InvoiceId).HasMaxLength(50);
            entity.Property(e => e.InvoiceNo).HasMaxLength(20);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrgId).HasMaxLength(50);
            entity.Property(e => e.PaymentMethod).HasMaxLength(128);
            entity.Property(e => e.Posted).HasDefaultValueSql("((-1))");
            entity.Property(e => e.SellerActiveStatus).HasMaxLength(50);
            entity.Property(e => e.SellerAddress).HasMaxLength(400);
            entity.Property(e => e.SellerName).HasMaxLength(400);
            entity.Property(e => e.SellerTaxCode).HasMaxLength(50);
            entity.Property(e => e.Series).HasMaxLength(20);
            entity.Property(e => e.SignedDate).HasColumnType("datetime");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.TemplateNo).HasMaxLength(25);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountWithoutVat).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTaxReductionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.VatRate).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<InvoiceBotCheckingStatus>(entity =>
        {
            entity.HasKey(e => e.InvoiceBotCheckingStatusId);

            entity.ToTable("InvoiceBotCheckingStatus");

            entity.Property(e => e.InvoiceBotCheckingStatusId)
                .ValueGeneratedNever()
                .HasColumnName("InvoiceBotCheckingStatusID");
            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.Indicator).HasMaxLength(128);
            entity.Property(e => e.Status).HasMaxLength(20);
            entity.Property(e => e.StatusCode).HasMaxLength(128);
            entity.Property(e => e.StatusInformation).HasMaxLength(400);

            entity.HasOne(d => d.IdNavigation).WithMany(p => p.InvoiceBotCheckingStatuses)
                .HasForeignKey(d => d.Id)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InvoiceBotCheckingStatus_InvoiceBot");
        });

        modelBuilder.Entity<InvoiceBotDetail>(entity =>
        {
            entity.HasKey(e => e.InvoiceDetailId);

            entity.ToTable("InvoiceBotDetail");

            entity.Property(e => e.InvoiceDetailId).ValueGeneratedNever();
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.AmountWithoutVat).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountWithoutVatOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountWithoutVatOC");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemName).HasMaxLength(400);
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxReductionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxReductionAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TaxReductionAmountOC");
            entity.Property(e => e.UnitName).HasMaxLength(20);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VatAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VatAmountOC");
            entity.Property(e => e.VatRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.IdNavigation).WithMany(p => p.InvoiceBotDetails)
                .HasForeignKey(d => d.Id)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InvoiceBotDetail_InvoiceBot");
        });

        modelBuilder.Entity<InvoiceBotOrganization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_InvoiceBotOrganizationUnit");

            entity.ToTable("InvoiceBotOrganization");

            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.InvRevEmail).HasMaxLength(500);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.OwnerId).HasMaxLength(50);
            entity.Property(e => e.ParentId).HasMaxLength(50);
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(500)
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.SubscriberId).HasMaxLength(50);
            entity.Property(e => e.TaxCode).HasMaxLength(50);
            entity.Property(e => e.Tel).HasMaxLength(50);
            entity.Property(e => e.Website).HasMaxLength(50);
        });

        modelBuilder.Entity<InvoiceBotReference>(entity =>
        {
            entity.HasKey(e => e.InvoiceBotReferenceId);

            entity.ToTable("InvoiceBotReference");

            entity.HasIndex(e => new { e.RefId, e.ReferenceType }, "IX_IB_Reference");

            entity.Property(e => e.InvoiceBotReferenceId)
                .ValueGeneratedNever()
                .HasColumnName("InvoiceBotReferenceID");
            entity.Property(e => e.Id).HasMaxLength(50);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReferenceType).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.IdNavigation).WithMany(p => p.InvoiceBotReferences)
                .HasForeignKey(d => d.Id)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InvoiceBotReference_InvoiceBot");
        });

        modelBuilder.Entity<InvoiceErrorAnnouncement>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("InvoiceErrorAnnouncement");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(150);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedPlace).HasMaxLength(255);
            entity.Property(e => e.MessageCode).HasMaxLength(400);
            entity.Property(e => e.ModifiedBy).HasMaxLength(150);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceiveRefDate).HasColumnType("datetime");
            entity.Property(e => e.ReceiveRefNo).HasMaxLength(100);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.TaxOrganManagement).HasMaxLength(255);
            entity.Property(e => e.TaxOrganManagementCode).HasMaxLength(125);
            entity.Property(e => e.TaxRefDate).HasColumnType("datetime");
            entity.Property(e => e.TaxRefId).HasColumnName("TaxRefID");
            entity.Property(e => e.TaxRefNo).HasMaxLength(255);
        });

        modelBuilder.Entity<InvoiceErrorAnnouncementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("InvoiceErrorAnnouncementDetail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(50);
            entity.Property(e => e.InvSeries).HasMaxLength(50);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(50);
            entity.Property(e => e.InvoiceCode).HasMaxLength(125);
            entity.Property(e => e.Reason).HasMaxLength(400);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(125)
                .HasColumnName("TransactionID");

            entity.HasOne(d => d.Ref).WithMany(p => p.InvoiceErrorAnnouncementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_InvoiceErrorAnnouncementDetail_InvoiceErrorAnnouncement");
        });

        modelBuilder.Entity<InvoiceHubReplacement>(entity =>
        {
            entity.ToTable("InvoiceHubReplacement");

            entity.Property(e => e.InvoiceHubReplacementId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InvoiceHubReplacementID");
            entity.Property(e => e.OrgInvDate).HasColumnType("datetime");
            entity.Property(e => e.OrgInvNo).HasMaxLength(50);
            entity.Property(e => e.OrgInvRefId).HasColumnName("OrgInvRefID");
            entity.Property(e => e.OrgInvSeries).HasMaxLength(20);
            entity.Property(e => e.OrgInvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.ReplaceInvRefId).HasColumnName("ReplaceInvRefID");
        });

        modelBuilder.Entity<InvoiceLasted>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InvoiceLasted");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvSeries).HasMaxLength(8);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(20);
        });

        modelBuilder.Entity<InvoiceNotification>(entity =>
        {
            entity.HasKey(e => new { e.TransactionId, e.MessageCode });

            entity.ToTable("InvoiceNotification");

            entity.Property(e => e.TransactionId)
                .HasMaxLength(42)
                .HasColumnName("TransactionID");
            entity.Property(e => e.MessageCode).HasMaxLength(50);
            entity.Property(e => e.ContentValue).HasMaxLength(50);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.TaxCode).HasMaxLength(50);
        });

        modelBuilder.Entity<InvoiceNotificationKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InvoiceNotificationKey");

            entity.Property(e => e.ContentValue).HasMaxLength(50);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.MessageCode).HasMaxLength(50);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.TaxCode).HasMaxLength(50);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(42)
                .HasColumnName("TransactionID");
            entity.Property(e => e.UserHasVisited)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InvoiceTemplate>(entity =>
        {
            entity.ToTable("InvoiceTemplate");

            entity.Property(e => e.InvoiceTemplateId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InvoiceTemplateID");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.FilePdfsigned).HasColumnName("FilePDFSigned");
            entity.Property(e => e.InvTypeCode).HasMaxLength(20);
            entity.Property(e => e.InvoiceTemplateFileName)
                .HasMaxLength(128)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceTemplateName).HasMaxLength(128);
            entity.Property(e => e.IsSynced)
                .IsRequired()
                .HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<InvoiceToOpening>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InvoiceToOpening");

            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.OpninvoiceId).HasColumnName("OPNInvoiceID");
            entity.Property(e => e.OpnrefId).HasColumnName("OPNRefID");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");
        });

        modelBuilder.Entity<InvoiceTypeAutoId>(entity =>
        {
            entity.HasKey(e => e.InvoiceTypeAutoId1);

            entity.ToTable("InvoiceTypeAutoID");

            entity.Property(e => e.InvoiceTypeAutoId1)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("InvoiceTypeAutoID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CurrentInvNo).HasMaxLength(25);
            entity.Property(e => e.CurrentInvSerial).HasMaxLength(20);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvoiceCategory).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastInvNo).HasMaxLength(25);
            entity.Property(e => e.LastInvSerial).HasMaxLength(20);
            entity.Property(e => e.Lastest)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<InvoiceTypeFor03Dl>(entity =>
        {
            entity.ToTable("InvoiceTypeFor03DL");

            entity.Property(e => e.InvoiceTypeFor03Dlid).HasColumnName("InvoiceTypeFor03DLID");
            entity.Property(e => e.GroupCode).HasMaxLength(15);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(255);
            entity.Property(e => e.InvoiceTypeName).HasMaxLength(255);
        });

        modelBuilder.Entity<IpadjustAnnouncement>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TA153_InvoiceInfoAdjustment");

            entity.ToTable("IPAdjustAnnouncement", tb => tb.HasComment("Thông báo điều chỉnh thông tin hóa đơn"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_IPAdjustAnnouncement_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.IsAttachListOfInvoiceTransfer).HasComment("Có kèm các hóa đơn chuyển đi hay không?");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày thông báo điều chỉnh")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số thông báo điều chỉnh");
            entity.Property(e => e.StatementDate)
                .HasComment("Ngày thông báo phát hành hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.StatementFileContent).HasComment("Tệp đính kèm thông báo phát hành");
            entity.Property(e => e.StatementFileName)
                .HasMaxLength(255)
                .HasComment("Đường dẫn tệp đính kèm thông báo phát hành");
            entity.Property(e => e.StatementNo)
                .HasMaxLength(20)
                .HasComment("Số thông báo phát hành hóa đơn");
            entity.Property(e => e.StatementTaxOffice)
                .HasMaxLength(255)
                .HasComment("Cơ quan thuế thông báo phát hành hóa đơn");
            entity.Property(e => e.Status).HasComment("Trạng thái. 0: Chưa có hiệu lực; 1: Đã có hiệu lực");
            entity.Property(e => e.TaxOffice)
                .HasMaxLength(255)
                .HasComment("Cơ quan thuế thông báo điều chỉnh");

            entity.HasOne(d => d.Branch).WithMany(p => p.IpadjustAnnouncements)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153_InvoiceInfoAdjustment_OrganizationUnit");
        });

        modelBuilder.Entity<IpadjustAnnouncementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA153_InvoiceInfoAdjustmentDetail");

            entity.ToTable("IPAdjustAnnouncementDetail", tb => tb.HasComment("Bảng lưu trữ các thông tin thay đổi"));

            entity.HasIndex(e => e.RefId, "IX_IPAdjustAnnouncementDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.InfoName)
                .HasMaxLength(50)
                .HasComment("Tên thông tin thay đổi");
            entity.Property(e => e.NewInfo)
                .HasMaxLength(255)
                .HasComment("Thông tin mới");
            entity.Property(e => e.OldInfo)
                .HasMaxLength(255)
                .HasComment("Thông tin cũ");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("Thứ tự");

            entity.HasOne(d => d.Ref).WithMany(p => p.IpadjustAnnouncementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA153_InvoiceInfoAdjustmentDetail_TA153_InvoiceInfoAdjustment");
        });

        modelBuilder.Entity<IpcancelAnnouncement>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TA153_DestructionInvoice");

            entity.ToTable("IPCancelAnnouncement", tb => tb.HasComment("Hủy hóa đơn"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_IPCancelAnnouncement_RefNo");

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_TA153_DestructionInvoice")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CancelDecisionDate)
                .HasComment("Ngày quyết định hủy hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.CancelDecisionFileContent).HasComment("File quyết định hủy hóa đơn");
            entity.Property(e => e.CancelDecisionFileName)
                .HasMaxLength(255)
                .HasComment("Tên file quyết định hủy hóa đơn");
            entity.Property(e => e.CancelDecisionNo)
                .HasMaxLength(20)
                .HasComment("Số quyết định hủy hóa đơn");
            entity.Property(e => e.CancelMethod)
                .HasMaxLength(255)
                .HasComment("Phương thức hủy");
            entity.Property(e => e.CancelMinutesDate)
                .HasComment("Ngày biên bản hủy hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.CancelMinutesFileContent)
                .HasMaxLength(50)
                .HasComment("File biên bản hủy hóa đơn");
            entity.Property(e => e.CancelMinutesFileName)
                .HasMaxLength(255)
                .HasComment("Tên file biên bản hủy hóa đơn");
            entity.Property(e => e.CancelMinutesNo)
                .HasMaxLength(20)
                .HasComment("Số biên bản hủy hóa đơn");
            entity.Property(e => e.CancelReason)
                .HasMaxLength(255)
                .HasComment("Lý do hủy");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MeInvoiceSyncDateTime).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày thông báo hủy")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số thông báo hủy");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái. 0: Chưa nộp cho cơ quan thuế; 1: Đã nộp cho cơ quan thuế");
            entity.Property(e => e.TaxOffice)
                .HasMaxLength(255)
                .HasComment("Cơ quan thuế");

            entity.HasOne(d => d.Branch).WithMany(p => p.IpcancelAnnouncements)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153_DestructionInvoice_OrganizationUnit");
        });

        modelBuilder.Entity<IpcancelAnnouncementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA153_DestructionInvoiceDetail");

            entity.ToTable("IPCancelAnnouncementDetail", tb => tb.HasComment("Hủy hóa đơn chi tiet"));

            entity.HasIndex(e => e.RefId, "IX_IPCancelAnnouncementDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.FromNo)
                .HasMaxLength(20)
                .HasComment("Từ số");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.IptemplateId)
                .HasComment("Mẫu hóa đơn khởi tạo được chọn")
                .HasColumnName("IPTemplateID");
            entity.Property(e => e.IptemplateIdcloud).HasColumnName("IPTemplateIDCloud");
            entity.Property(e => e.Quantity).HasComment("Số lượng");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToNo)
                .HasMaxLength(20)
                .HasComment("Đến số");

            entity.HasOne(d => d.InvType).WithMany(p => p.IpcancelAnnouncementDetails)
                .HasForeignKey(d => d.InvTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TA153_DestructionInvoiceDetail_InvType");

            entity.HasOne(d => d.Iptemplate).WithMany(p => p.IpcancelAnnouncementDetails)
                .HasForeignKey(d => d.IptemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPCancelAnnouncementDetail_IPTemplate");

            entity.HasOne(d => d.Ref).WithMany(p => p.IpcancelAnnouncementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA153_DestructionInvoiceDetail_TA153_DestructionInvoice");
        });

        modelBuilder.Entity<IpdeletedAnnouncement>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TA153_DeletedInvoice");

            entity.ToTable("IPDeletedAnnouncement");

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_IPDeletedAnnouncement_RefNo");

            entity.HasIndex(e => new { e.BranchId, e.RefNo }, "IX_TA153_DeletedInvoice").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeletedReason).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(20);
            entity.Property(e => e.InvTypeId).HasColumnName("InvTypeID");
            entity.Property(e => e.IpvoucherRefId).HasColumnName("IPVoucherRefID");
            entity.Property(e => e.IsSendDeletedInvoiceEmail).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSendEmail).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubmittedToTaxAuthories).HasDefaultValueSql("((0))");
            entity.Property(e => e.MeInvoiceSyncDateTime).HasColumnType("datetime");
            entity.Property(e => e.MinutesDate).HasColumnType("datetime");
            entity.Property(e => e.MinutesFileName).HasMaxLength(255);
            entity.Property(e => e.MinutesNo).HasMaxLength(20);
            entity.Property(e => e.MinutesReason).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.SainvoiceRefId).HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SainvoiceRefType).HasColumnName("SAInvoiceRefType");

            entity.HasOne(d => d.Branch).WithMany(p => p.IpdeletedAnnouncements)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153_DeletedInvoice_OrganizationUnit");
        });

        modelBuilder.Entity<Iplbdannouncement>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TA153_LostInvoice");

            entity.ToTable("IPLBDAnnouncement", tb => tb.HasComment("(Lost, Burn, Damaged) Mất, cháy, hỏng hóa đơn"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_IPLBDAnnouncement_RefNo");

            entity.HasIndex(e => new { e.BranchId, e.RefNo }, "IX_TA153_LostInvoice")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.MinutesDate)
                .HasComment("Ngày biên bản mất, cháy, hỏng hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.MinutesFileContent).HasComment("Tệp biên bản đính kèm");
            entity.Property(e => e.MinutesFileName)
                .HasMaxLength(255)
                .HasComment("Tên tệp đính kèm biên bản");
            entity.Property(e => e.MinutesNo)
                .HasMaxLength(20)
                .HasComment("Số biên bản mất, cháy, hỏng hóa đơn");
            entity.Property(e => e.MinutesReason)
                .HasMaxLength(255)
                .HasComment("Lý do mất, hỏng, cháy trong biên bản");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày lập")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số");
            entity.Property(e => e.RefType).HasComment("466");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái. 0: Chưa nộp CQ thuế; 1: Đã nộp CQ thuế");
            entity.Property(e => e.TaxOffice)
                .HasMaxLength(255)
                .HasComment("Cơ quan thuế");

            entity.HasOne(d => d.Branch).WithMany(p => p.Iplbdannouncements)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153_LostInvoice_OrganizationUnit");
        });

        modelBuilder.Entity<IplbdannouncementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA153_LostInvoiceDetail");

            entity.ToTable("IPLBDAnnouncementDetail", tb => tb.HasComment("(Lost, Burn, Damaged) Mất, cháy, hỏng hóa đơn"));

            entity.HasIndex(e => e.RefId, "IX_IPLBDAnnouncementDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.CopyPart)
                .HasMaxLength(25)
                .HasComment("Liên hóa đơn");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.FromNo)
                .HasMaxLength(20)
                .HasComment("Từ số");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.IptemplateId)
                .HasComment("Mẫu hóa đơn khởi tạo được chọn")
                .HasColumnName("IPTemplateID");
            entity.Property(e => e.Quantity).HasComment("Số lượng");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.ToNo)
                .HasMaxLength(20)
                .HasComment("Đến số");

            entity.HasOne(d => d.InvType).WithMany(p => p.IplbdannouncementDetails)
                .HasForeignKey(d => d.InvTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TA153_LostInvoiceDetail_InvType");

            entity.HasOne(d => d.Iptemplate).WithMany(p => p.IplbdannouncementDetails)
                .HasForeignKey(d => d.IptemplateId)
                .HasConstraintName("FK_TA153_LostInvoiceDetail_IPTemplate");

            entity.HasOne(d => d.Ref).WithMany(p => p.IplbdannouncementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA153_LostInvoiceDetail_TA153_LostInvoice");
        });

        modelBuilder.Entity<IplistInvoiceAttachment>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA153_InvoiceInfoAdjustmentListInvoice");

            entity.ToTable("IPListInvoiceAttachment", tb => tb.HasComment("Bảng kê hóa đơn chưa sử dụng chuyển địa điểm kinh doanh khác địa bàn"));

            entity.HasIndex(e => e.RefId, "IX_IPListInvoiceAttachment_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.FromNo)
                .HasMaxLength(20)
                .HasComment("Từ số");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.Quantity).HasComment("Số lượng");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToNo)
                .HasMaxLength(20)
                .HasComment("Đến số");

            entity.HasOne(d => d.Ref).WithMany(p => p.IplistInvoiceAttachments)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA153_InvoiceInfoAdjustmentListInvoice_TA153_InvoiceInfoAdjustment");
        });

        modelBuilder.Entity<IppublishAnnouncement>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TA153_StatementInvoice");

            entity.ToTable("IPPublishAnnouncement", tb => tb.HasComment("Thông báo phát hành hóa đơn"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_IPPublishAnnouncement_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Ghi nhận phiên bản sửa chứng từ");
            entity.Property(e => e.IppublishType).HasColumnName("IPPublishType");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày lập")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdcloud).HasColumnName("RefIDCloud");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái. 0: Chưa có hiệu lực; 1: Đã có hiệu lực");
            entity.Property(e => e.TaxOffice)
                .HasMaxLength(128)
                .HasComment("Cơ quan thuế tiếp nhận thông báo");

            entity.HasOne(d => d.Branch).WithMany(p => p.IppublishAnnouncements)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153_StatementInvoice_OrganizationUnit");
        });

        modelBuilder.Entity<IppublishAnnouncementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA153_SatementInvoiceDetail");

            entity.ToTable("IPPublishAnnouncementDetail", tb => tb.HasComment("Chi tiết thông báo phát hành hóa đơn"));

            entity.HasIndex(e => e.RefId, "IX_IPPublishAnnouncementDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(20)
                .HasComment("Số hợp đồng tự in/cung cấp phần mềm");
            entity.Property(e => e.ContractDate)
                .HasComment("Ngày hợp đồng tự in/cung cấp phần mềm")
                .HasColumnType("datetime");
            entity.Property(e => e.FromNo)
                .HasMaxLength(20)
                .HasComment("Từ số");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.IptemplateId)
                .HasComment("Mẫu hóa đơn khởi tạo được chọn")
                .HasColumnName("IPTemplateID");
            entity.Property(e => e.Quantity).HasComment("Số lượng");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToNo)
                .HasMaxLength(20)
                .HasComment("Đến sô");
            entity.Property(e => e.UsingStartedDate)
                .HasComment("Ngày bắt đầu sử dụng")
                .HasColumnType("datetime");
            entity.Property(e => e.VendorName)
                .HasMaxLength(400)
                .HasComment("Doanh nghiệp in/Công ty cung cấp phần mềm in hóa đơn");
            entity.Property(e => e.VendorTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế Doanh nghiệp in/Công ty cung cấp phần mềm in hóa đơn");

            entity.HasOne(d => d.Iptemplate).WithMany(p => p.IppublishAnnouncementDetails)
                .HasForeignKey(d => d.IptemplateId)
                .HasConstraintName("FK_IPPublishAnnouncementDetail_IPTemplate");

            entity.HasOne(d => d.Ref).WithMany(p => p.IppublishAnnouncementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA153_StatementInvoiceDetail_TA153_StatementInvoice");
        });

        modelBuilder.Entity<IppublishAnnouncementDetailAllocation>(entity =>
        {
            entity.HasKey(e => e.AllocationId);

            entity.ToTable("IPPublishAnnouncementDetailAllocation", tb => tb.HasComment("Bảng phân bổ Số hóa đơn cho các chi nhánh"));

            entity.Property(e => e.AllocationId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("AllocationID");
            entity.Property(e => e.BranchId)
                .HasComment("ID đơn vị")
                .HasColumnName("BranchID");
            entity.Property(e => e.FromNo)
                .HasMaxLength(20)
                .HasComment("Từ số");
            entity.Property(e => e.Quantity).HasComment("Số lượng hóa đơn");
            entity.Property(e => e.RefDetailId)
                .HasComment("FK - RefDetailID của Thông báo phát hành hóa đơn")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của thông báo phát hành hóa đơn")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("Thứ tự sắp xếp dòng chi tiết");
            entity.Property(e => e.ToNo)
                .HasMaxLength(20)
                .HasComment("Đến số");

            entity.HasOne(d => d.Branch).WithMany(p => p.IppublishAnnouncementDetailAllocations)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPPublishAnnouncementDetailAllocation_OrganizationUnit");

            entity.HasOne(d => d.RefDetail).WithMany(p => p.IppublishAnnouncementDetailAllocations)
                .HasForeignKey(d => d.RefDetailId)
                .HasConstraintName("FK_IPPublishAnnouncementDetailAllocation_IPPublishAnnouncementDetail");
        });

        modelBuilder.Entity<Ipregister>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TA153_InvoiceUsingRegister");

            entity.ToTable("IPRegister", tb => tb.HasComment("Bảng đăng ký sử dụng hóa đơn"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_IPRegister_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AttachFileContent).HasComment("File đính kèm");
            entity.Property(e => e.AttachFileName)
                .HasMaxLength(255)
                .HasComment("Đường dẫn file đính kèm");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải (Về việc)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày đăng ký")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số đăng ký");
            entity.Property(e => e.Signer)
                .HasMaxLength(50)
                .HasComment("Người ký");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((0))")
                .HasComment("Tình trạng: 0: Chưa có hiệu lực; 1: Đã có hiệu lực");

            entity.HasOne(d => d.Branch).WithMany(p => p.Ipregisters)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153_InvoiceUsingRegister_OrganizationUnit");
        });

        modelBuilder.Entity<IpregisterDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA153_InvoiceUsingRegisterDetail");

            entity.ToTable("IPRegisterDetail", tb => tb.HasComment("Chi tiết đăng ký sử dụng hóa đơn"));

            entity.HasIndex(e => e.RefId, "IX_IPRegisterDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.IptemplateId).HasColumnName("IPTemplateID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.UsingPurpose)
                .HasMaxLength(255)
                .HasComment("Mục đích sửa dụng");

            entity.HasOne(d => d.Iptemplate).WithMany(p => p.IpregisterDetails)
                .HasForeignKey(d => d.IptemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IPRegisterDetail_IPTemplate");

            entity.HasOne(d => d.Ref).WithMany(p => p.IpregisterDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA153_InvoiceUsingRegisterDetail_TA153_InvoiceUsingRegister");
        });

        modelBuilder.Entity<IpregisterEinvoice>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("IPRegisterEInvoice");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ContactAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ người liên hệ");
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(100)
                .HasComment("Email người liên hệ");
            entity.Property(e => e.ContactName)
                .HasMaxLength(128)
                .HasComment("Tên người liên hệ");
            entity.Property(e => e.ContactTel)
                .HasMaxLength(50)
                .HasComment("Điện thoại người liên hệ");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.InvoiceType).HasComment("Loại hóa đơn điện tử sử dụng: 1: Có mã của cơ quan thuế, 0: không có mã của cơ quan thuế");
            entity.Property(e => e.IsInvoiceFromEcr)
                .HasComment("Hóa đơn khởi tạo từ máy tính tiền")
                .HasColumnName("IsInvoiceFromECR");
            entity.Property(e => e.IsInvoiceValueAdded).HasComment("Hóa đơn giá trị gia tăng");
            entity.Property(e => e.IsOtherInvoice).HasComment("Các loại hóa đơn khác");
            entity.Property(e => e.IsSaleInvoice).HasComment("Hóa đơn bán hàng");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày đăng ký")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số đăng ký");
            entity.Property(e => e.RegistrationMethod).HasComment("Hình thức đăng ký giao dịch: 1:  Cổng thông tin điện tử của tổng cục thuế, 0: Tổ chức cung cấp về dịch vụ hóa đơn điện tử");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.TaxPayerName)
                .HasMaxLength(255)
                .HasComment("Tên người nộp thuế");

            entity.HasOne(d => d.Branch).WithMany(p => p.IpregisterEinvoices)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_IPRegisterEInvoice_OrganizationUnit");
        });

        modelBuilder.Entity<IpregisterEinvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("IPRegisterEInvoiceDetail");

            entity.HasIndex(e => e.RefId, "IX_IPRegisterEInvoiceDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.FromDateOfDeed).HasComment("Thời gian sử dụng của chứng thư số: Từ ngày");
            entity.Property(e => e.OrganizationRecognizedSignal)
                .HasMaxLength(255)
                .HasComment("Tên tổ chức cơ quan chứng thực, cấp, công nhận chữ ký số, điện tử");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RegistrationForm)
                .HasMaxLength(50)
                .HasComment("Hình thức đăng ký: 1: Thêm mới, 2: gia hạn, 3: ngừng sử dụng");
            entity.Property(e => e.SerialNumberOfDeed)
                .HasMaxLength(255)
                .HasComment("Số seri chứng thư số");
            entity.Property(e => e.SortOrder).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ToDateOfDeed).HasComment("Thời gian sử dụng của chứng thư số: Đến ngày");

            entity.HasOne(d => d.Ref).WithMany(p => p.IpregisterEinvoiceDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_IPRegisterEInvoiceDetail_IPRegisterEInvoice");
        });

        modelBuilder.Entity<Iptemplate>(entity =>
        {
            entity.HasKey(e => e.IptemplateId).HasName("PK_TA153ReportFile");

            entity.ToTable("IPTemplate", tb => tb.HasComment("Danh mục Mẫu hóa đơn"));

            entity.HasIndex(e => e.InvTemplateNo, "IX_IPTemplateNo");

            entity.Property(e => e.IptemplateId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("IPTemplateID");
            entity.Property(e => e.AlighBottom)
                .HasDefaultValueSql("((0.5))")
                .HasComment("Căn lề dưới")
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.AlighLeft)
                .HasDefaultValueSql("((1.5))")
                .HasComment("Căn lề trái")
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.AlighTop)
                .HasDefaultValueSql("((0.5))")
                .HasComment("Căn lề trên")
                .HasColumnType("decimal(3, 2)");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cc1background)
                .HasComment("Ảnh nền liên 1")
                .HasColumnName("CC1Background");
            entity.Property(e => e.Cc1backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC1BackgroundFileName");
            entity.Property(e => e.Cc1color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC1Color");
            entity.Property(e => e.Cc1purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC1Purpose");
            entity.Property(e => e.Cc1purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC1PurposeEng");
            entity.Property(e => e.Cc2background)
                .HasComment("Ảnh nền liên 2")
                .HasColumnName("CC2Background");
            entity.Property(e => e.Cc2backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC2BackgroundFileName");
            entity.Property(e => e.Cc2color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC2Color");
            entity.Property(e => e.Cc2purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC2Purpose");
            entity.Property(e => e.Cc2purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC2PurposeEng");
            entity.Property(e => e.Cc3background)
                .HasComment("Ảnh nền liên 3")
                .HasColumnName("CC3Background");
            entity.Property(e => e.Cc3backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC3BackgroundFileName");
            entity.Property(e => e.Cc3color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC3Color");
            entity.Property(e => e.Cc3purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC3Purpose");
            entity.Property(e => e.Cc3purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC3PurposeEng");
            entity.Property(e => e.Cc4background)
                .HasComment("Ảnh nền liên 4")
                .HasColumnName("CC4Background");
            entity.Property(e => e.Cc4backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC4BackgroundFileName");
            entity.Property(e => e.Cc4color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC4Color");
            entity.Property(e => e.Cc4purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC4Purpose");
            entity.Property(e => e.Cc4purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC4PurposeEng");
            entity.Property(e => e.Cc5background)
                .HasComment("Ảnh nền liên 5")
                .HasColumnName("CC5Background");
            entity.Property(e => e.Cc5backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC5BackgroundFileName");
            entity.Property(e => e.Cc5color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC5Color");
            entity.Property(e => e.Cc5purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC5Purpose");
            entity.Property(e => e.Cc5purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC5PurposeEng");
            entity.Property(e => e.Cc6background)
                .HasComment("Ảnh nền liên 6")
                .HasColumnName("CC6Background");
            entity.Property(e => e.Cc6backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC6BackgroundFileName");
            entity.Property(e => e.Cc6color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC6Color");
            entity.Property(e => e.Cc6purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC6Purpose");
            entity.Property(e => e.Cc6purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC6PurposeEng");
            entity.Property(e => e.Cc7background)
                .HasComment("Ảnh nền liên 7")
                .HasColumnName("CC7Background");
            entity.Property(e => e.Cc7backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC7BackgroundFileName");
            entity.Property(e => e.Cc7color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC7Color");
            entity.Property(e => e.Cc7purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC7Purpose");
            entity.Property(e => e.Cc7purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC7PurposeEng");
            entity.Property(e => e.Cc8background)
                .HasComment("Ảnh nền liên 8")
                .HasColumnName("CC8Background");
            entity.Property(e => e.Cc8backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC8BackgroundFileName");
            entity.Property(e => e.Cc8color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC8Color");
            entity.Property(e => e.Cc8purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC8Purpose");
            entity.Property(e => e.Cc8purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC8PurposeEng");
            entity.Property(e => e.Cc9background)
                .HasComment("Ảnh nền liên 9")
                .HasColumnName("CC9Background");
            entity.Property(e => e.Cc9backgroundFileName)
                .HasMaxLength(255)
                .HasColumnName("CC9BackgroundFileName");
            entity.Property(e => e.Cc9color)
                .HasMaxLength(255)
                .HasComment("Mã màu")
                .HasColumnName("CC9Color");
            entity.Property(e => e.Cc9purpose)
                .HasMaxLength(255)
                .HasComment("Mục đích")
                .HasColumnName("CC9Purpose");
            entity.Property(e => e.Cc9purposeEng)
                .HasMaxLength(255)
                .HasColumnName("CC9PurposeEng");
            entity.Property(e => e.ConnectCompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CopyNumber).HasComment("Số liên");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomReportId)
                .HasMaxLength(500)
                .HasColumnName("CustomReportID");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EinvoiceInvTypeCode)
                .HasMaxLength(20)
                .HasColumnName("EInvoiceInvTypeCode");
            entity.Property(e => e.EinvoiceTemplateId).HasColumnName("EInvoiceTemplateID");
            entity.Property(e => e.FileStyle).HasComment("Tệp style quy định kiểu chữ cho báo cáo");
            entity.Property(e => e.InvMethod).HasComment("Hình thức hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(8)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(20)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.IptemplateIdcloud).HasColumnName("IPTemplateIDCloud");
            entity.Property(e => e.IsCreatedBeforeUsingEinvoice).HasColumnName("IsCreatedBeforeUsingEInvoice");
            entity.Property(e => e.IsInserialNumber).HasColumnName("IsINSerialNumber");
            entity.Property(e => e.IsSendSummary).HasComment("Phương thức chuyển dữ liệu hóa đơn điện tử đến cơ quan thuế: 0 - Chuyển đầy đủ nội dung từng hóa đơn; 1 - Chuyển theo bảng tổng hợp dữ liệu hóa đơn điện tử");
            entity.Property(e => e.IsUseOtherGetDataScript)
                .HasDefaultValueSql("((0))")
                .HasComment("Sử dụng Script lấy dữ liệu");
            entity.Property(e => e.IsUseOtherReportTemplate)
                .HasDefaultValueSql("((0))")
                .HasComment("Sử dụng mẫu đặc thù");
            entity.Property(e => e.MisareportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("ID của mẫu hóa đơn của MISA (Dựa trên mẫu)")
                .HasColumnName("MISAReportID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportFileContent).HasComment("Dữ liệu file báo cáo mẫu");
            entity.Property(e => e.ReportFileName)
                .HasMaxLength(255)
                .HasComment("Tên file báo cáo mẫu đặc thù");
            entity.Property(e => e.ReportName)
                .HasMaxLength(128)
                .HasComment("Tên mẫu hóa đơn tạo");
            entity.Property(e => e.ScriptFileName)
                .HasMaxLength(255)
                .HasComment("Tên file scrip lưu store lấy dữ liệu");
            entity.Property(e => e.SellerLegalName).HasMaxLength(255);
            entity.Property(e => e.SignedDate).HasColumnType("datetime");
            entity.Property(e => e.TemplateSortOrder).HasComment("Số thứ tự mẫu");
            entity.Property(e => e.UsedEinvoiceTemplateId).HasColumnName("UsedEInvoiceTemplateID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Iptemplates)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_TA153ReportFile_OrganizationUnit");

            entity.HasOne(d => d.Misareport).WithMany(p => p.Iptemplates)
                .HasForeignKey(d => d.MisareportId)
                .HasConstraintName("FK_IPTemplate_SYSReportList");
        });

        modelBuilder.Entity<IptemplatePermissionBranch>(entity =>
        {
            entity.HasKey(e => e.PermissionId).HasName("PK__IPTempla__EFA6FB0F3B4BADA1");

            entity.ToTable("IPTemplatePermissionBranch");

            entity.Property(e => e.PermissionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PermissionID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");

            entity.HasOne(d => d.Branch).WithMany(p => p.IptemplatePermissionBranches)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_IPTemplatePermissionBranch_OrganizationUnit");

            entity.HasOne(d => d.Template).WithMany(p => p.IptemplatePermissionBranches)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_IPTemplatePermissionBranch_IPTemplate");
        });

        modelBuilder.Entity<IpusingState>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("IPUsingState");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.IsCreateFromOldDb)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsCreateFromOldDB");
            entity.Property(e => e.LegalRepresentation).HasMaxLength(50);
            entity.Property(e => e.Period).HasMaxLength(255);
            entity.Property(e => e.Reporter).HasMaxLength(128);
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<IpusingStateDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("IPUsingStateDetail", tb => tb.HasComment("Bảng chi tiết Tình hình sử dụng hóa đơn"));

            entity.HasIndex(e => e.RefId, "IX_IPUsingStateDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ClosingFromNo)
                .HasMaxLength(25)
                .HasComment("Từ số cuối kỳ");
            entity.Property(e => e.ClosingQuantity)
                .HasComment("Số lượng Cuối kỳ")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ClosingToNo)
                .HasMaxLength(25)
                .HasComment("Đến số Cuối kỳ");
            entity.Property(e => e.DamagedNo).HasComment("Các số đã hủy");
            entity.Property(e => e.DamagedQuantity)
                .HasComment("SL hủy bỏ")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.DeletedNo).HasComment("Các số đã xóa");
            entity.Property(e => e.DeletedQuantity)
                .HasComment("Số lượng đã xóa")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(50)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(50)
                .HasComment("Ký hiệu mẫu hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("ID loại hóa đơn")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.InvTypeName)
                .HasMaxLength(128)
                .HasComment("Tên loại hóa đơn");
            entity.Property(e => e.LostNo).HasComment("Các số đã mất");
            entity.Property(e => e.LostQuantity)
                .HasComment("Số lượng mất")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MovementFromNo)
                .HasMaxLength(25)
                .HasComment("Từ số PS trong kỳ");
            entity.Property(e => e.MovementToNo)
                .HasMaxLength(25)
                .HasComment("Đến số PS trong kỳ");
            entity.Property(e => e.OpeningFromNo)
                .HasMaxLength(25)
                .HasComment("Từ số đầu kỳ");
            entity.Property(e => e.OpeningQuantity)
                .HasComment("Tổng số đầu kỳ")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OpeningToNo)
                .HasMaxLength(25)
                .HasComment("Đến số đầu kỳ");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TotalUsedFromNo)
                .HasMaxLength(25)
                .HasComment("Từ số (Tổng SL sử dụng, xóa, mất, hủy)");
            entity.Property(e => e.TotalUsedQuantity)
                .HasComment("Cộng tổng SL sử dụng, xóa, mất, hủy")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.TotalUsedToNo)
                .HasMaxLength(25)
                .HasComment("Đến số (Tổng SL sử dụng, xóa, mất, hủy)");
            entity.Property(e => e.UsedQuantity)
                .HasComment("SL đã sử dụng")
                .HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.Ref).WithMany(p => p.IpusingStateDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_IPUsingStateDetail_IPUsingState");
        });

        modelBuilder.Entity<Jcaccepted>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("JCAccepted", tb => tb.HasComment("Nghiệm thu Công trình, vụ việc/Đơn hàng/Hợp đồng"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_JCAccepted_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JcperiodId)
                .HasComment("ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");

            entity.HasOne(d => d.Jcperiod).WithMany(p => p.Jcaccepteds)
                .HasForeignKey(d => d.JcperiodId)
                .HasConstraintName("FK_JCAccepted_JCPeriod");
        });

        modelBuilder.Entity<JcacceptedDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCAcceptedDetail", tb => tb.HasComment("Chi tiết nghiệm thu Công trình, Hợp đồng, Đơn hàng"));

            entity.HasIndex(e => e.RefId, "IX_JCAcceptedDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AcceptedRate)
                .HasComment("Tỷ lệ nghiệm thu (%)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RevenueAmount)
                .HasComment("Doanh thu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TotalCostAmount)
                .HasComment("Tổng chi phí")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Contract).WithMany(p => p.JcacceptedDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_JCAcceptedDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.JcacceptedDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_JCAcceptedDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.JcacceptedDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_JCAcceptedDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.JcacceptedDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_JCAcceptedDetail_ExpenseItem");

            entity.HasOne(d => d.ListItem).WithMany(p => p.JcacceptedDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_JCAcceptedDetail_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.JcacceptedDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_JCAcceptedDetail_SAOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.JcacceptedDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_JCAcceptedDetail_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.JcacceptedDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_JCAcceptedDetail_JCAccepted");
        });

        modelBuilder.Entity<JcallocationExpense>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("JCAllocationExpense", tb =>
                {
                    tb.HasComment("Phân bổ chi phí bán hàng và chi phí quản lý doanh nghiệp cho công trình");
                    tb.HasTrigger("trg_JCAllocationExpense_DataChanged");
                });

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_JCAllocationExpense_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AllocationMethod).HasComment("Tiêu thức phân bổ: 0=Doanh thu");
            entity.Property(e => e.AllocationType).HasDefaultValueSql("((1))");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.FromDate)
                .HasComment("từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PeriodDescription)
                .HasMaxLength(255)
                .HasComment("Kỳ phân bổ");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.JcallocationExpenses)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLAllocationExpense_OrganizationUnit");
        });

        modelBuilder.Entity<JcallocationExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCAllocationExpenseDetail", tb => tb.HasComment("Chi tiết phân bổ chi phí bán hàng, QLDN, ..."));

            entity.HasIndex(e => e.RefId, "IX_JCAllocationExpenseDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountName)
                .HasMaxLength(128)
                .HasComment("Tên tài khoản");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Số tài khoản");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ cho từng Công trình, đơn hàng, hợp đồng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ cho từng Công trình, đơn hàng, hợp đồng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpenseItemName).HasMaxLength(128);
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự dòng");
            entity.Property(e => e.TotalCostAmount)
                .HasComment("Tổng chi phí")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.JcallocationExpenseDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCAllocationExpenseDetail_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.JcallocationExpenseDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_JCAllocationExpenseDetail_ExpenseItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.JcallocationExpenseDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_JCAllocationExpenseDetail_JCAllocationExpense");
        });

        modelBuilder.Entity<JcallocationExpenseDetailTable>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCAllocationExpenseDetailTable", tb => tb.HasComment("Bảng kết quả phân bổ chi phí"));

            entity.HasIndex(e => e.RefId, "IX_JCAllocationExpenseDetailTable_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountName)
                .HasMaxLength(128)
                .HasComment("Tên tài khoản");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Số tài khoản");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ cho từng Công trình, đơn hàng, hợp đồng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationObjectId)
                .HasComment("Công trình, vụ việc")
                .HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ cho từng Công trình, đơn hàng, hợp đồng")
                .HasColumnType("decimal(24, 10)");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpenseItemName).HasMaxLength(128);
            entity.Property(e => e.OrganizationUnitTypeId).HasColumnName("OrganizationUnitTypeID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.JcallocationExpenseDetailTables)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .HasConstraintName("FK_GLAllocationExpenseDetail_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.JcallocationExpenseDetailTables)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_JCAllocationExpenseDetailTable_ExpenseItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.JcallocationExpenseDetailTables)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_GLAllocationExpenseDetail_GLAllocationExpense");
        });

        modelBuilder.Entity<JcallocationQuantum>(entity =>
        {
            entity.HasKey(e => e.JobId);

            entity.ToTable("JCAllocationQuantum", tb => tb.HasComment("Bảng lưu định mức giá thành thành phẩm"));

            entity.Property(e => e.JobId)
                .ValueGeneratedNever()
                .HasComment("Mã đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Chi phí khấu hao trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectLaborAmount)
                .HasComment("Chi phí nhân công trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherAmount)
                .HasComment("Chi phí khác trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Chi phí mua ngoài trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng giá thành")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Job).WithOne(p => p.JcallocationQuantum)
                .HasForeignKey<JcallocationQuantum>(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCAllocationQuantum_Job");
        });

        modelBuilder.Entity<JcallocationQuantumConfig>(entity =>
        {
            entity.HasKey(e => new { e.JobId, e.JcperiodId, e.AccountNumber });

            entity.ToTable("JCAllocationQuantumConfig");

            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.JcperiodId).HasColumnName("JCPeriodID");
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<JccostAllocationConfig>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_JCCostAllocation");

            entity.ToTable("JCCostAllocationConfig", tb => tb.HasComment("Bảng lưu trữ cấu hình Tiêu thức phân bổ chi phí chung"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AllocationMethod).HasComment("Tiêu thức phân bổ chi phí chung. 0=NVL TT; 1=Nhân công TT; 2=CP TT");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.JcperiodId)
                .HasComment("FK - ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");

            entity.HasOne(d => d.Jcperiod).WithMany(p => p.JccostAllocationConfigs)
                .HasForeignKey(d => d.JcperiodId)
                .HasConstraintName("FK_JCCostAllocationConfig_JCPeriod");
        });

        modelBuilder.Entity<JccostAllocationDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_JCCostAllocationDetail_1");

            entity.ToTable("JCCostAllocationDetail", tb => tb.HasComment("Bảng lưu trữ kết quả phân bổ chi phí chung"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("TK chi phí (QĐ 15)");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ (%)")
                .HasColumnType("decimal(24, 10)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục CP (QĐ 48)")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.IsAllocation)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JcperiodDetailId)
                .HasComment("ID của JCPeriodDetail")
                .HasColumnName("JCPeriodDetailID");
            entity.Property(e => e.JcperiodId)
                .HasComment("FK - ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.JccostAllocationDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .HasConstraintName("FK_JCCostAllocationDetail_Account");

            entity.HasOne(d => d.Contract).WithMany(p => p.JccostAllocationDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_JCCostAllocationDetail_Contract");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.JccostAllocationDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_JCCostAllocationDetail_ExpenseItem");

            entity.HasOne(d => d.JcperiodDetail).WithMany(p => p.JccostAllocationDetails)
                .HasForeignKey(d => d.JcperiodDetailId)
                .HasConstraintName("FK_JCCostAllocationDetail_JCPeriodDetail");

            entity.HasOne(d => d.Job).WithMany(p => p.JccostAllocationDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_JCCostAllocationDetail_Job");

            entity.HasOne(d => d.Order).WithMany(p => p.JccostAllocationDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_JCCostAllocationDetail_SAOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.JccostAllocationDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_JCCostAllocationDetail_ProjectWork");
        });

        modelBuilder.Entity<JccostVoucher>(entity =>
        {
            entity.ToTable("JCCostVoucher", tb => tb.HasComment("Bảng lưu trữ các chứng từ được chọn để phân bổ chi phí chung"));

            entity.Property(e => e.JccostVoucherId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("JCCostVoucherID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.AccountNumberRemainingAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccountNumberTotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ (%)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("ID khoản mục CP")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JcperiodId)
                .HasComment("Kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải Lý do nộp");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.RemainingAmount)
                .HasComment("Số chưa phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.JccostVouchers)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .HasConstraintName("FK_JCCostVoucher_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.JccostVouchers)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_JCCostVoucher_ExpenseItem");

            entity.HasOne(d => d.Jcperiod).WithMany(p => p.JccostVouchers)
                .HasForeignKey(d => d.JcperiodId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_JCCostVoucher_JCPeriod");
        });

        modelBuilder.Entity<JcexpenseTranfer>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("JCExpenseTranfer", tb => tb.HasComment("Chứng từ kết chuyển chi phí"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_JCExpenseTranfer_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JcperiodId)
                .HasComment("ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng số tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");

            entity.HasOne(d => d.Jcperiod).WithMany(p => p.JcexpenseTranfers)
                .HasForeignKey(d => d.JcperiodId)
                .HasConstraintName("FK_JCExpenseTranfer_JCPeriod");
        });

        modelBuilder.Entity<JcexpenseTranferDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCExpenseTranferDetail", tb => tb.HasComment("Chi tiết Kết chuyển chi phí"));

            entity.HasIndex(e => e.RefId, "IX_JCExpenseTranferDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.Contract).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_JCExpenseTranferDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.JcexpenseTranferDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_JCExpenseTranferDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.JcexpenseTranferDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_JCExpenseTranferDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_JCExpenseTranferDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_JCExpenseTranferDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_JCExpenseTranferDetail_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_JCExpenseTranferDetail_SAOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_JCExpenseTranferDetail_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.JcexpenseTranferDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_JCExpenseTranferDetail_JCExpenseTranfer");
        });

        modelBuilder.Entity<Jcopn>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("JCOPN", tb => tb.HasComment("Nhập đầu kỳ ĐT THCP, công trình, vụ việc, đơn hàng, hợp đồng"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AcceptedAmount)
                .HasComment("Số đã nghiệm thu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Chi phí khấu hao đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectLaborAmount)
                .HasComment("Chi phí nhân công trực tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu trực tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.IndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.MachineDepreciationAmount)
                .HasComment("Chi phí khấu hao đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineIndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineIndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineOtherAmount)
                .HasComment("Chi phí khác (Máy thi công)/Chi phí Máy thi công")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachinePurchaseAmount)
                .HasComment("Chi phí mua ngoài đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NotAcceptedAmount)
                .HasComment("Số chưa nghiệm thu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OtherAmount)
                .HasComment("Chi phí khác/Chi phí chung")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình, vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Chi phí mua ngoài đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng Chi phí")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UncompletedAccount)
                .HasMaxLength(20)
                .HasComment("TK CPSXKD dở dang");

            entity.HasOne(d => d.Branch).WithMany(p => p.Jcopns)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCOPN_OrganizationUnit");

            entity.HasOne(d => d.Contract).WithMany(p => p.Jcopns)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_JCOPN_Contract");

            entity.HasOne(d => d.Job).WithMany(p => p.Jcopns)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_JCOPN_Job");

            entity.HasOne(d => d.Order).WithMany(p => p.Jcopns)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_JCOPN_SAOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.Jcopns)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_JCOPN_ProjectWork");

            entity.HasOne(d => d.UncompletedAccountNavigation).WithMany(p => p.Jcopns)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.UncompletedAccount)
                .HasConstraintName("FK_JCOPN_Account");
        });

        modelBuilder.Entity<Jcopnallocation>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("JCOPNAllocation");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.Amount)
                .HasComment("Chi phí chung")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.Jcopnallocations)
                .HasForeignKey(d => d.ExpenseItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCOPNAllocation_ExpenseItem");
        });

        modelBuilder.Entity<Jcopnconfig>(entity =>
        {
            entity.ToTable("JCOPNConfig");

            entity.Property(e => e.JcopnconfigId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("JCOPNConfigID");
            entity.Property(e => e.IsDetailContractByExpense).HasComment("Chi tiết Hợp đồng theo yếu tố chi phí");
            entity.Property(e => e.IsDetailJobByExpense).HasComment("Chi tiết Đối tượng THCP theo yếu tố chi phí");
            entity.Property(e => e.IsDetailOrderByExpense).HasComment("Chi tiết Đơn hàng theo yếu tố chi phí");
            entity.Property(e => e.IsDetailProjectWorkByExpense).HasComment("Chi tiết Công trình theo yếu tố chi phí");
        });

        modelBuilder.Entity<Jcopndetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCOPNDetail", tb => tb.HasComment("Nhập đầu kỳ ĐT THCP, công trình, vụ việc, đơn hàng, hợp đồng"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Chi phí khấu hao đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectLaborAmount)
                .HasComment("Chi phí nhân công trực tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu trực tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineDepreciationAmount)
                .HasComment("Chi phí khấu hao đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineIndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineIndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachineOtherAmount)
                .HasComment("Chi phí khác (Máy thi công)/Chi phí Máy thi công")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MachinePurchaseAmount)
                .HasComment("Chi phí mua ngoài đầu kỳ (Máy thi công)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OtherAmount)
                .HasComment("Chi phí khác/Chi phí chung")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Chi phí mua ngoài đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng Chi phí")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Ref).WithMany(p => p.Jcopndetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_JCOPNDetail_JCOPN");
        });

        modelBuilder.Entity<Jcperiod>(entity =>
        {
            entity.ToTable("JCPeriod", tb => tb.HasComment("Kỳ tính giá thành"));

            entity.HasIndex(e => e.BranchId, "IX_JCPeriod_BranchID").HasFillFactor(90);

            entity.Property(e => e.JcperiodId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Mã kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.JcperiodName)
                .HasMaxLength(255)
                .HasComment("Tên kỳ tính giá thành")
                .HasColumnName("JCPeriodName");
            entity.Property(e => e.JcperiodType)
                .HasComment("Loại. 0=Giản đơn; 1=Hệ số/Tỷ lệ; 2=Phân bước; 3=Công trình; 4=Đơn hàng; 5=Hợp đồng")
                .HasColumnName("JCPeriodType");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.Jcperiods)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_JCPeriod_OrganizationUnit");
        });

        modelBuilder.Entity<JcperiodDetail>(entity =>
        {
            entity.ToTable("JCPeriodDetail", tb => tb.HasComment("Danh sách các đối tượng THCP, Công trình, Đơn hàng, Hợp đồng cho kỳ tính giá thành"));

            entity.HasIndex(e => new { e.JcperiodId, e.JobId }, "IX_JCPeriodDetail_JCPeriodID_JobID").HasFillFactor(90);

            entity.HasIndex(e => e.JobId, "IX_JCPeriodDetail_JobID").HasFillFactor(90);

            entity.Property(e => e.JcperiodDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("JCPeriodDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.JcperiodId)
                .HasComment("FK - Mã kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JobId)
                .HasComment("FK - Đối tượng THCP/Quy trình Sản xuất")
                .HasColumnName("JobID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("Số thứ tự");

            entity.HasOne(d => d.Contract).WithMany(p => p.JcperiodDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_JCPeriodDetail_Contract");

            entity.HasOne(d => d.Jcperiod).WithMany(p => p.JcperiodDetails)
                .HasForeignKey(d => d.JcperiodId)
                .HasConstraintName("FK_JCPeriodDetail_JCPeriod");

            entity.HasOne(d => d.Job).WithMany(p => p.JcperiodDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_JCCollectionObject_Job");

            entity.HasOne(d => d.Order).WithMany(p => p.JcperiodDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_JCPeriodDetail_SAOrder");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.JcperiodDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_JCPeriodDetail_ProjectWork");
        });

        modelBuilder.Entity<JcproductCostAllocationConfig>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("JCProductCostAllocationConfig", tb => tb.HasComment("Xác định tý lệ phân bổ giá thành"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AllocationMethod).HasComment("Phương pháp phân bổ giá thành. 0=Hệ số; 1=Tỷ lệ");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ")
                .HasColumnType("decimal(24, 10)");
            entity.Property(e => e.AllocationStandard)
                .HasComment("Tiêu chuẩn phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Coefficient)
                .HasDefaultValueSql("((1))")
                .HasComment("hệ số")
                .HasColumnType("decimal(24, 10)");
            entity.Property(e => e.CostPrice)
                .HasComment("Giá thành định mức")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã thành phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsInventoryItemStandard).HasComment("Là thành phẩm chuẩn");
            entity.Property(e => e.JcperiodDetailId)
                .HasComment("ID của JCPeriodDetail")
                .HasColumnName("JCPeriodDetailID");
            entity.Property(e => e.JcperiodId)
                .HasComment("FK - ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.PhaseId)
                .HasComment("ID Công đoạn (áp dụng cho giá thành phân bước liên tục) các loại khác để null")
                .HasColumnName("PhaseID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng sản phẩm")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityStandard)
                .HasComment("Số lượng thành phẩm chuẩn")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.JcproductCostAllocationConfigs)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCProductCostAllocationConfig_InventoryItem");

            entity.HasOne(d => d.JcperiodDetail).WithMany(p => p.JcproductCostAllocationConfigs)
                .HasForeignKey(d => d.JcperiodDetailId)
                .HasConstraintName("FK_JCProductCostAllocationConfig_JCPeriodJob");

            entity.HasOne(d => d.Job).WithMany(p => p.JcproductCostAllocationConfigs)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCProductCostAllocationConfig_Job");
        });

        modelBuilder.Entity<JcproductCostDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCProductCostDetail", tb => tb.HasComment("Bảng kết quả tính giá thành"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Coefficient)
                .HasDefaultValueSql("((1))")
                .HasComment("hệ số/Tỷ lệ phân bổ giá thành")
                .HasColumnType("decimal(24, 10)");
            entity.Property(e => e.CostPrice)
                .HasComment("Giá thành đơn vị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Chi phí khấu hao trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectLaborAmount)
                .HasComment("Chi phí nhân công trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.IndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã thành phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.JcperiodDetailId)
                .HasComment("ID của JCPeriodDetail")
                .HasColumnName("JCPeriodDetailID");
            entity.Property(e => e.JcperiodId)
                .HasComment("FK - ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.OtherAmount)
                .HasComment("Chi phí khác trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PhaseId)
                .HasComment("ID Công đoạn (áp dụng cho giá thành phân bước liên tục) các loại khác để null")
                .HasColumnName("PhaseID");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Chi phí mua ngoài trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng giá thành")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalQuantity)
                .HasComment("Tổng số lượng")
                .HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.JcproductCostDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCProductCostDetail_InventoryItem");

            entity.HasOne(d => d.JcperiodDetail).WithMany(p => p.JcproductCostDetails)
                .HasForeignKey(d => d.JcperiodDetailId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_JCProductCostDetail_JCPeriodJob");

            entity.HasOne(d => d.Job).WithMany(p => p.JcproductCostDetails)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCProductCostDetail_Job");
        });

        modelBuilder.Entity<JcproductQuantum>(entity =>
        {
            entity.HasKey(e => e.InventoryItemId);

            entity.ToTable("JCProductQuantum", tb => tb.HasComment("Bảng lưu định mức giá thành thành phẩm"));

            entity.Property(e => e.InventoryItemId)
                .ValueGeneratedNever()
                .HasComment("Mã thành phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Chi phí khấu hao trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectLaborAmount)
                .HasComment("Chi phí nhân công trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherAmount)
                .HasComment("Chi phí khác trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Chi phí mua ngoài trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng giá thành")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.InventoryItem).WithOne(p => p.JcproductQuantum)
                .HasForeignKey<JcproductQuantum>(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCProductQuantum_InventoryItem");
        });

        modelBuilder.Entity<JcprojectAllocationQuantumConfig>(entity =>
        {
            entity.HasKey(e => new { e.ProjectWorkId, e.JcperiodId, e.AccountNumber });

            entity.ToTable("JCProjectAllocationQuantumConfig");

            entity.Property(e => e.ProjectWorkId)
                .HasComment("Mã công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.JcperiodId).HasColumnName("JCPeriodID");
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.JcprojectAllocationQuantumConfigs)
                .HasForeignKey(d => d.ProjectWorkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCProjectAllocationQuantumConfig_ProjectWork");
        });

        modelBuilder.Entity<Jcuncomplete>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_JCUncomplete_1");

            entity.ToTable("JCUncomplete", tb => tb.HasComment("Đánh giá dở dang cuối kỳ"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.JcperiodDetailId)
                .HasComment("FK - ID của chi tiết kỳ tính giá thành")
                .HasColumnName("JCPeriodDetailID");
            entity.Property(e => e.JcperiodId)
                .HasComment("Kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JobId)
                .HasComment("FK - ID của Đối tượng THCP/Công đoạn")
                .HasColumnName("JobID");
            entity.Property(e => e.UncompleteType).HasComment("Cách xác định dở dang: 0: Sản phẩm hoàn toàn tương đương; 1: Theo NVL trực tiếp; 2: Theo định mức");

            entity.HasOne(d => d.JcperiodDetail).WithMany(p => p.Jcuncompletes)
                .HasForeignKey(d => d.JcperiodDetailId)
                .HasConstraintName("FK_JCUncomplete_JCPeriodDetail");

            entity.HasOne(d => d.Job).WithMany(p => p.Jcuncompletes)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_JCUncomplete_Job");
        });

        modelBuilder.Entity<JcuncompleteDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("JCUncompleteDetail", tb => tb.HasComment("Kết quả đánh giá dở dang cuối kỳ"));

            entity.HasIndex(e => e.RefId, "IX_JCUncompleteDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.DepreciationAmount)
                .HasComment("Chi phí khấu hao trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectLaborAmount)
                .HasComment("Chi phí nhân công trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu trực tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.IndirectLaborAmount)
                .HasComment("Chi phí nhân công gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IndirectMatetialAmount)
                .HasComment("Chi phí nguyên vật liệu gián tiếp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JcperiodId)
                .HasComment("FK - ID kỳ tính giá thành")
                .HasColumnName("JCPeriodID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.OtherAmount)
                .HasComment("Chi phí khác trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PhaseId)
                .HasComment("ID Công đoạn (áp dụng cho giá thành phân bước liên tục) các loại khác để null")
                .HasColumnName("PhaseID");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Chi phí mua ngoài trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.Job).WithMany(p => p.JcuncompleteDetails)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCUncompleteDetail_Job");

            entity.HasOne(d => d.Ref).WithMany(p => p.JcuncompleteDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_JCUncompleteDetail_JCUncomplete");
        });

        modelBuilder.Entity<JcuncompleteDetailInventoryItem>(entity =>
        {
            entity.ToTable("JCUncompleteDetailInventoryItem", tb => tb.HasComment("Bảng lưu sản phẩm dở dang"));

            entity.Property(e => e.JcuncompleteDetailInventoryItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("JCUncompleteDetailInventoryItemID");
            entity.Property(e => e.CostPrice)
                .HasComment("Giá thành định mức")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã thành phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.PercenComplete)
                .HasComment("Tỷ lệ hoàn thành")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng sản phẩn dở dang cuối kỳ")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của JCUncompleteDetail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.JcuncompleteDetailInventoryItems)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JCUncompleteDetailInventoryItem_InventoryItem");

            entity.HasOne(d => d.RefDetail).WithMany(p => p.JcuncompleteDetailInventoryItems)
                .HasForeignKey(d => d.RefDetailId)
                .HasConstraintName("FK_JCUncompleteDetailInventoryItem_JCUncompleteDetail");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.ToTable("Job", tb => tb.HasComment("Đối tượng tập hợp chi phí"));

            entity.HasIndex(e => e.JobCode, "IX_Job_JobCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.JobId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK Công việc, công trình dự án")
                .HasColumnName("JobID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CollectCostInStageType).HasComment("0:Tập hợp chi phí đến công đoạn; 1: Tập hợp chi phi đến từng sản phẩm trong công đoạn");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Thành phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsSemiProduct).HasComment("Là nửa thành phẩm của công đoạn");
            entity.Property(e => e.IsSystem).HasComment("Là hệ thống");
            entity.Property(e => e.JobCode)
                .HasMaxLength(25)
                .HasComment("Mã công việc");
            entity.Property(e => e.JobName)
                .HasMaxLength(128)
                .HasComment("Tên Công việc");
            entity.Property(e => e.JobType)
                .HasDefaultValueSql("((0))")
                .HasComment("Loại có giá trị: 0=phân xưởng;1=sản phẩm;2=quy trình sản xuất;3=công đoạn");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.ProductionProcessType).HasComment("Loại quy trình sản xuất (0=Phân bước liên tục;1=phân bước song song)");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.Stage).HasComment("Công đoạn thứ n");
            entity.Property(e => e.StageId)
                .HasComment("Công đoạn trước")
                .HasColumnName("StageID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_Job_OrganizationUnit");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_Job_InventoryItem");
        });

        modelBuilder.Entity<JobProduct>(entity =>
        {
            entity.ToTable("JobProduct", tb => tb.HasComment("Đối tượng tính giá thành (quan hệ giữa đối tượng tập hợp chi phí Job và đối tượng tính giá thành InventoryItem)"));

            entity.Property(e => e.JobProductId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("JobProductID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("FK - Mã sản phẩm (đối tượng tính giá thành)")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.JobId)
                .HasComment("FK - Mã công việc")
                .HasColumnName("JobID");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng chi tiết");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.JobProducts)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobProduct_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.JobProducts)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_JobProduct_Job");
        });

        modelBuilder.Entity<LicenseConfig>(entity =>
        {
            entity.HasKey(e => e.LicenseId).HasName("PK_License");

            entity.ToTable("LicenseConfig");

            entity.Property(e => e.LicenseId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("LicenseID");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(20)
                .HasComment("Mã chi nhánh sử dụng");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh sử dụng")
                .HasColumnName("BranchID");
            entity.Property(e => e.BranchName)
                .HasMaxLength(255)
                .HasComment("Tên chi nhánh");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .HasComment("Tên công ty trên GPSD");
            entity.Property(e => e.ExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.IsCandicateEncryption).HasMaxLength(255);
            entity.Property(e => e.IsDefault).HasComment("Là giấy phép ngầm định");
            entity.Property(e => e.IsLicenseOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastCheckingTime)
                .HasComment("Thời gian kiểm tra License gần nhất")
                .HasColumnType("datetime");
            entity.Property(e => e.LicenseContent).HasComment("Nội dung GPSD");
            entity.Property(e => e.LicenseNo)
                .HasMaxLength(50)
                .HasComment("Số GPSD");
            entity.Property(e => e.LicenseOnlineKey).HasMaxLength(255);
            entity.Property(e => e.ProductLine).HasMaxLength(10);
            entity.Property(e => e.TaxCode).HasMaxLength(50);
        });

        modelBuilder.Entity<ListItem>(entity =>
        {
            entity.ToTable("ListItem", tb => tb.HasComment("Danh mục mã thống kế"));

            entity.HasIndex(e => e.ListItemCode, "IX_ListItem_ListItemCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ListItemId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ListItemID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ListItemCode)
                .HasMaxLength(20)
                .HasComment("Mã thông kê");
            entity.Property(e => e.ListItemName)
                .HasMaxLength(128)
                .HasComment("Tên mã thông kê");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
        });

        modelBuilder.Entity<LoanProfile>(entity =>
        {
            entity.HasKey(e => e.LoanProfileId).HasName("PK_LoanProfileList");

            entity.ToTable("LoanProfile");

            entity.Property(e => e.LoanProfileId)
                .HasDefaultValueSql("(newid())")
                .HasComment("ID")
                .HasColumnName("LoanProfileID");
            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .HasComment("Địa chỉ giao dịch");
            entity.Property(e => e.AppointmentDate).HasColumnType("datetime");
            entity.Property(e => e.ApprovedBy).HasMaxLength(50);
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(500)
                .HasComment("Tên doanh nghiệp");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.ContactMobile).HasMaxLength(50);
            entity.Property(e => e.ContactName).HasMaxLength(255);
            entity.Property(e => e.ContactTitle).HasMaxLength(500);
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày lập hồ sơ")
                .HasColumnType("datetime");
            entity.Property(e => e.DescriptionHtml).HasColumnName("DescriptionHTML");
            entity.Property(e => e.District).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.InstantFileId)
                .HasMaxLength(50)
                .HasColumnName("InstantFileID");
            entity.Property(e => e.LoanAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MbhfileId)
                .HasMaxLength(128)
                .HasColumnName("MBHFileID");
            entity.Property(e => e.MeetingDate).HasColumnType("datetime");
            entity.Property(e => e.Province).HasMaxLength(50);
            entity.Property(e => e.SendDate)
                .HasComment("Ngày gửi")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Tel)
                .HasMaxLength(50)
                .HasComment("Điện thoại");
        });

        modelBuilder.Entity<LoanProfileDbinfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LoanProfileDBInfo");

            entity.Property(e => e.Career).HasMaxLength(100);
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.LicenseNo).HasMaxLength(50);
            entity.Property(e => e.TotalRevenueLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalRevenueOtherYear).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<LoanProfileDetail>(entity =>
        {
            entity.ToTable("LoanProfileDetail");

            entity.Property(e => e.LoanProfileDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("ID")
                .HasColumnName("LoanProfileDetailID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.FileContent).HasComment("Nội dung file");
            entity.Property(e => e.FileName)
                .HasMaxLength(255)
                .HasComment("Tên file");
            entity.Property(e => e.FilePath).HasMaxLength(500);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.LoanProfileId)
                .HasComment("ID")
                .HasColumnName("LoanProfileID");
            entity.Property(e => e.PropotionRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReportFileName)
                .HasMaxLength(255)
                .HasComment("Tên của báo cáo");
            entity.Property(e => e.SortOrder).HasComment("Số TT");

            entity.HasOne(d => d.LoanProfile).WithMany(p => p.LoanProfileDetails)
                .HasForeignKey(d => d.LoanProfileId)
                .HasConstraintName("FK_LoanProfileDetail_LoanProfileList");
        });

        modelBuilder.Entity<LoanProfileDetailTemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("LoanProfileDetailTemplate");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ReportFileName).HasMaxLength(255);
            entity.Property(e => e.TypeReport).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<LoanProfileListItem>(entity =>
        {
            entity.HasKey(e => e.KeyId).HasName("PK_LoanProfileListItem_1");

            entity.ToTable("LoanProfileListItem");

            entity.Property(e => e.KeyId)
                .ValueGeneratedNever()
                .HasColumnName("KeyID");
            entity.Property(e => e.DataInputType)
                .HasMaxLength(100)
                .HasComment("Loại nhập liệu");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasComment("Ghi chú");
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .HasComment("Tên chỉ tiêu cần lấy");
            entity.Property(e => e.LoanProfileId)
                .HasComment("ID")
                .HasColumnName("LoanProfileID");
            entity.Property(e => e.RowNumber)
                .HasMaxLength(100)
                .HasComment("Số thứ tự");
            entity.Property(e => e.SortOrder).HasComment("Số TT");

            entity.HasOne(d => d.LoanProfile).WithMany(p => p.LoanProfileListItems)
                .HasForeignKey(d => d.LoanProfileId)
                .HasConstraintName("FK_LoanProfileListItem_LoanProfileList");
        });

        modelBuilder.Entity<LoanProfileSummaryReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LoanProfileSummaryReport");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CashFlowFinancing).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashFlowInvesting).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashFlowOperating).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ClosingDebitAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImmediateRatio).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentTurnover).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayrollAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.QuickRatio).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RevenueLastYear).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RevenueTurnover).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ShortRatio).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<LoanProfileTemplate>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("LoanProfileTemplate", tb => tb.HasComment("Bảng dữ liệu template"));

            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemID");
            entity.Property(e => e.DefaultValue).HasMaxLength(100);
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .HasComment("Ghi chú");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .HasComment("Tên chỉ tiêu cần lấy");
            entity.Property(e => e.RowNumber)
                .HasMaxLength(100)
                .HasComment("Số thứ tự");
            entity.Property(e => e.SortOrder).HasComment("Sort order");
        });

        modelBuilder.Entity<Loanagreement>(entity =>
        {
            entity.ToTable("LOANAgreement", tb => tb.HasComment("Khế ước vay/ Hợp đồng tín dụng"));

            entity.Property(e => e.LoanagreementId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("LOANAgreementID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID đối tượng cho vay")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng cho vay");
            entity.Property(e => e.BankAccountId)
                .HasComment("ID tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BankAccountVendor)
                .HasMaxLength(50)
                .HasComment("Số TK ngân hàng NCC");
            entity.Property(e => e.BankBranch)
                .HasMaxLength(255)
                .HasComment("Chi nhánh ngân hàng");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasComment("Tên tài khoản ngân hàng");
            entity.Property(e => e.BankNameVendor)
                .HasMaxLength(128)
                .HasComment("Tên TK ngân hàng NCC");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu chi")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CalculateInterestType).HasComment("Cách tính lãi");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Mục đích sử dụng vốn");
            entity.Property(e => e.DisbursementMethod).HasComment("Hình thức giải ngân");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpriedFromDate)
                .HasComment("Từ ngày duy trì hạn mức")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpriedToDate)
                .HasComment("Đến ngày duy trì hạn mức")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpriedType).HasComment("Loại kỳ hạn duy trì hạn mức");
            entity.Property(e => e.InterestRate)
                .HasComment("Lãi suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InterestType).HasComment("Loại lãi suất");
            entity.Property(e => e.InterestYearType).HasComment("Lãi năm tính trên 365/360 ngày");
            entity.Property(e => e.InvContractNo)
                .HasMaxLength(255)
                .HasComment("Số hóa đơn, số hợp đồng");
            entity.Property(e => e.IsContract).HasComment("Là hợp đồng/khế ước");
            entity.Property(e => e.IsContractOther).HasComment("0: hợp đồng tín dụng hạn mức, 1: hợp đồng tín dụng khác");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementCode)
                .HasMaxLength(50)
                .HasComment("Mã HĐ/Khế ước")
                .HasColumnName("LOANAgreementCode");
            entity.Property(e => e.LoancontractAmount)
                .HasComment("Hạn mức cho vay/Số tiền cho vay")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("LOANContractAmount");
            entity.Property(e => e.LoancontractAmountOc)
                .HasComment("Hạn mức cho vay quy đổi/Số tiền cho vay nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("LOANContractAmountOC");
            entity.Property(e => e.LoancontractId)
                .HasComment("Hợp đồng dự toán cha")
                .HasColumnName("LOANContractID");
            entity.Property(e => e.Loanexpried)
                .HasComment("Số kỳ hạn duy trì hạn mức")
                .HasColumnName("LOANExpried");
            entity.Property(e => e.Loanmethod)
                .HasMaxLength(255)
                .HasComment("Phương thức cho vay")
                .HasColumnName("LOANMethod");
            entity.Property(e => e.OpeningInterestPaidAmount)
                .HasComment("Lãi đã trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OpeningInterestPaidAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OpeningInterestPaidAmountOc)
                .HasComment("Lãi đã trả nguyê tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OpeningInterestPaidAmountOC");
            entity.Property(e => e.OpeningInterestPaidAmountOcmanagement)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OpeningInterestPaidAmountOCManagement");
            entity.Property(e => e.OpeningPaidAmount)
                .HasComment("Đã trả đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OpeningPaidAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OpeningPaidAmountOc)
                .HasComment("Đã trả đầu kỳ nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OpeningPaidAmountOC");
            entity.Property(e => e.OpeningPaidAmountOcmanagement)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("OpeningPaidAmountOCManagement");
            entity.Property(e => e.PayBankAccountId)
                .HasComment("ID TK ngân hàng trả nợ")
                .HasColumnName("PayBankAccountID");
            entity.Property(e => e.PayBankAccountName)
                .HasMaxLength(255)
                .HasComment("Tên TK ngân hàng trả nợ");
            entity.Property(e => e.PayInterestDate)
                .HasComment("Ngày trả lãi đầu tiên")
                .HasColumnType("datetime");
            entity.Property(e => e.PayInterestType).HasComment("Trả lãi");
            entity.Property(e => e.PayMethod).HasComment("Phương thức trả nợ");
            entity.Property(e => e.PayOriginalAmount)
                .HasComment("Số tiền trả mỗi kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayOriginalDate)
                .HasComment("Ngày trả gốc đầu tiên")
                .HasColumnType("datetime");
            entity.Property(e => e.PayOriginalType).HasComment("Trả gốc");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("Hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId)
                .HasComment("Đơn mua hàng")
                .HasColumnName("PUOrderRefID");
            entity.Property(e => e.RepayAccount).HasMaxLength(20);
            entity.Property(e => e.SaorderId)
                .HasComment("Đơn đặt hàng")
                .HasColumnName("SAOrderID");
            entity.Property(e => e.SignDate)
                .HasComment("Ngày ký")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasComment("Trạng thái");
            entity.Property(e => e.VendorId)
                .HasComment("ID nhà cung cấp")
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp");
            entity.Property(e => e.VoucherType).HasComment("Loại chứng từ hạch toán");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.LoanagreementAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_LOANAgreement_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.LoanagreementBankAccounts)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_LOANAgreement_BankAccount");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_LOANAgreement_BudgetItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_LOANAgreement_Contract");

            entity.HasOne(d => d.Currency).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_LOANAgreement_CCY");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.LoanagreementDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_LOANAgreement_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_LOANAgreement_ExpenseItem");

            entity.HasOne(d => d.ListItem).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_LOANAgreement_ListItem");

            entity.HasOne(d => d.PayBankAccount).WithMany(p => p.LoanagreementPayBankAccounts)
                .HasForeignKey(d => d.PayBankAccountId)
                .HasConstraintName("FK_LOANAgreement_PayBankAccount");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_LOANAgreement_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_LOANAgreement_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_LOANAgreement_PUOrder");

            entity.HasOne(d => d.RepayAccountNavigation).WithMany(p => p.LoanagreementRepayAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.RepayAccount)
                .HasConstraintName("FK_LOANAgreement_RepayAccount");

            entity.HasOne(d => d.Saorder).WithMany(p => p.Loanagreements)
                .HasForeignKey(d => d.SaorderId)
                .HasConstraintName("FK_LOANAgreement_SAOrder");

            entity.HasOne(d => d.Vendor).WithMany(p => p.LoanagreementVendors)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("FK_LOANAgreement_Vendor");
        });

        modelBuilder.Entity<LoanagreementAsset>(entity =>
        {
            entity.HasKey(e => e.LoanagreementDetailId);

            entity.ToTable("LOANAgreementAsset", tb => tb.HasComment("Tài sản đảm bảo"));

            entity.Property(e => e.LoanagreementDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("LOANAgreementDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Giá trị tài sản")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AssetName)
                .HasMaxLength(255)
                .HasComment("Tên tài tản");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(255)
                .HasComment("Hợp đồng đảm bảo");
            entity.Property(e => e.LoanagreementId)
                .HasComment("Khóa ngoại")
                .HasColumnName("LOANAgreementID");
            entity.Property(e => e.MortgageMethod)
                .HasMaxLength(255)
                .HasComment("Hình thức đảm bảo");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasComment("Ghi chú");
            entity.Property(e => e.TransferPaper)
                .HasMaxLength(255)
                .HasComment("Giấy tờ chuyển giao");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.LoanagreementAssets)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_LOANAgreementAsset_LOANAgreement");
        });

        modelBuilder.Entity<LoanagreementCalendar>(entity =>
        {
            entity.HasKey(e => e.LoanagreementDetailId);

            entity.ToTable("LOANAgreementCalendar");

            entity.Property(e => e.LoanagreementDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("LOANAgreementDetailID");
            entity.Property(e => e.InterestCalculationDate).HasColumnType("datetime");
            entity.Property(e => e.InterestDay).HasComment("Số ngày tính lãi");
            entity.Property(e => e.InterestLastYearPaidAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InterestLastYearPaidAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InterestPaidAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Lãi còn phải trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InterestPaidAmountManagement)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InterestPayableAmount)
                .HasComment("Lãi phải trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InterestRate)
                .HasComment("Lãi suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LoanagreementId)
                .HasComment("Khóa ngoại")
                .HasColumnName("LOANAgreementID");
            entity.Property(e => e.OriginalDebtOpeningAmount)
                .HasComment("Nợ gốc đầu kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OriginalLastYearPaidAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OriginalLastYearPaidAmountManagement).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OriginalPaidAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Gốc ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OriginalPaidAmountManagement)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OriginalPayableAmount)
                .HasComment("Gốc phải trả")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayMethod).HasComment("Hình thức");
            entity.Property(e => e.PaymentDate)
                .HasComment("Ngày thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.SortOrder).HasComment("Kỳ");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.LoanagreementCalendars)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_LOANAgreementCalendar_LOANAgreement");
        });

        modelBuilder.Entity<LoanagreementInterestRate>(entity =>
        {
            entity.HasKey(e => e.LoanagreementDetailId);

            entity.ToTable("LOANAgreementInterestRate", tb => tb.HasComment("bảng lãi suất"));

            entity.Property(e => e.LoanagreementDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("LOANAgreementDetailID");
            entity.Property(e => e.EffectiveDate)
                .HasComment("Ngày hiệu lực")
                .HasColumnType("datetime");
            entity.Property(e => e.InterestRate)
                .HasComment("Lãi suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LoanagreementId)
                .HasComment("Khóa ngoại")
                .HasColumnName("LOANAgreementID");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasComment("Ghi chứ");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.LoanagreementInterestRates)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_LOANAgreementInterestRate_LOANAgreement");
        });

        modelBuilder.Entity<LoanagreementPayment>(entity =>
        {
            entity.HasKey(e => e.LoanagreementDetailId);

            entity.ToTable("LOANAgreementPayment", tb => tb.HasComment("Bảng chứa chứng từ trả nợ, chứng từ giải ngân"));

            entity.Property(e => e.LoanagreementDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("LOANAgreementDetailID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK có");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK nợ");
            entity.Property(e => e.DisplayOnBook).HasComment("Hiển thị trên sổ");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.LoanagreementId)
                .HasComment("ID của khế ước")
                .HasColumnName("LOANAgreementID");
            entity.Property(e => e.LoancalendarId)
                .HasComment("ID của bảng trả nợ")
                .HasColumnName("LOANCalendarID");
            entity.Property(e => e.PaymentAmount)
                .HasComment("Tiền trả nợ quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaymentAmountOc)
                .HasComment("Tiền trả nợ nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PaymentAmountOC");
            entity.Property(e => e.PaymentType).HasComment("Loại thanh toán: 0 giải ngân, 1 trả gốc, 2 trả lãi");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ReceiptAmount)
                .HasComment("Tiền giải ngân quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiptAmountOc)
                .HasComment("Tiền đã giải ngân nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiptAmountOC");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("ID dòng chi tiết chứng từ")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ TC");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ QT");
            entity.Property(e => e.TimeType).HasComment("Loại trả nợ: 0 đúng hạn, 1 trước hạn, 2 tất toán");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.LoanagreementPayments)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_LOANAgreementPayment_LOANAgreement");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.ToTable("Location", tb => tb.HasComment("Bảng chứa danh sách Tỉnh/TP, Quận huyện, Phường/Xã"));

            entity.Property(e => e.LocationId)
                .HasMaxLength(50)
                .HasComment("PK")
                .HasColumnName("LocationID");
            entity.Property(e => e.AreaCode)
                .HasMaxLength(50)
                .HasComment("Mã khu vực");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Kind).HasComment("Loại Location 0=Nước;1=Tỉnh/TP;2=Quận/Huyện;3=Phường/Xã");
            entity.Property(e => e.LocationCode)
                .HasMaxLength(20)
                .HasComment("Mã tỉnh cấp");
            entity.Property(e => e.LocationName)
                .HasMaxLength(120)
                .HasComment("Tên vị trí");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostalCode)
                .HasMaxLength(50)
                .HasComment("Mã vùng");
            entity.Property(e => e.UsedCount).HasComment("Số lần sử dụng");
            entity.Property(e => e.Zipcode)
                .HasMaxLength(50)
                .HasComment("Mã điện thoại (CRM)")
                .HasColumnName("ZIPCode");
        });

        modelBuilder.Entity<LockObject>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LockObject");

            entity.Property(e => e.ObjectName).HasMaxLength(50);
        });

        modelBuilder.Entity<ManageSize>(entity =>
        {
            entity.ToTable("ManageSize");

            entity.Property(e => e.ManageSizeId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ManageSizeID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã VTHH")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InwardPanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OutwardPanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelHeightQuantity)
                .HasComment("Chiều cao")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity)
                .HasComment("Chiều dài")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity)
                .HasComment("Lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity)
                .HasComment("Bán kính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity)
                .HasComment("Chiều rộng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng nhập")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefDetailId)
                .HasComment("ID dòng chi tiết của chứng từ")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
        });

        modelBuilder.Entity<MappingDictionaryExternal>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MappingDictionaryExternal");

            entity.Property(e => e.DictionaryExternalCode).HasMaxLength(50);
            entity.Property(e => e.DictionaryExternalId).HasColumnName("DictionaryExternalID");
            entity.Property(e => e.DictionarySmecode)
                .HasMaxLength(50)
                .HasColumnName("DictionarySMECode");
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");
            entity.Property(e => e.MappingDictonaryExternalId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MappingDictonaryExternalID");
        });

        modelBuilder.Entity<MappingEbobject>(entity =>
        {
            entity.HasKey(e => e.MappingId).HasName("PK__MappingE__8B5781BD3C97A15D");

            entity.ToTable("MappingEBObject", tb => tb.HasComment("Bảng mapping đối tượng khi lập phiếu thu/chi từ lịch sử giao dịch của ngân hàng"));

            entity.Property(e => e.MappingId)
                .ValueGeneratedNever()
                .HasComment("ID của bảng")
                .HasColumnName("MappingID");
            entity.Property(e => e.ObjectMapping).HasComment("ID của đối tượng đã mapping");
            entity.Property(e => e.ValueMapping)
                .HasMaxLength(500)
                .HasComment("Giá trị cần so sánh");
        });

        modelBuilder.Entity<MappingEinvoiceObject>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.ToTable("MappingEinvoiceObject");

            entity.Property(e => e.MappingId)
                .ValueGeneratedNever()
                .HasColumnName("MappingID");
            entity.Property(e => e.ValueMapping).HasMaxLength(500);
            entity.Property(e => e.VendorCompanyTaxCode).HasMaxLength(100);
        });

        modelBuilder.Entity<MappingInbotObject>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.ToTable("MappingInbotObject");

            entity.Property(e => e.MappingId).HasColumnName("MappingID");
            entity.Property(e => e.ColumnName).HasMaxLength(150);
            entity.Property(e => e.MachineMapping).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(150);
            entity.Property(e => e.TimeMapping).HasColumnType("datetime");
            entity.Property(e => e.UserMapping).HasMaxLength(50);
            entity.Property(e => e.ValueMapping).HasMaxLength(255);
        });

        modelBuilder.Entity<MappingOrganizationExtend>(entity =>
        {
            entity.ToTable("MappingOrganizationExtend");

            entity.Property(e => e.MappingOrganizationExtendId)
                .ValueGeneratedNever()
                .HasColumnName("MappingOrganizationExtendID");
            entity.Property(e => e.BranchCodeExtend).HasMaxLength(100);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BranchIdconfig).HasColumnName("BranchIDConfig");
            entity.Property(e => e.BranchIdextend).HasColumnName("BranchIDExtend");
            entity.Property(e => e.BranchNameExtend).HasMaxLength(255);
            entity.Property(e => e.CompanyDomainUrlextend).HasColumnName("CompanyDomainURLExtend");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
        });

        modelBuilder.Entity<MappingSaeinvoiceObject>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.ToTable("MappingSAEinvoiceObject");

            entity.Property(e => e.MappingId)
                .ValueGeneratedNever()
                .HasColumnName("MappingID");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(100);
            entity.Property(e => e.ValueMapping).HasMaxLength(255);
        });

        modelBuilder.Entity<MappingSaobject>(entity =>
        {
            entity.HasKey(e => e.MappingId);

            entity.ToTable("MappingSAObject");

            entity.Property(e => e.MappingId).HasColumnName("MappingID");
            entity.Property(e => e.ColumnName).HasMaxLength(150);
            entity.Property(e => e.MachineMapping).HasMaxLength(128);
            entity.Property(e => e.TableName).HasMaxLength(150);
            entity.Property(e => e.TimeMapping).HasColumnType("datetime");
            entity.Property(e => e.UserMapping).HasMaxLength(50);
            entity.Property(e => e.ValueMapping).HasMaxLength(500);
        });

        modelBuilder.Entity<MeInvoiceSyncDatum>(entity =>
        {
            entity.HasKey(e => e.ChangeId);

            entity.Property(e => e.ChangeId).HasColumnName("ChangeID");
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(20);
            entity.Property(e => e.RefId).HasColumnName("RefID");
        });

        modelBuilder.Entity<MinutesInvoice>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("MinutesInvoice");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AdjustTransactionId)
                .HasMaxLength(50)
                .HasColumnName("AdjustTransactionID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(125);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(20);
            entity.Property(e => e.InvTypeId).HasColumnName("InvTypeID");
            entity.Property(e => e.MinutesInvoiceId).HasColumnName("MinutesInvoiceID");
            entity.Property(e => e.MinutesInvoiceId123).HasColumnName("MinutesInvoiceID123");
            entity.Property(e => e.ModifiedBy).HasMaxLength(125);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Reason).HasMaxLength(255);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.SainvoiceRefId).HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SainvoiceRefType).HasColumnName("SAInvoiceRefType");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<MisaorderNotificationKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MISAOrderNotificationKey");

            entity.HasIndex(e => e.SessionKey, "IX_MISAOrderNotificationKey_SessionKey");

            entity.Property(e => e.MisaorderId).HasColumnName("MISAOrderID");
        });

        modelBuilder.Entity<MobileAccountBalanceDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileAccountBalanceDataChanged");

            entity.HasIndex(e => e.AccountNumber, "IX_MobileAccountBalanceDataChanged_AccountNumber");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
        });

        modelBuilder.Entity<MobileAccountObjectLedgerDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileAccountObjectLedgerDataChanged");

            entity.HasIndex(e => e.AccountObjectId, "IX_MobileAccountObjectLedgerDataChanged_AccountObjectID");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
        });

        modelBuilder.Entity<MobileDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileDataChanged");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.TableName).HasMaxLength(50);
        });

        modelBuilder.Entity<MobileDataFirstSync>(entity =>
        {
            entity.ToTable("MobileDataFirstSync");

            entity.Property(e => e.MobileDataFirstSyncId).HasColumnName("MobileDataFirstSyncID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(150)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<MobileDebtDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileDebtDataChanged");

            entity.HasIndex(e => e.DueDate, "IX_MobileDebtDataChanged");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
        });

        modelBuilder.Entity<MobileFinancialDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileFinancialDataChanged");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<MobileGeneralLedgerDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileGeneralLedgerDataChanged");

            entity.HasIndex(e => new { e.ReportYear, e.ReportMonth }, "IX_MobileGeneralLedgerDataChanged_YearMonth");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.FromDate)
                .HasComputedColumnSql("(case when [ReportMonth]>(0) then CONVERT([datetime],CONVERT([nvarchar](25),([ReportYear]*(10000)+[ReportMonth]*(100))+(1),(0)),(112))  end)", true)
                .HasColumnType("datetime");
            entity.Property(e => e.ToDate)
                .HasComputedColumnSql("(case when [ReportMonth]=(12) then CONVERT([datetime],CONVERT([nvarchar](25),([ReportYear]*(10000)+(12)*(100))+(31),(0)),(112)) when [ReportMonth]>(0) then dateadd(day,(-1),CONVERT([datetime],CONVERT([nvarchar](25),([ReportYear]*(10000)+([ReportMonth]+(1))*(100))+(1),(0)),(112)))  end)", true)
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<MobileInventoryLedgerDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileInventoryLedgerDataChanged");

            entity.HasIndex(e => e.InventoryItemId, "IX_MobileInventoryLedgerDataChanged_InventoryItemID");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
        });

        modelBuilder.Entity<MobileJcallocationExpenseDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileJCAllocationExpenseDataChanged");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
        });

        modelBuilder.Entity<MobileSalarySheetDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileSalarySheetDataChanged");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
        });

        modelBuilder.Entity<MobileStockBalanceByExpiryDateDataChanged>(entity =>
        {
            entity.HasKey(e => e.ChangedId);

            entity.ToTable("MobileStockBalanceByExpiryDateDataChanged");

            entity.HasIndex(e => e.InventoryItemId, "IX_MobileStockBalanceByExpiryDateDataChanged_InventoryItemID");

            entity.Property(e => e.ChangedId).HasColumnName("ChangedID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
        });

        modelBuilder.Entity<MobileSyncDatum>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => new { e.TableName, e.ObjectId, e.IsDeleted }, "IX_MobileSyncData_IsDeleted").IsClustered();

            entity.Property(e => e.ObjectId)
                .HasMaxLength(50)
                .HasColumnName("ObjectID");
            entity.Property(e => e.TableName).HasMaxLength(150);
        });

        modelBuilder.Entity<MobileSyncTimeHistory>(entity =>
        {
            entity.HasKey(e => e.SyncId);

            entity.ToTable("MobileSyncTimeHistory");

            entity.Property(e => e.SyncId).HasColumnName("SyncID");
            entity.Property(e => e.ComputerName).HasMaxLength(50);
            entity.Property(e => e.DataType).HasMaxLength(30);
            entity.Property(e => e.SyncTime).HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<MonetaryFlowForeCast>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK__Monetary__2D2A2CD13A60188A");

            entity.ToTable("MonetaryFlowForeCast");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DateRange).HasMaxLength(200);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<MonetaryFlowForeCastDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK__Monetary__B5FCDC8D3E30A96E");

            entity.ToTable("MonetaryFlowForeCastDetail");

            entity.HasIndex(e => e.RefId, "IX_MonetaryFlowForeCastDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.GroupKey).HasMaxLength(10);
            entity.Property(e => e.ItemCode).HasMaxLength(10);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasMaxLength(100);

            entity.HasOne(d => d.Ref).WithMany(p => p.MonetaryFlowForeCastDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MonetaryFlowForeCastDetail_MonetaryFlowForeCast");
        });

        modelBuilder.Entity<MonitorCount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MonitorCount");

            entity.Property(e => e.AppEventCode).HasMaxLength(50);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<MscAudittingLog>(entity =>
        {
            entity.HasKey(e => e.EventId);

            entity.ToTable("MSC_AudittingLog", tb => tb.HasComment("Bảng lưu trữ nhật ký truy cập"));

            entity.Property(e => e.EventId)
                .ValueGeneratedNever()
                .HasColumnName("EventID");
            entity.Property(e => e.ApplicationPartAlias)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasComment("Phân hệ thao tác");
            entity.Property(e => e.ApplicationPartCode).HasMaxLength(100);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ComputerIp)
                .HasMaxLength(100)
                .HasComment("Địa chỉ IP")
                .HasColumnName("ComputerIP");
            entity.Property(e => e.ComputerName)
                .HasMaxLength(100)
                .HasComment("Tên máy thao tác Database");
            entity.Property(e => e.Description).HasComment("Mô tả chi tiết");
            entity.Property(e => e.IsWorkingWithManagementBook)
                .HasMaxLength(255)
                .HasComment("Làm việc trên sổ: 1 sổ quản trị: 0 sổ tài chính");
            entity.Property(e => e.LoginName)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasComment("Tên người dùng thao tác Database");
            entity.Property(e => e.Parameter).HasMaxLength(100);
            entity.Property(e => e.PermissionTypeAlias)
                .HasMaxLength(255)
                .HasDefaultValueSql("((0))")
                .HasComment("Thao tác");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.Reference)
                .HasDefaultValueSql("('')")
                .HasComment("Tham chiếu sổ tài chính");
            entity.Property(e => e.ReferenceManagement)
                .HasDefaultValueSql("('')")
                .HasComment("Tham chiếu sổ quản trị");
            entity.Property(e => e.Time)
                .HasComment("Thời gian thao tác database")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<MscAudittingLogDetail>(entity =>
        {
            entity.HasKey(e => e.EventDetailId);

            entity.ToTable("MSC_AudittingLogDetail");

            entity.Property(e => e.EventDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("EventDetailID");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Event).WithMany(p => p.MscAudittingLogDetails)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK_MSC_AudittingLogDetail_MSC_AudittingLog");
        });

        modelBuilder.Entity<MscConfirmPassword>(entity =>
        {
            entity.HasKey(e => e.ConfirmPasswordId);

            entity.ToTable("MSC_ConfirmPassword", tb => tb.HasComment("Bảng lưu thông tin xác nhận  khi quên mật khẩu"));

            entity.Property(e => e.ConfirmPasswordId)
                .ValueGeneratedNever()
                .HasColumnName("ConfirmPasswordID");
            entity.Property(e => e.ConfirmPasswordCode)
                .HasMaxLength(50)
                .HasComment("Mã xác nhận");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày giờ tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.MscConfirmPasswords)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_MSC_ConfirmPassword_MSC_User");
        });

        modelBuilder.Entity<MscPermission>(entity =>
        {
            entity.HasKey(e => e.PermissionId);

            entity.ToTable("MSC_Permission", tb => tb.HasComment("Bảng này chứa danh sách các quyền "));

            entity.Property(e => e.PermissionId)
                .HasMaxLength(50)
                .HasComment("VD: ADD, EDIT, PRINT...")
                .HasColumnName("PermissionID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả về quyền");
            entity.Property(e => e.PermissionAlias)
                .HasMaxLength(50)
                .HasComment("Kí tự đại diện");
            entity.Property(e => e.PermissionName)
                .HasMaxLength(50)
                .HasComment("Tên hiển thị");
            entity.Property(e => e.SortOrder).HasComment("Dùng để Order trên giao diện cho đẹp");
        });

        modelBuilder.Entity<MscRegisPermisionForSubSystem>(entity =>
        {
            entity.ToTable("MSC_RegisPermisionForSubSystem", tb => tb.HasComment("Bảng này đăng ký các quyền có thể sử dụng bởi 1 phân hệ"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(50)
                .HasComment("Bảng này để đăng ký các phân hệ dùng đến quyền nào")
                .HasColumnName("PermissionID");
            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(255)
                .HasComment("Mã phân hệ");

            entity.HasOne(d => d.Permission).WithMany(p => p.MscRegisPermisionForSubSystems)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MSC_RegisPermisionForSubSystem_MSC_Permission");

            entity.HasOne(d => d.SubSystemCodeNavigation).WithMany(p => p.MscRegisPermisionForSubSystems)
                .HasForeignKey(d => d.SubSystemCode)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MSC_RegisPermisionForSubSystem_MSC_SubSystem");
        });

        modelBuilder.Entity<MscRegisPermisionMobileForSubSystem>(entity =>
        {
            entity.ToTable("MSC_RegisPermisionMobileForSubSystem");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(50)
                .HasColumnName("PermissionID");
            entity.Property(e => e.SubSystemCode).HasMaxLength(255);

            entity.HasOne(d => d.Permission).WithMany(p => p.MscRegisPermisionMobileForSubSystems)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MSC_RegisPermisionMobileForSubSystem_MSC_Permission");

            entity.HasOne(d => d.SubSystemCodeNavigation).WithMany(p => p.MscRegisPermisionMobileForSubSystems)
                .HasForeignKey(d => d.SubSystemCode)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_MSC_RegisPermisionMobileForSubSystem_MSC_SubSystem");
        });

        modelBuilder.Entity<MscRole>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK_Role");

            entity.ToTable("MSC_Role", tb => tb.HasComment("Danh sách vai trò"));

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("RoleID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải, mô tả về chức năng");
            entity.Property(e => e.RoleCode)
                .HasMaxLength(20)
                .HasComment("Mã vai trò");
            entity.Property(e => e.RoleName)
                .HasMaxLength(128)
                .HasComment("Tên vai trò");
        });

        modelBuilder.Entity<MscRoleMobile>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK_Role_Mobile");

            entity.ToTable("MSC_Role_Mobile");

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("RoleID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.RoleCode).HasMaxLength(20);
            entity.Property(e => e.RoleName).HasMaxLength(128);
        });

        modelBuilder.Entity<MscRolePermissionMaping>(entity =>
        {
            entity.ToTable("MSC_RolePermissionMaping");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(50)
                .HasComment("Quyền của Role trên SubSystem")
                .HasColumnName("PermissionID");
            entity.Property(e => e.RoleId)
                .HasComment("ID của vai trò")
                .HasColumnName("RoleID");
            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(255)
                .HasComment("Mã phân hệ");

            entity.HasOne(d => d.Permission).WithMany(p => p.MscRolePermissionMapings)
                .HasForeignKey(d => d.PermissionId)
                .HasConstraintName("FK_MSC_RolePermissionMaping_MSC_Permission");

            entity.HasOne(d => d.Role).WithMany(p => p.MscRolePermissionMapings)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_MSC_RolePermissionMaping_MSC_Role");

            entity.HasOne(d => d.SubSystemCodeNavigation).WithMany(p => p.MscRolePermissionMapings)
                .HasForeignKey(d => d.SubSystemCode)
                .HasConstraintName("FK_MSC_RolePermissionMaping_MSC_SubSystem");
        });

        modelBuilder.Entity<MscRolePermissionMapingMobile>(entity =>
        {
            entity.ToTable("MSC_RolePermissionMaping_Mobile");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.PermissionId)
                .HasMaxLength(50)
                .HasColumnName("PermissionID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.SubSystemCode).HasMaxLength(255);

            entity.HasOne(d => d.Permission).WithMany(p => p.MscRolePermissionMapingMobiles)
                .HasForeignKey(d => d.PermissionId)
                .HasConstraintName("FK_MSC_RolePermissionMaping_Mobile_MSC_Permission");

            entity.HasOne(d => d.Role).WithMany(p => p.MscRolePermissionMapingMobiles)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK_MSC_RolePermissionMaping_Mobile_MSC_Role");

            entity.HasOne(d => d.SubSystemCodeNavigation).WithMany(p => p.MscRolePermissionMapingMobiles)
                .HasForeignKey(d => d.SubSystemCode)
                .HasConstraintName("FK_MSC_RolePermissionMaping_Mobile_MSC_SubSystem");
        });

        modelBuilder.Entity<MscSubSystem>(entity =>
        {
            entity.HasKey(e => e.SubSystemCode).HasName("PK_MSC_SubSystem_1");

            entity.ToTable("MSC_SubSystem", tb =>
                {
                    tb.HasComment("Bảng chứa danh sách các phân hệ");
                    tb.HasTrigger("BuildSubSystemSerial");
                });

            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(255)
                .HasComment("Mã phân hệ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ParentSubSystemCode)
                .HasMaxLength(255)
                .HasComment("Mã phân hệ cha: dùng để view cây phân hệ");
            entity.Property(e => e.SortOrder).HasComment("Dùng để Order các phân hệ trên cây phân hệ cho đẹp");
            entity.Property(e => e.SubSystemName)
                .HasMaxLength(255)
                .HasComment("Tên phân hệ");
            entity.Property(e => e.SubSystemSerial).HasMaxLength(500);
            entity.Property(e => e.SystemType).HasDefaultValueSql("((15))");
        });

        modelBuilder.Entity<MscSubSystemMobile>(entity =>
        {
            entity.HasKey(e => e.SubSystemCode);

            entity.ToTable("MSC_SubSystem_Mobile");

            entity.Property(e => e.SubSystemCode).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ParentSubSystemCode).HasMaxLength(255);
            entity.Property(e => e.SubSystemName).HasMaxLength(255);
            entity.Property(e => e.SubSystemSerial).HasMaxLength(500);
            entity.Property(e => e.SystemType).HasDefaultValueSql("((15))");
        });

        modelBuilder.Entity<MscUser>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("MSC_User", tb => tb.HasComment("bảng danh sách người dùng"));

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasComment("Địa chỉ Email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasComment("Số Fax");
            entity.Property(e => e.FirstName).HasMaxLength(128);
            entity.Property(e => e.FullName)
                .HasMaxLength(128)
                .HasComment("Họ và tên");
            entity.Property(e => e.HomeAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ nhà riêng");
            entity.Property(e => e.Inactive).HasComment("Ngừng hoạt động");
            entity.Property(e => e.IsActived).HasComment("Trạng thái kích hoạt người dùng");
            entity.Property(e => e.IsWorkingWithFinanceBook).HasComment("Làm việc với sổ tài chính");
            entity.Property(e => e.IsWorkingWithManagementBook).HasComment("Làm việc với sổ quản trị");
            entity.Property(e => e.JobTitle)
                .HasMaxLength(128)
                .HasComment("Chức danh");
            entity.Property(e => e.LastName).HasMaxLength(128);
            entity.Property(e => e.Misaid)
                .HasMaxLength(50)
                .HasColumnName("MISAID");
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(50)
                .HasComment("Điện thoại di động");
            entity.Property(e => e.NotifyEmailDate).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .HasComment("Mật khẩu đã được mã hóa");
            entity.Property(e => e.PasswordEncryption)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasComment("Hàm mã hóa mật khẩu");
            entity.Property(e => e.Photo).HasComment("Ảnh");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .HasComment("Tên đăng nhập của người dùng");
            entity.Property(e => e.WorkAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ cơ quan");
            entity.Property(e => e.WorkPhone)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasComment("Điện thoại cơ quan (Cố định)");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.MscUsers)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_MSC_User_OrganizationUnit");
        });

        modelBuilder.Entity<MscUserJoinRole>(entity =>
        {
            entity.HasKey(e => e.UserJoinRoleId);

            entity.ToTable("MSC_UserJoinRole", tb => tb.HasComment("Bảng join giữa User và Role và Chi nhánh"));

            entity.HasIndex(e => e.UserId, "IX_MSC_UserJoinRole_UserID").HasFillFactor(90);

            entity.Property(e => e.UserJoinRoleId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("UserJoinRoleID");
            entity.Property(e => e.BranchCode).HasComment("Mã chi nhánh (Dùng để hiển thị lên form danh sách User)");
            entity.Property(e => e.BranchId)
                .HasComment("FK của Branch")
                .HasColumnName("BranchID");
            entity.Property(e => e.RoleId)
                .HasComment("ID của Role")
                .HasColumnName("RoleID");
            entity.Property(e => e.UserId)
                .HasComment("ID của User")
                .HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.MscUserJoinRoles)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_MSC_UserJoinRole_OrganizationUnit");

            entity.HasOne(d => d.Role).WithMany(p => p.MscUserJoinRoles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserJoinRole_Role");

            entity.HasOne(d => d.User).WithMany(p => p.MscUserJoinRoles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserJoinRole_MSC_User");
        });

        modelBuilder.Entity<MscUserJoinRoleMobile>(entity =>
        {
            entity.HasKey(e => e.UserJoinRoleId);

            entity.ToTable("MSC_UserJoinRole_Mobile");

            entity.Property(e => e.UserJoinRoleId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UserJoinRoleID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.MscUserJoinRoleMobiles)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_MSC_UserJoinRole_Mobile_OrganizationUnit");

            entity.HasOne(d => d.Role).WithMany(p => p.MscUserJoinRoleMobiles)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserJoinRole_Role_Mobile");

            entity.HasOne(d => d.User).WithMany(p => p.MscUserJoinRoleMobiles)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_UserJoinRole_MSC_User_Mobile");
        });

        modelBuilder.Entity<MscUserMobile>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("MSC_User_Mobile");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FirstName).HasMaxLength(128);
            entity.Property(e => e.FullName).HasMaxLength(128);
            entity.Property(e => e.JobTitle).HasMaxLength(128);
            entity.Property(e => e.LastName).HasMaxLength(128);
            entity.Property(e => e.MobilePhone).HasMaxLength(50);
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<National>(entity =>
        {
            entity.ToTable("National");

            entity.Property(e => e.NationalId)
                .HasMaxLength(50)
                .HasComment("Mã quốc gia")
                .HasColumnName("NationalID");
            entity.Property(e => e.NationalName)
                .HasMaxLength(255)
                .HasComment("Tên quốc gia");
            entity.Property(e => e.SortOrder).HasComment("số thứ tự");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E325C31E324");

            entity.ToTable("Notification");

            entity.HasIndex(e => e.BranchId, "IX_Notification_BranchID");

            entity.HasIndex(e => e.DisplayOnBook, "IX_Notification_DisplayOnBook");

            entity.HasIndex(e => e.NotificationIsmacId, "IX_Notification_NotificationIsmacID");

            entity.HasIndex(e => e.NotificationType, "IX_Notification_NotificationType");

            entity.HasIndex(e => e.RefDate, "IX_Notification_RefDate");

            entity.Property(e => e.NotificationId)
                .ValueGeneratedNever()
                .HasColumnName("NotificationID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.NotificationIsmacId)
                .HasMaxLength(50)
                .HasColumnName("NotificationIsmacID");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.SubContent).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationInbot>(entity =>
        {
            entity.ToTable("NotificationInbot");

            entity.HasIndex(e => new { e.NotificationType, e.NotificationDate }, "NotificationInbot_Type_Date");

            entity.Property(e => e.NotificationInbotId)
                .ValueGeneratedNever()
                .HasColumnName("NotificationInbotID");
            entity.Property(e => e.NotificationDate).HasColumnType("datetime");
            entity.Property(e => e.SubContent).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
        });

        modelBuilder.Entity<NotificationKey>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NotificationKey");

            entity.HasIndex(e => e.RefDate, "IX_NotificationKey_RefDate");

            entity.HasIndex(e => e.SessionKey, "IX_NotificationKey_SessionKey");

            entity.HasIndex(e => e.SubNotificationType, "IX_NotificationKey_SubNotificationType");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.NotificationIsmacId)
                .HasMaxLength(50)
                .HasColumnName("NotificationIsmacID");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.SubContent).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);
            entity.Property(e => e.UserName).HasMaxLength(50);
        });

        modelBuilder.Entity<NotificationRemind>(entity =>
        {
            entity.HasKey(e => e.NotificationId);

            entity.ToTable("NotificationRemind");

            entity.Property(e => e.NotificationId)
                .ValueGeneratedNever()
                .HasColumnName("NotificationID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh thực hiện nhắc nhở")
                .HasColumnName("BranchID");
            entity.Property(e => e.IsExecute).HasComment("đã thực hiện nhắc nhở hay chưa");
            entity.Property(e => e.IsVoucher).HasComment("là chứng từ hay báo cáo: 1: chứng từ, 2: báo cáo");
            entity.Property(e => e.ListParam).HasComment("tham số để show form");
            entity.Property(e => e.ListRefType).HasComment("Danh sách reftype");
            entity.Property(e => e.RemindDate)
                .HasComment("Ngày nhắc nhở")
                .HasColumnType("datetime");
            entity.Property(e => e.RemindType).HasComment("Loại nhắc nhở: 1: thuế, 2:nghiệp vụ, 3: đối chiếu, 4: kho. Cái này dùng để thay đổi icon");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
            entity.Property(e => e.SubContent).HasComment("Nội dung thông báo");
            entity.Property(e => e.SubContentEng).HasColumnName("SubContentENG");
            entity.Property(e => e.SubContentKor).HasColumnName("SubContentKOR");
            entity.Property(e => e.SubContentZhc).HasColumnName("SubContentZHC");
            entity.Property(e => e.UserId)
                .HasComment("ID người dùng")
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<OpeningAccountEntry>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("OpeningAccountEntry", tb => tb.HasComment("Số dư tài khoản, Số dư TK ngân hàng, Số dư công nợ KH, NCC, Nhân viên"));

            entity.HasIndex(e => e.BranchId, "IX_OpeningAccountEntry_BranchID").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Số dư đầu Tài khoản")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreditAmount)
                .HasComment("Dư có quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasComment("Dư có")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAmount)
                .HasComment("Dư nợ quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasComment("Dự nợ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỷ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IsAutoGenerate).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPostedCashBook)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ quỹ");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày ghi sổ (fix = StartDate-1)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ: số dư ban đầu tài khoản");

            entity.HasOne(d => d.AccountNumberNavigation).WithMany(p => p.OpeningAccountEntries)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AccountNumber)
                .HasConstraintName("FK_OpeningAccountEntry_Account");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.OpeningAccountEntries)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_OpeningAccountEntry_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.OpeningAccountEntries)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_OpeningAccountEntry_BankAccount");

            entity.HasOne(d => d.Branch).WithMany(p => p.OpeningAccountEntries)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_OpeningAccountEntry_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.OpeningAccountEntries)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_OpeningAccountEntry_CCY");
        });

        modelBuilder.Entity<OpeningAccountEntryDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("OpeningAccountEntryDetail");

            entity.HasIndex(e => e.RefId, "IX_OpeningAccountEntryDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAmount)
                .HasComment("Dư có quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreditAmountOc)
                .HasComment("Dư có")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CreditAmountOC");
            entity.Property(e => e.DebitAmount)
                .HasComment("Dư nợ quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DebitAmountOc)
                .HasComment("Dự nợ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DebitAmountOC");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.Contract).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_Contract");

            entity.HasOne(d => d.Employee).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_AccountObject");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_PUContract");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_PUOrder");

            entity.HasOne(d => d.Ref).WithMany(p => p.OpeningAccountEntryDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_OpeningAccountEntryDetail_OpeningAccountEntry");
        });

        modelBuilder.Entity<OpeningAccountEntryDetailInvoice>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("OpeningAccountEntryDetailInvoice", tb =>
                {
                    tb.HasComment("Bảng lưu trữ Công nợ đầu kỳ theo hóa đơn");
                    tb.HasTrigger("trg_OpeningAccountEntryDetailInvoice_DataChanged");
                });

            entity.HasIndex(e => new { e.RefId, e.InvDate, e.InvNo, e.PayAmount }, "IX_OpeningAccountEntryDetailInvoice_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số còn phải thu/Số còn phải trả QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Số còn phải thu/Số còn phải trả")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvoiceAmount)
                .HasComment("Giá trị hóa đơn QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvoiceAmountOc)
                .HasComment("Giá trị hóa đơn")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("InvoiceAmountOC");
            entity.Property(e => e.IsAutoGenerate).HasDefaultValueSql("((0))");
            entity.Property(e => e.PayAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PayAmountOC");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp dòng");

            entity.HasOne(d => d.Employee).WithMany(p => p.OpeningAccountEntryDetailInvoices)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_OpeningAccountEntryDetailInvoice_AccountObject");

            entity.HasOne(d => d.Ref).WithMany(p => p.OpeningAccountEntryDetailInvoices)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_OpeningAccountEntryDetailInvoice_OpeningAccountEntry");
        });

        modelBuilder.Entity<OpeningInventoryEntry>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("OpeningInventoryEntry", tb => tb.HasComment("Số dư tồn kho VTHH"));

            entity.HasIndex(e => e.BranchId, "IX_OpeningInventoryEntry_BranchID").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_OpeningInventoryEntry_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.StockId, "IX_OpeningInventoryEntry_StockID").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Số dư đầu Vật tư")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount)
                .HasComment("Giá trị tồn")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chính;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Hạn dùng")
                .HasColumnType("datetime");
            entity.Property(e => e.InrefOrder)
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryPostedDate)
                .HasComment("Ngày ghi sổ kho")
                .HasColumnType("datetime");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedInventoryBook)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày ghi sổ (Ngày chứng từ trên UI)")
                .HasColumnType("datetime");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng tồn")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder)
                .ValueGeneratedOnAdd()
                .HasComment("Thứ tự sắp xếp các dòng chi tiết dùng để sắp xếp thứ tự khi tính giá");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ: số dư ban đầu VTHH");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính(bộ, chiếc, mét...)")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.OpeningInventoryEntries)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_OpeningInventoryEntry_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.OpeningInventoryEntries)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_OpeningInventoryEntry_OrganizationUnit");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.OpeningInventoryEntries)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OpeningInventoryEntry_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.OpeningInventoryEntryMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Stock).WithMany(p => p.OpeningInventoryEntries)
                .HasForeignKey(d => d.StockId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OpeningInventoryEntry_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.OpeningInventoryEntryUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_OpeningInventoryEntry_Unit");
        });

        modelBuilder.Entity<OrganizationUnit>(entity =>
        {
            entity.ToTable("OrganizationUnit", tb =>
                {
                    tb.HasComment("Bảng lưu chi nhánh/phòng ban");
                    tb.HasTrigger("trgDeleteOrganizationUnit");
                });

            entity.HasIndex(e => new { e.MisacodeId, e.SortMisacodeId }, "IX_OrganizationUnit_MISACodeID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitCode, "IX_OrganizationUnit_OrganizationUnitCode").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitTypeId, "IX_OrganizationUnit_OrganizationUnitType").HasFillFactor(90);

            entity.Property(e => e.OrganizationUnitId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Địa chỉ");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.BusinessRegistrationNumber)
                .HasMaxLength(50)
                .HasComment("Số đăng ký kinh doanh");
            entity.Property(e => e.BusinessRegistrationNumberIssuedDate)
                .HasComment("Ngày cấp")
                .HasColumnType("datetime");
            entity.Property(e => e.BusinessRegistrationNumberIssuedPlace)
                .HasMaxLength(255)
                .HasComment("Nơi cấp");
            entity.Property(e => e.CashierName)
                .HasMaxLength(50)
                .HasComment("Tên Thủ quỹ");
            entity.Property(e => e.CashierTitle)
                .HasMaxLength(50)
                .HasComment("Tiêu đề người ký là Thủ quỹ");
            entity.Property(e => e.ChiefOfAccountingName)
                .HasMaxLength(50)
                .HasComment("Tên Kế toán trưởng");
            entity.Property(e => e.ChiefOfAccountingTitle)
                .HasMaxLength(50)
                .HasComment("Tiêu đề người ký là Kế toán trưởng");
            entity.Property(e => e.CompanyBankAccountId)
                .HasComment("Tài khoản ngân hàng")
                .HasColumnName("CompanyBankAccountID");
            entity.Property(e => e.CompanyCity).HasMaxLength(100);
            entity.Property(e => e.CompanyDistrict).HasMaxLength(100);
            entity.Property(e => e.CompanyEmail)
                .HasMaxLength(100)
                .HasComment("Email");
            entity.Property(e => e.CompanyFax)
                .HasMaxLength(50)
                .HasComment("Fax");
            entity.Property(e => e.CompanyOwnerName)
                .HasMaxLength(128)
                .HasComment("Tên đơn vị chủ quản");
            entity.Property(e => e.CompanyOwnerTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế đơn vị chủ quản");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.CompanyTel)
                .HasMaxLength(50)
                .HasComment("Số điện thoại");
            entity.Property(e => e.CompanyWebsite)
                .HasMaxLength(100)
                .HasComment("Website");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chi phí lương");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DirectorName)
                .HasMaxLength(50)
                .HasComment("Tên giám đốc");
            entity.Property(e => e.DirectorTitle)
                .HasMaxLength(50)
                .HasComment("Tiêu đề người ký là giám đốc");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsDependent)
                .HasDefaultValueSql("((1))")
                .HasComment("0 = Hạch toán độc lập; 1 = Hạch toán  phụ thuộc");
            entity.Property(e => e.IsGetReporterNameByUserLogIn).HasComment("Lấy tên người lập biểu theo tên người đăng nhập");
            entity.Property(e => e.IsParent).HasComment("Là đơn vị cha");
            entity.Property(e => e.IsPrintSigner).HasComment("In tên người ký lên chứng từ, báo cáo");
            entity.Property(e => e.IsPrivateVatdeclaration)
                .HasComment("Kê khai thuế giá trị gia tăng riêng")
                .HasColumnName("IsPrivateVATDeclaration");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OrganizationUnitCode)
                .HasMaxLength(20)
                .HasComment("Mã đơn vị");
            entity.Property(e => e.OrganizationUnitName)
                .HasMaxLength(128)
                .HasComment("Tên đơn vị");
            entity.Property(e => e.OrganizationUnitTypeId)
                .HasDefaultValueSql("((6))")
                .HasComment("Cấp tổ chức: 1 - Tổng công ty; 2 - Chi nhánh; 3 - VP/TT; 4 - Phòng ban; 5- Phân xưởng; 6 - Nhóm/Tổ,hội")
                .HasColumnName("OrganizationUnitTypeID");
            entity.Property(e => e.ParentId)
                .HasComment("ID đơn vị cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.ReporterName)
                .HasMaxLength(50)
                .HasComment("Tên Người lập biểu");
            entity.Property(e => e.ReporterTitle)
                .HasMaxLength(50)
                .HasComment("Tiêu đề người ký là Người lập biểu");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.StoreKeeperName)
                .HasMaxLength(50)
                .HasComment("Tên thủ kho");
            entity.Property(e => e.StoreKeeperTitle)
                .HasMaxLength(50)
                .HasComment("Tiêu đề người ký là Thủ kho");

            entity.HasOne(d => d.CompanyBankAccount).WithMany(p => p.OrganizationUnits)
                .HasForeignKey(d => d.CompanyBankAccountId)
                .HasConstraintName("FK_OrganizationUnit_BankAccount");
        });

        modelBuilder.Entity<OrganizationUnitInfo>(entity =>
        {
            entity.HasKey(e => e.OrganizationUnitInfoId).HasName("PK_CompanyInfo");

            entity.ToTable("OrganizationUnitInfo");

            entity.Property(e => e.OrganizationUnitInfoId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("OrganizationUnitInfoID");
            entity.Property(e => e.Description).HasComment("Nội dung, giá trị của chỉ tiêu");
            entity.Property(e => e.IsBold).HasComment("Trạng thái In dậm của chỉ tiêu 1: In đậm; 0: không in đậm");
            entity.Property(e => e.IsItalic).HasComment("Trạng thái in nghiên của chỉ tiêu 1: In nghiên; 0 không in nghiêng");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(20)
                .HasComment("Mã chỉ tiêu");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .HasComment("Tên chỉ tiêu");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("FK")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự của chỉ tiêu");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.OrganizationUnitInfos)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_OrganizationUnitInfo_OrganizationUnit");
        });

        modelBuilder.Entity<OrganizationUnitType>(entity =>
        {
            entity.ToTable("OrganizationUnitType");

            entity.Property(e => e.OrganizationUnitTypeId)
                .ValueGeneratedNever()
                .HasColumnName("OrganizationUnitTypeID");
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.OrganizationUnitTypeName).HasMaxLength(50);
        });

        modelBuilder.Entity<PasalaryExpense>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PASalaryExpense", tb => tb.HasComment("Bảng master Hạch toán chi phí lương"));

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_PASalaryExpense_RefNoFinance");

            entity.HasIndex(e => e.BranchId, "PASalaryExpense_BranchID").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("ID của chi nhánh.")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PasalarySheetName)
                .HasMaxLength(255)
                .HasComment("Tên bảng lương")
                .HasColumnName("PASalarySheetName");
            entity.Property(e => e.PasalarySheetRefId)
                .HasComment("ID bảng lương")
                .HasColumnName("PASalarySheetRefID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự chứng từ nhập vào database");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số tiền")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.PasalaryExpenses)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PASalaryExpense_OrganizationUnit");

            entity.HasOne(d => d.PasalarySheetRef).WithMany(p => p.PasalaryExpenses)
                .HasForeignKey(d => d.PasalarySheetRefId)
                .HasConstraintName("FK_PASalaryExpense_PASalarySheet");
        });

        modelBuilder.Entity<PasalaryExpenseAllocation>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_PASalaryAllocation");

            entity.ToTable("PASalaryExpenseAllocation", tb => tb.HasComment("Master phân bổ chi phí lương"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AllocationType).HasComment("Kiểu phân bổ. 0 = Phân bổ theo nhân viên; 1 = Phân bổ theo đơn vị");
            entity.Property(e => e.IsDisplayDetailSalaryInsurance).HasComment("Hiển thị chi tiết các khoản lương, bảo hiểm");
            entity.Property(e => e.PasalarySheetRefId)
                .HasComment("ID bảng lương")
                .HasColumnName("PASalarySheetRefID");

            entity.HasOne(d => d.PasalarySheetRef).WithMany(p => p.PasalaryExpenseAllocations)
                .HasForeignKey(d => d.PasalarySheetRefId)
                .HasConstraintName("FK_PASalaryExpenseAllocation_PASalarySheet");
        });

        modelBuilder.Entity<PasalaryExpenseAllocationDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PASalaryExpenseAllocationDetail");

            entity.HasIndex(e => e.EmployeeId, "PASalaryExpenseAllocationDetail_EmployeeID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitId, "PASalaryExpenseAllocationDetail_OrganizationUnitID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "PASalaryExpenseAllocationDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AdvancePaymentAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AdvancePaymentAmount141).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationObjectId).HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(8, 4)");
            entity.Property(e => e.BasicWage)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney10).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney4).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney5).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney6).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney7).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney8).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney9).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber10).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber4).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber5).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber6).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber7).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber8).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber9).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnString1).HasMaxLength(255);
            entity.Property(e => e.ColumnString2).HasMaxLength(255);
            entity.Property(e => e.ColumnString3).HasMaxLength(255);
            entity.Property(e => e.ColumnString4).HasMaxLength(255);
            entity.Property(e => e.ColumnString5).HasMaxLength(255);
            entity.Property(e => e.CompanyHealthInsurranceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CompanyLaborUnionContributionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CompanySocialInsuranceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CompanyUnemploymentInsurranceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CostAccount).HasMaxLength(20);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FamilyCoditionDeductionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.HealthInsurranceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncomeForTaxCalculation).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncomeTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InsuranceSalaryAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LaborUnionContributionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NonWorkingdayAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfNonWorkingdayTimeSheet).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfPaidWorkingdayTimeSheet).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OtherAllowance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidWorkingdayAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayrollFundAllowance).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SalaryCoefficient)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SocialInsuranceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("('((0))')");
            entity.Property(e => e.SumOfDeductionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalExpenseAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalOverTime).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalPersonalTaxIncomeAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UnemploymentInsurranceAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingDayUnitPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingHourUnitPrice).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Employee).WithMany(p => p.PasalaryExpenseAllocationDetails)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_PASalaryAllocationDetail_AccountObject");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PasalaryExpenseAllocationDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PASalaryExpenseAllocationDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.PasalaryExpenseAllocationDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PASalaryExpenseAllocationDetail_PASalaryExpenseAllocation");
        });

        modelBuilder.Entity<PasalaryExpenseDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PASalaryExpenseDetail");

            entity.HasIndex(e => e.RefId, "PASalaryExpenseDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có");
            entity.Property(e => e.CreditAccountObjectId)
                .HasComment("Đối tượng Có")
                .HasColumnName("CreditAccountObjectID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.DebitAccountObjectId)
                .HasComment("Đối tượng Nợ")
                .HasColumnName("DebitAccountObjectID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("ĐT tập hợp chi phí")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Thứ tự sắp xếp dòng");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");

            entity.HasOne(d => d.Contract).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PasalaryExpenseDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_PAPayrollExpenseDetail_Account_CreditAccount");

            entity.HasOne(d => d.CreditAccountObject).WithMany(p => p.PasalaryExpenseDetailCreditAccountObjects)
                .HasForeignKey(d => d.CreditAccountObjectId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_AccountObject_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PasalaryExpenseDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_PAPayrollExpenseDetail_Account_DebitAccount");

            entity.HasOne(d => d.DebitAccountObject).WithMany(p => p.PasalaryExpenseDetailDebitAccountObjects)
                .HasForeignKey(d => d.DebitAccountObjectId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_AccountObject_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_PAPayrollExpenseDetail_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.PasalaryExpenseDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PASalaryExpenseDetail_PASalaryExpense");
        });

        modelBuilder.Entity<PasalarySheet>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PASalarySheet", tb =>
                {
                    tb.HasComment("Master Bảng lương");
                    tb.HasTrigger("trg_SalarySheet_DataChanged");
                });

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Bảng lương hàng tháng")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.PasalarySheetMonth)
                .HasComment("Tháng (Tháng = 0 là bộ setup chuẩn để user tạo bảng lương đầu tiên)")
                .HasColumnName("PASalarySheetMonth");
            entity.Property(e => e.PasalarySheetName)
                .HasMaxLength(255)
                .HasComment("Tên bảng lương")
                .HasColumnName("PASalarySheetName");
            entity.Property(e => e.PasalarySheetParameter).HasColumnName("PASalarySheetParameter");
            entity.Property(e => e.PasalarySheetPeriod)
                .HasComputedColumnSql("(CONVERT([date],((CONVERT([varchar](4),[PASalarySheetYear],0)+'-')+CONVERT([varchar](2),[PASalarySheetMonth],0))+'-01',(21)))", true)
                .HasColumnName("PASalarySheetPeriod");
            entity.Property(e => e.PasalarySheetYear)
                .HasComment("Năm (Năm = 0 là bộ setup chuẩn để user tạo bảng lương đầu tiên)")
                .HasColumnName("PASalarySheetYear");
            entity.Property(e => e.PatimeSheetRefId)
                .HasComment("RefID của báng chấm công (hoặc bảng tổng hợp chấm công)")
                .HasColumnName("PATimeSheetRefID");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalNetIncomeAmount)
                .HasComment("Tổng số tiền")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.PasalarySheets)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PASalarySheet_OrganizationUnit");
        });

        modelBuilder.Entity<PasalarySheetColumn>(entity =>
        {
            entity.ToTable("PASalarySheetColumn", tb => tb.HasComment(" Bảng config column cho Bảng lương hàng tháng"));

            entity.HasIndex(e => e.LayoutId, "PASalarySheetColumn_RefID").HasFillFactor(90);

            entity.Property(e => e.PasalarySheetColumnId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Bảng config column cho Bảng lương hàng tháng")
                .HasColumnName("PASalarySheetColumnID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh. Mẫu ngầm định thì BranchID = NULL")
                .HasColumnName("BranchID");
            entity.Property(e => e.ColumnCaption)
                .HasMaxLength(100)
                .HasComment("Caption của cột hiển thị trên bảng lương");
            entity.Property(e => e.ColumnCode)
                .HasMaxLength(255)
                .HasComment("Mã cột (không trùng, dùng trong công thức tính)");
            entity.Property(e => e.ColumnLevel).HasComment("Mức hiển thị của cột");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(255)
                .HasComment("Tên cột trong bảng SalarySheetDetail");
            entity.Property(e => e.ColumnNameDisplay).HasMaxLength(255);
            entity.Property(e => e.ColumnWidth).HasComment("Độ rộng cột");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản có (hạch toán chi phí lương)");
            entity.Property(e => e.DataType).HasComment("Kiểu dữ liệu");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản nợ (hạch toán chi phí lương)");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.DescriptionDisplay).HasMaxLength(255);
            entity.Property(e => e.Formula)
                .HasMaxLength(500)
                .HasComment("Công thức tính. Lưu ý: phải valid không để công thức bị cross evaluation. Khi tính toán xong 1 cột phải kiểm tra cột phụ thuộc để tính lại cho các cột phụ thuộc đó.");
            entity.Property(e => e.IsExpenseAllocation).HasComment("Khoản lương có cần phân bổ chi phí hay ko?");
            entity.Property(e => e.IsReadOnly).HasComment("Có cho phép sửa hay ko?");
            entity.Property(e => e.LayoutId)
                .HasComment("FK - ID của Bảng lương hàng tháng")
                .HasColumnName("LayoutID");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(255)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ParentColumnName)
                .HasMaxLength(50)
                .HasComment("Mã cột mẹ (merged column)");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.PayrollExpensePost).HasComment("1 = Có hạch toán chi phí lương; 0 = Không hạch toán chi phí lương");
            entity.Property(e => e.RefType).HasComment("Loại bảng lương");
            entity.Property(e => e.SystemColumnType).HasComment("Xác định tính chất của cột: 1 - Có thể thực hiện mọi thao tác; 2 - Không được sửa tên cột; 4 - Không được sử dụng làm cột LabelOnly");
            entity.Property(e => e.Visible).HasComment("Xác định xem cột có được hiển thị hay không");
            entity.Property(e => e.VisiblePosition).HasComment("Vị trí hiển thị của cột trên layout");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PasalarySheetColumnCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PasalarySheetColumnDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_PASalarySheetColumn_Account-DebitAccount");

            entity.HasOne(d => d.Layout).WithMany(p => p.PasalarySheetColumns)
                .HasForeignKey(d => d.LayoutId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PASalarySheetColumn_PASalarySheetTemplate");
        });

        modelBuilder.Entity<PasalarySheetDetail>(entity =>
        {
            entity.ToTable("PASalarySheetDetail", tb => tb.HasComment("Detail Bảng lương"));

            entity.HasIndex(e => e.EmployeeId, "PASalarySheetDetail_EmployeeID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitId, "PASalarySheetDetail_OrganizationUnitID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "PASalarySheetDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.PasalarySheetDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Chi tiết bảng lương")
                .HasColumnName("PASalarySheetDetailID");
            entity.Property(e => e.AdvancePaymentAmount)
                .HasComment("Tạm ứng trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AdvancePaymentAmount141)
                .HasComment("Tạm ứng 141")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BasicWage)
                .HasComment("Lương cơ bản")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney1)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney10)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney2)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney3)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney4)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney5)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney6)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney7)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney8)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnMoney9)
                .HasComment("Cột money custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber1)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber10)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber2)
                .HasComment("Cột kiểu số custom 2")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber3)
                .HasComment("Cột kiểu số custom 3")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber4)
                .HasComment("Cột kiểu số custom 4")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber5)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber6)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber7)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber8)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnNumber9)
                .HasComment("Cột kiểu số custom 1")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ColumnString1)
                .HasMaxLength(255)
                .HasComment("Cột kiểu chữ custom 1");
            entity.Property(e => e.ColumnString2)
                .HasMaxLength(255)
                .HasComment("Cột kiểu chữ custom 1");
            entity.Property(e => e.ColumnString3)
                .HasMaxLength(255)
                .HasComment("Cột kiểu chữ custom 1");
            entity.Property(e => e.ColumnString4)
                .HasMaxLength(255)
                .HasComment("Cột kiểu chữ custom 1");
            entity.Property(e => e.ColumnString5)
                .HasMaxLength(255)
                .HasComment("Cột kiểu chữ custom 1");
            entity.Property(e => e.CompanyHealthInsurranceAmount)
                .HasComment("BHYT công ty đóng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CompanyLaborUnionContributionAmount)
                .HasComment("KPCĐ (Kinh phí công đoàn) công ty đóng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CompanySocialInsuranceAmount)
                .HasComment("BHXH công ty đóng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CompanyUnemploymentInsurranceAmount)
                .HasComment("BHTN công ty đóng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContactTitle).HasMaxLength(128);
            entity.Property(e => e.EmployeeId)
                .HasComment("FK - Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.FamilyCoditionDeductionAmount)
                .HasComment("Giảm trừ gia cảnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.HealthInsurranceAmount)
                .HasComment("BHYT")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncomeForTaxCalculation)
                .HasComment("Thu nhập tính thuế TNCN")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncomeTaxAmount)
                .HasComment("Thuế thu nhập cá nhân (không cho thiết lập công thức)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InsuranceSalaryAmount)
                .HasComment("Lương đóng bảo hiểm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LaborUnionContributionAmount)
                .HasComment("KPCĐ (Kinh phí công đoàn)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NetAmount)
                .HasComment("Số tiền còn được lĩnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NonWorkingdayAmount)
                .HasComment("Số tiền KHÔNG hưởng 100% lương thời gian")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfNonWorkingdayTimeSheet)
                .HasComment("Số công KHÔNG hưởng 100% lương thời gian")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfOvertimeWorkingHoursHoliDay)
                .HasComment("Số giờ công làm thêm ngày (lễ, tết)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfOvertimeWorkingHoursHoliDayNight)
                .HasComment("Số giờ công làm thêm đêm (lễ, tết)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfOvertimeWorkingHoursWeekendDay)
                .HasComment("Số giờ công làm thêm ngày (thứ 7, chủ nhật)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfOvertimeWorkingHoursWeekendDayNight)
                .HasComment("Số giờ công làm thêm đêm (thứ 7, chủ nhật)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfOvertimeWorkingHoursWorkingDay)
                .HasComment("Số giờ công làm thêm ngày (ngày thường)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfOvertimeWorkingHoursWorkingDayNight)
                .HasComment("Số giờ công làm thêm đêm (ngày thường)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NumberOfPaidWorkingdayTimeSheet)
                .HasComment("Số công hưởng 100% lương thời gian")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("ID đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OtherAllowance)
                .HasComment("Phụ cấp khác")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeAmount)
                .HasComment("Số tiền làm thêm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeWorkHoliDayAmount)
                .HasComment("Số tiền làm thêm ngày (lễ, tết)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeWorkHoliDayNightAmount)
                .HasComment("Số tiền công làm thêm đêm (lễ, tết)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeWorkWeekendDayAmount)
                .HasComment("Số tiền làm thêm ngày (thứ 7, chủ nhật)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeWorkWeekendDayNightAmount)
                .HasComment("Số tiền làm thêm đêm (thứ 7, chủ nhật)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeWorkWorkingDayAmount)
                .HasComment("Số tiền làm thêm ngày (ngày thường)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OverTimeWorkWorkingDayNightAmount)
                .HasComment("Số tiền làm thêm đêm (ngày thường)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidWorkingdayAmount)
                .HasComment("Số tiền hưởng 100% lương thời gian")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayrollFundAllowance)
                .HasComment("Phụ cấp thuộc quỹ lương")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK - ID của Bảng lương hàng tháng")
                .HasColumnName("RefID");
            entity.Property(e => e.SalaryCoefficient)
                .HasDefaultValueSql("((1))")
                .HasComment("Hệ số lương")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SignName)
                .HasMaxLength(128)
                .HasComment("Ký nhận");
            entity.Property(e => e.SocialInsuranceAmount)
                .HasComment("BHXH")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự của các dòng trong bảng lương");
            entity.Property(e => e.SumOfDeductionAmount)
                .HasComment("Cộng các khoản khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDayOrHourByRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDayOrHourByRateOvertime)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalOverTime)
                .HasComment("Số giờ làm thêm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalPersonalTaxIncomeAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UnemploymentInsurranceAmount)
                .HasComment("BHTN")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingDayUnitPrice)
                .HasComment("Đơn giá ngày công")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingHourUnitPrice)
                .HasComment("Đơn giá giờ công")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Employee).WithMany(p => p.PasalarySheetDetails)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_PASalarySheetDetail_AccountObject");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PasalarySheetDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PASalarySheetDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.PasalarySheetDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PASalarySheetDetail_PASalarySheet");
        });

        modelBuilder.Entity<PasalarySheetTemplate>(entity =>
        {
            entity.HasKey(e => e.LayoutId);

            entity.ToTable("PASalarySheetTemplate");

            entity.Property(e => e.LayoutId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("LayoutID");
            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsPublic).HasDefaultValueSql("((0))");
            entity.Property(e => e.LayoutName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RefTypeName).HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<PasalarySheetTemplateUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PASalarySheetTemplateUser");

            entity.Property(e => e.LayoutId).HasColumnName("LayoutID");
            entity.Property(e => e.PasalarySheetId).HasColumnName("PASalarySheetID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Layout).WithMany()
                .HasForeignKey(d => d.LayoutId)
                .HasConstraintName("FK_PASalarySheetTemplateUser_PASalarySheetTemplate");
        });

        modelBuilder.Entity<PasalaryTaxInsuranceRegulation>(entity =>
        {
            entity.HasKey(e => e.RegulationId);

            entity.ToTable("PASalaryTaxInsuranceRegulation", tb => tb.HasComment("Bảng lưu trữ quy định lương, thuế, bảo hiểm"));

            entity.Property(e => e.RegulationId)
                .HasMaxLength(50)
                .HasComment("PK")
                .HasColumnName("RegulationID");
            entity.Property(e => e.DataType).HasComment("Kiểu dữ liệu");
            entity.Property(e => e.RegulationName)
                .HasMaxLength(100)
                .HasComment("Tên quy định");
            entity.Property(e => e.Value)
                .HasComment("Giá trị của quy định")
                .HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<PatimeSheet>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PATimeSheet", tb => tb.HasComment("master Bảng chấm công"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((0))");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.PatimeSheetMonth)
                .HasComment("Tháng")
                .HasColumnName("PATimeSheetMonth");
            entity.Property(e => e.PatimeSheetName)
                .HasMaxLength(255)
                .HasComment("Tên bảng chấm công")
                .HasColumnName("PATimeSheetName");
            entity.Property(e => e.PatimeSheetYear)
                .HasComment("Năm")
                .HasColumnName("PATimeSheetYear");
            entity.Property(e => e.RefType).HasComment("Loại chấm công");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.PatimeSheets)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PATimeSheet_OrganizationUnit");
        });

        modelBuilder.Entity<PatimeSheetDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PATimeSheetDetail", tb => tb.HasComment("Chi tiết bảng chấm công chi tiết"));

            entity.HasIndex(e => e.EmployeeId, "PATimeSheetDetail_EmployeeID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitId, "PATimeSheetDetail_OrganizationUnitID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "PATimeSheetDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Day1)
                .HasMaxLength(1000)
                .HasComment("");
            entity.Property(e => e.Day10).HasMaxLength(1000);
            entity.Property(e => e.Day11).HasMaxLength(1000);
            entity.Property(e => e.Day12).HasMaxLength(1000);
            entity.Property(e => e.Day13).HasMaxLength(1000);
            entity.Property(e => e.Day14).HasMaxLength(1000);
            entity.Property(e => e.Day15).HasMaxLength(1000);
            entity.Property(e => e.Day16).HasMaxLength(1000);
            entity.Property(e => e.Day17).HasMaxLength(1000);
            entity.Property(e => e.Day18).HasMaxLength(1000);
            entity.Property(e => e.Day19).HasMaxLength(1000);
            entity.Property(e => e.Day2).HasMaxLength(1000);
            entity.Property(e => e.Day20).HasMaxLength(1000);
            entity.Property(e => e.Day21).HasMaxLength(1000);
            entity.Property(e => e.Day22).HasMaxLength(1000);
            entity.Property(e => e.Day23).HasMaxLength(1000);
            entity.Property(e => e.Day24).HasMaxLength(1000);
            entity.Property(e => e.Day25).HasMaxLength(1000);
            entity.Property(e => e.Day26).HasMaxLength(1000);
            entity.Property(e => e.Day27).HasMaxLength(1000);
            entity.Property(e => e.Day28).HasMaxLength(1000);
            entity.Property(e => e.Day29).HasMaxLength(1000);
            entity.Property(e => e.Day3).HasMaxLength(1000);
            entity.Property(e => e.Day30).HasMaxLength(1000);
            entity.Property(e => e.Day31).HasMaxLength(1000);
            entity.Property(e => e.Day4).HasMaxLength(1000);
            entity.Property(e => e.Day5).HasMaxLength(1000);
            entity.Property(e => e.Day6).HasMaxLength(1000);
            entity.Property(e => e.Day7).HasMaxLength(1000);
            entity.Property(e => e.Day8).HasMaxLength(1000);
            entity.Property(e => e.Day9).HasMaxLength(1000);
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.Holiday).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.HolidayNight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NonPaidWorkingday)
                .HasComment("Số công KHÔNG hưởng 100%  lương")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("ID cơ cấu tổ chức")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PaidWorkingday)
                .HasComment("Số công hưởng 100% lương")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("ID của bảng chấm công")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Số thứ tự");
            entity.Property(e => e.TotalOverTime).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WeekendDay).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WeekendDayNight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingDay).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingDayNight).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Employee).WithMany(p => p.PatimeSheetDetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAWorkPointEmployee_AccountObject");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PatimeSheetDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PAWorkPointEmployee_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.PatimeSheetDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PATimeSheetDetail_PATimeSheet");
        });

        modelBuilder.Entity<PatimeSheetSummary>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PATimeSheetSummary", tb => tb.HasComment("Bảng master Tổng hợp chấm công"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.DisplayOnBook).HasDefaultValueSql("((0))");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.PatimeSheetMonth)
                .HasComment("Tháng")
                .HasColumnName("PATimeSheetMonth");
            entity.Property(e => e.PatimeSheetName)
                .HasMaxLength(255)
                .HasComment("Tên bảng chấm công")
                .HasColumnName("PATimeSheetName");
            entity.Property(e => e.PatimeSheetYear)
                .HasComment("Năm")
                .HasColumnName("PATimeSheetYear");
            entity.Property(e => e.RefType).HasComment("Loại chấm công");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.PatimeSheetSummaries)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PATimeSheetSummary_OrganizationUnit");
        });

        modelBuilder.Entity<PatimeSheetSummaryDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PATimeSheetSummaryDetail");

            entity.HasIndex(e => e.EmployeeId, "PATimeSheetSummaryDetail_EmployeeID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitId, "PATimeSheetSummaryDetail_OrganizationUnitID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "PATimeSheetSummaryDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Holiday).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.HolidayNight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NonPaidWorkingday).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PaidWorkingday).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("('((0))')");
            entity.Property(e => e.TotalOverTime).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WeekendDay).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WeekendDayNight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingDay).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.WorkingDayNight).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Employee).WithMany(p => p.PatimeSheetSummaryDetails)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAWorkPointSummaryEmployee_AccountObject");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PatimeSheetSummaryDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PAWorkPointSummaryEmployee_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.PatimeSheetSummaryDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PATimeSheetSummaryDetail_PATimeSheetSummary");
        });

        modelBuilder.Entity<PatimeSheetSummaryDetailMatrix>(entity =>
        {
            entity.HasKey(e => e.DetailMatrixId);

            entity.ToTable("PATimeSheetSummaryDetailMatrix", tb => tb.HasComment("Ma trận giá trị của bảng tổng hợp chấm công theo buổi, theo giờ"));

            entity.HasIndex(e => e.RefDetailId, "PATimeSheetSummaryDetailMatrix_RefDetailID").HasFillFactor(90);

            entity.HasIndex(e => e.TimeSheetSignId, "PATimeSheetSummaryDetailMatrix_TimeSheetSignID").HasFillFactor(90);

            entity.Property(e => e.DetailMatrixId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("DetailMatrixID");
            entity.Property(e => e.IsVisible).HasComment("Ẩn/hiện cột trên bảng tổng hợp chấm công");
            entity.Property(e => e.RefDetailId)
                .HasComment("ID của bảng PATimeSheetSummaryDetail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID của bảng tổng hợp chấm công")
                .HasColumnName("RefID");
            entity.Property(e => e.TimeSheetSignId)
                .HasComment("Ký hiệu chấm công (Các cột trên bảng tổng hợp chấm công)")
                .HasColumnName("TimeSheetSignID");
            entity.Property(e => e.Value)
                .HasComment("Tổng số ngày công, giờ công")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.RefDetail).WithMany(p => p.PatimeSheetSummaryDetailMatrices)
                .HasForeignKey(d => d.RefDetailId)
                .HasConstraintName("FK_PATimeSheetSummaryDetailMatrix_PATimeSheetSummaryDetail");

            entity.HasOne(d => d.TimeSheetSign).WithMany(p => p.PatimeSheetSummaryDetailMatrices)
                .HasForeignKey(d => d.TimeSheetSignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAWorkPointSummaryDetail_TimeSheetSign");
        });

        modelBuilder.Entity<PavoucherDeduction>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PAVoucherDeduction");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("ID chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.Bccemail).HasColumnName("BCCEmail");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CancelDate)
                .HasComment("Ngày hủy")
                .HasColumnType("datetime");
            entity.Property(e => e.CancelReason)
                .HasMaxLength(400)
                .HasComment("Lý do hủy");
            entity.Property(e => e.Ccemail).HasColumnName("CCEmail");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatorEmail).HasMaxLength(255);
            entity.Property(e => e.CreatorJobName).HasMaxLength(255);
            entity.Property(e => e.CreatorName).HasMaxLength(100);
            entity.Property(e => e.CreatorPhone).HasMaxLength(50);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EmployeeAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ người nộp thuế");
            entity.Property(e => e.EmployeeId)
                .HasComment("Mã nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeMobile)
                .HasMaxLength(50)
                .HasComment("SĐT của người nộp thuế");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(255)
                .HasComment("Tên người nộp thuế");
            entity.Property(e => e.EmployeeTaxNo)
                .HasMaxLength(255)
                .HasComment("Mã số thuế người nộp thuế");
            entity.Property(e => e.EmployeeType)
                .HasDefaultValueSql("((1))")
                .HasComment("Loại người nộp thuế: 1. Nhân viên, 2. Vãng lai");
            entity.Property(e => e.EndMonth).HasComment("Tháng kết thúc chi trả thu nhập");
            entity.Property(e => e.IdentifyDate).HasComment("Ngày cấp");
            entity.Property(e => e.IdentifyIssuedPlaceCode)
                .HasMaxLength(50)
                .HasComment("Mã nơi cấp");
            entity.Property(e => e.IdentifyIssuedPlaceName)
                .HasMaxLength(255)
                .HasComment("Tên nơi cấp");
            entity.Property(e => e.IdentifyNumber)
                .HasMaxLength(50)
                .HasComment("Số giấy tờ: Số CMND/CCCD/Hộ chiếu");
            entity.Property(e => e.IdentifyTypeName)
                .HasMaxLength(255)
                .HasComment("Tên loại giấy tờ: 3 loại: CMND, CCCD, Hộ chiếu");
            entity.Property(e => e.IncomeDateName).HasMaxLength(255);
            entity.Property(e => e.IncomeForCalculateTax)
                .HasComment("Tổng thu nhập tính thuế")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.IncomeTypeName)
                .HasMaxLength(255)
                .HasComment("Khoản thu nhập");
            entity.Property(e => e.IncomeYear).HasComment("Năm chi trả thu nhập");
            entity.Property(e => e.InsuranceCompulsoryPayment)
                .HasComment("Khoản đóng bảo hiểm bắt buộc")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.IsResident)
                .HasDefaultValueSql("((1))")
                .HasComment("Có phải cá nhân cư trú không: 1. Cư trú, 0. Không cư trú, mặc định là 1");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NationalName)
                .HasMaxLength(255)
                .HasComment("Quốc tịch");
            entity.Property(e => e.OrganizationId).HasColumnName("OrganizationID");
            entity.Property(e => e.PersonalIncomeTax)
                .HasComment("Số thuế thu nhập cá nhân đã khấu trừ")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo).HasMaxLength(50);
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SentEmployeeStatus).HasComment("Trạng thái gửi người nộp thuế");
            entity.Property(e => e.SentEmployeeStatusName)
                .HasMaxLength(255)
                .HasComment("Trạng thái gửi người nộp thuế");
            entity.Property(e => e.Series).HasMaxLength(50);
            entity.Property(e => e.StartMonth).HasComment("Tháng bắt đầu chi trả thu nhập");
            entity.Property(e => e.TaxHoldingConfigId).HasColumnName("TaxHoldingConfigID");
            entity.Property(e => e.TemplateNo).HasMaxLength(50);
            entity.Property(e => e.TotalTaxIncome)
                .HasComment("Tổng thu nhập chịu thuế phải khấu trừ")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.UserId)
                .HasComment("ID người lập chứng từ")
                .HasColumnName("UserID");
            entity.Property(e => e.VoucherStatus).HasComment("Trạng thái chứng từ");
            entity.Property(e => e.VoucherStatusName)
                .HasMaxLength(255)
                .HasComment("Tên trạng thái chứng từ");

            entity.HasOne(d => d.Branch).WithMany(p => p.PavoucherDeductions)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PAVoucherDeduction_OrganizationUnit");

            entity.HasOne(d => d.Employee).WithMany(p => p.PavoucherDeductions)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_PAVoucherDeduction_AccountObject");
        });

        modelBuilder.Entity<PavoucherTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK__PAVouche__F87ADD073BA31561");

            entity.ToTable("PAVoucherTemplate");

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateID");
            entity.Property(e => e.BackgroundCode).HasMaxLength(255);
            entity.Property(e => e.BackgroundColor).HasMaxLength(255);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(100)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.DocumentSymbol)
                .HasMaxLength(10)
                .HasComment("Kiểu văn bản mẫu số");
            entity.Property(e => e.FileNameDefault)
                .HasMaxLength(255)
                .HasComment("Tên file mặc định lấy ở folder default");
            entity.Property(e => e.FormNo)
                .HasMaxLength(20)
                .HasComment("Mã số");
            entity.Property(e => e.ImageCode).HasMaxLength(255);
            entity.Property(e => e.ImageColor).HasMaxLength(255);
            entity.Property(e => e.IsCustomTemplate).HasComment("Là mẫu custom hay mẫu mặc địch");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(100)
                .HasComment("Người sửa");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa")
                .HasColumnType("datetime");
            entity.Property(e => e.No)
                .HasMaxLength(10)
                .HasComment("Số");
            entity.Property(e => e.OrganizationId)
                .HasComment("ID chi nhánh đơn vị")
                .HasColumnName("OrganizationID");
            entity.Property(e => e.OrganizationJson)
                .HasComment("Thông tin chi nhánh đơn vị")
                .HasColumnName("OrganizationJSON");
            entity.Property(e => e.OrganizationSymbol)
                .HasMaxLength(5)
                .HasComment("Kiểu mẫu số");
            entity.Property(e => e.ReplaceOrgName).HasComment("Tên đơn bị trên logo");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(20)
                .HasComment("Kí hiệu");
            entity.Property(e => e.TaxHoldingConfigId).HasColumnName("TaxHoldingConfigID");
            entity.Property(e => e.TaxHoldingConfigType).HasComment("Loại mẫu 1-theo tt 37, 2 - theo tt 78");
            entity.Property(e => e.TaxHoldingLogoConfig).HasComment("Biến lưu config xem hiển thị tên hay logo hoặc cả 2 -- 1 là chỉ hiện tên, 2 là chỉ hiện logo, 0 là hiện cả 2");
            entity.Property(e => e.TaxHoldingLogoPositionConfig).HasComment("Vị trí logo 1:trên, 2: dưới,3:trái, 4:phải");
            entity.Property(e => e.TaxHoldingMoreInfor).HasComment("Thông tin thêm");
            entity.Property(e => e.TaxHoldingStatus).HasComment("Trạng thái của chứng từ 0: Chưa phát hành, 1: Đã phát hành, 2: Ngừng phát hành");
            entity.Property(e => e.TemplateFileName)
                .HasMaxLength(255)
                .HasComment("Tên file mẫu");
            entity.Property(e => e.TemplateName)
                .HasMaxLength(255)
                .HasComment("Tên mẫu");
            entity.Property(e => e.TenantId)
                .HasComment("ID công ty")
                .HasColumnName("TenantID");
            entity.Property(e => e.TypePaper).HasComment("Khổ giấy (A4, A5, nằm dọc, nằm ngang)");
            entity.Property(e => e.Year).HasComment("Năm");
        });

        modelBuilder.Entity<PavoucherUsage>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PAVoucherUsage", tb => tb.HasComment("Bảng kê sử dụng chứng từ"));

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Địa chỉ");
            entity.Property(e => e.BranchId)
                .HasComment("ID chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.DeclarationName)
                .HasMaxLength(255)
                .HasComment("Tên bảng kê");
            entity.Property(e => e.DeclarationTerm)
                .HasMaxLength(255)
                .HasComment("Kỳ bảng kê");
            entity.Property(e => e.Editversion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.LegalRepresentative)
                .HasMaxLength(255)
                .HasComment("Người đại diện pháp luật");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa")
                .HasColumnType("datetime");
            entity.Property(e => e.OrganizationPay)
                .HasMaxLength(255)
                .HasComment("Tổ chức chi trả thu nhập");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .HasComment("Số điện thoại");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SignDate)
                .HasComment("Ngày ký")
                .HasColumnType("datetime");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng số tiền thuế")
                .HasColumnType("decimal(21, 6)");
        });

        modelBuilder.Entity<PavoucherUsageDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PAVoucherUsageDetail", tb => tb.HasComment("Bảng kê sử dụng chứng từ chi tiết"));

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(21, 6)");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(255)
                .HasComment("Họ và tên người bị khấu trừ thuế");
            entity.Property(e => e.EmployeeTaxNo)
                .HasMaxLength(255)
                .HasComment("Mã số thuế/CMND/Hộ chiếu");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.OriginalRefId)
                .HasComment("ID chứng từ khấu trừ thuế")
                .HasColumnName("OriginalRefID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .HasComment("Số chứng từ ");
            entity.Property(e => e.RefTypeReference).HasComment("RefType chứng từ khấu trừ thuế");
            entity.Property(e => e.Series)
                .HasMaxLength(50)
                .HasComment("Ký hiệu chứng từ");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự sắp xếp các dòng chi tiết");

            entity.HasOne(d => d.Ref).WithMany(p => p.PavoucherUsageDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PAVoucherUsageDetail_PAVoucherUsage");
        });

        modelBuilder.Entity<PaymentMethodType>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId);

            entity.ToTable("PaymentMethodType", tb => tb.HasComment("Danh mục Hình thức thanh toán"));

            entity.HasIndex(e => e.PaymentMethodName, "IX_PaymentMethodName").IsUnique();

            entity.Property(e => e.PaymentMethodId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK của bảng")
                .HasColumnName("PaymentMethodID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsSystem).HasComment("danh mục hệ thống");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentMethodName)
                .HasMaxLength(100)
                .HasComment("Tên hình thức thanh toán");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<PaymentTerm>(entity =>
        {
            entity.ToTable("PaymentTerm", tb => tb.HasComment("Bảng danh mục điều kiện chiết khấu"));

            entity.HasIndex(e => e.PaymentTermCode, "IX_PaymentTerm_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PaymentTermId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DiscountPercent)
                .HasComment("Tỷ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountTime).HasComment("Thời hạn hưởng chiết khấu");
            entity.Property(e => e.DueTime).HasComment("Hạn nợ (Số ngày được nợ)");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermCode)
                .HasMaxLength(20)
                .HasComment("Mã điều khoản thanh toán");
            entity.Property(e => e.PaymentTermName)
                .HasMaxLength(128)
                .HasComment("Tên điều khoản thanh toán");
        });

        modelBuilder.Entity<PersonalIncomeTaxRate>(entity =>
        {
            entity.HasKey(e => e.PersonalIncomeTaxRateId).HasName("PK_EmployeeIncomeTax");

            entity.ToTable("PersonalIncomeTaxRate", tb => tb.HasComment("Biểu thuế thu nhập cá nhân (Căn cứ để tính thuế thu nhập các nhân)"));

            entity.Property(e => e.PersonalIncomeTaxRateId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - Biểu thuế thu nhập các nhân")
                .HasColumnName("PersonalIncomeTaxRateID");
            entity.Property(e => e.FromIncomeByMonth)
                .HasComment("Thu nhập tính thuế theo tháng từ mức này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FromIncomeByYear)
                .HasComment("Thu nhập tính thuế theo năm từ mức này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.TaxGrade).HasComment("Bậc thuế (1 - 8)");
            entity.Property(e => e.TaxRate)
                .HasComment("Phần trăm chịu thuế (5%; 10%;  20%...)")
                .HasColumnType("decimal(9, 4)");
            entity.Property(e => e.ToIncomeByMonth)
                .HasComment("Thu nhập tính thuế theo tháng đến mức này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ToIncomeByYear)
                .HasComment("Thu nhập tính thuế theo năm đến mức này")
                .HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<PreReceiptRevenue>(entity =>
        {
            entity.ToTable("PreReceiptRevenue");

            entity.Property(e => e.PreReceiptRevenueId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PreReceiptRevenueID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AllocatedAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationAccount).HasMaxLength(20);
            entity.Property(e => e.AllocationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CopyFromId).HasColumnName("CopyFromID");
            entity.Property(e => e.PreReceiptRevenueCode).HasMaxLength(20);
            entity.Property(e => e.PreReceiptRevenueName).HasMaxLength(128);
            entity.Property(e => e.ReasonInactive).HasMaxLength(255);
            entity.Property(e => e.RecordDate)
                .HasComment("Ngày ghi nhận")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.UnrealizedRevenueAccount).HasMaxLength(20);

            entity.HasOne(d => d.AllocationAccountNavigation).WithMany(p => p.PreReceiptRevenueAllocationAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AllocationAccount)
                .HasConstraintName("FK_PreReceiptRevenue_AllocationAccount");

            entity.HasOne(d => d.UnrealizedRevenueAccountNavigation).WithMany(p => p.PreReceiptRevenueUnrealizedRevenueAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.UnrealizedRevenueAccount)
                .HasConstraintName("FK_PreReceiptRevenue_UnrealizedRevenueAccount");
        });

        modelBuilder.Entity<PreReceiptRevenueDetail>(entity =>
        {
            entity.ToTable("PreReceiptRevenueDetail");

            entity.Property(e => e.PreReceiptRevenueDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PreReceiptRevenueDetailID");
            entity.Property(e => e.AllocationAccount).HasMaxLength(20);
            entity.Property(e => e.AllocationObjectId).HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationObjectName).HasMaxLength(255);
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.PreReceiptRevenueId).HasColumnName("PreReceiptRevenueID");

            entity.HasOne(d => d.AllocationAccountNavigation).WithMany(p => p.PreReceiptRevenueDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AllocationAccount)
                .HasConstraintName("FK_PreReceiptRevenueDetail_AllocationAccount");

            entity.HasOne(d => d.PreReceiptRevenue).WithMany(p => p.PreReceiptRevenueDetails)
                .HasForeignKey(d => d.PreReceiptRevenueId)
                .HasConstraintName("FK_PreReceiptRevenueDetail_PreReceiptRevenueID");
        });

        modelBuilder.Entity<PreReceiptRevenueDetailSource>(entity =>
        {
            entity.HasKey(e => e.PreReceiptRevenueDetailId);

            entity.ToTable("PreReceiptRevenueDetailSource");

            entity.Property(e => e.PreReceiptRevenueDetailId)
                .ValueGeneratedNever()
                .HasColumnName("PreReceiptRevenueDetailID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.PreReceiptRevenueId).HasColumnName("PreReceiptRevenueID");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.PreReceiptRevenue).WithMany(p => p.PreReceiptRevenueDetailSources)
                .HasForeignKey(d => d.PreReceiptRevenueId)
                .HasConstraintName("FK_PreReceiptRevenueDetailSource_PreReceiptRevenue");
        });

        modelBuilder.Entity<PrepaidExpense>(entity =>
        {
            entity.HasKey(e => e.PrepaidExpensesId);

            entity.ToTable(tb => tb.HasComment("Các khoản chi phí trả trước"));

            entity.Property(e => e.PrepaidExpensesId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("PrepaidExpensesID");
            entity.Property(e => e.AllocatedAmount)
                .HasComment("Số tiền đã phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocatedPeriod).HasComment("Số kỳ đã phân bổ");
            entity.Property(e => e.AllocationAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chờ phân bổ");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ hàng kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationTime).HasComment("Số kỳ phân bổ");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CopyFromId).HasColumnName("CopyFromID");
            entity.Property(e => e.DisplayOnBook).HasComment("0 = Sổ tài chính; 1 = Sổ quản trị");
            entity.Property(e => e.PrepaidExpensesCode)
                .HasMaxLength(20)
                .HasComment("Mã chi phí trả trước");
            entity.Property(e => e.PrepaidExpensesName)
                .HasMaxLength(128)
                .HasComment("Tên chi phí trả trước");
            entity.Property(e => e.ReasonInactive).HasMaxLength(255);
            entity.Property(e => e.RefDate)
                .HasComment("Ngày ghi nhận")
                .HasColumnType("datetime");

            entity.HasOne(d => d.AllocationAccountNavigation).WithMany(p => p.PrepaidExpenses)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AllocationAccount)
                .HasConstraintName("FK_PrepaidExpenses_Account");
        });

        modelBuilder.Entity<PrepaidExpensesDetail>(entity =>
        {
            entity.ToTable("PrepaidExpensesDetail");

            entity.Property(e => e.PrepaidExpensesDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PrepaidExpensesDetailID");
            entity.Property(e => e.AllocationObjectId).HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationObjectName).HasMaxLength(255);
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(9, 4)");
            entity.Property(e => e.CostAccount).HasMaxLength(20);
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.PrepaidExpensesId).HasColumnName("PrepaidExpensesID");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.PrepaidExpensesDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_PrepaidExpensesDetail_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PrepaidExpensesDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PrepaidExpensesDetail_ExpenseItem");

            entity.HasOne(d => d.PrepaidExpenses).WithMany(p => p.PrepaidExpensesDetails)
                .HasForeignKey(d => d.PrepaidExpensesId)
                .HasConstraintName("FK_PrepaidExpensesDetail_PrepaidExpenses");
        });

        modelBuilder.Entity<PrepaidExpensesDetailSource>(entity =>
        {
            entity.HasKey(e => e.PrepaidExpensesDetailId);

            entity.ToTable("PrepaidExpensesDetailSource");

            entity.Property(e => e.PrepaidExpensesDetailId)
                .ValueGeneratedNever()
                .HasColumnName("PrepaidExpensesDetailID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.PrepaidExpensesId).HasColumnName("PrepaidExpensesID");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của dòng chi tiết")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID của chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefType).HasComment("Loại chúng từ");

            entity.HasOne(d => d.PrepaidExpenses).WithMany(p => p.PrepaidExpensesDetailSources)
                .HasForeignKey(d => d.PrepaidExpensesId)
                .HasConstraintName("FK_PrepaidExpensesDetailSource_PrepaidExpenses");
        });

        modelBuilder.Entity<ProjectWork>(entity =>
        {
            entity.ToTable("ProjectWork", tb => tb.HasComment("Công trình /dự án/Hạng mục công trình"));

            entity.HasIndex(e => e.ProjectWorkCode, "IX_ProjectWork").IsUnique();

            entity.Property(e => e.ProjectWorkId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả tóm tắt");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EstimateAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Dự toán")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FinishDate)
                .HasComment("Ngày kết thúc")
                .HasColumnType("datetime");
            entity.Property(e => e.Grade).HasDefaultValueSql("((1))");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.ProjectWorkCategoryId)
                .HasComment("FK")
                .HasColumnName("ProjectWorkCategoryID");
            entity.Property(e => e.ProjectWorkCode)
                .HasMaxLength(20)
                .HasComment("Mã công trình, vụ việc");
            entity.Property(e => e.ProjectWorkName)
                .HasMaxLength(128)
                .HasComment("Tên công trình, vụ việc");
            entity.Property(e => e.ProjectWorkType).HasComment("Loại công trình/Vụ việc (0=Công trình;1=Hạng mục công trình)");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.Stakeholder)
                .HasMaxLength(128)
                .HasComment("Chủ đầu tư");
            entity.Property(e => e.StakeholderAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ chủ đầu tư");
            entity.Property(e => e.StartDate)
                .HasComment("Ngày khởi công")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Branch).WithMany(p => p.ProjectWorks)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_ProjectWork_OrganizationUnit");

            entity.HasOne(d => d.ProjectWorkCategory).WithMany(p => p.ProjectWorks)
                .HasForeignKey(d => d.ProjectWorkCategoryId)
                .HasConstraintName("FK_ProjectWork_ProjectWorkCategory");
        });

        modelBuilder.Entity<ProjectWorkCategory>(entity =>
        {
            entity.ToTable("ProjectWorkCategory", tb => tb.HasComment("Loại công trình, vụ việc"));

            entity.HasIndex(e => e.ProjectWorkCategoryCode, "IX_ProjectWorkCategory_ProjectWorkCategoryCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.ProjectWorkCategoryId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ProjectWorkCategoryID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả tóm tắt");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkCategoryCode)
                .HasMaxLength(20)
                .HasComment("Mã loại công trình dự án");
            entity.Property(e => e.ProjectWorkCategoryName)
                .HasMaxLength(128)
                .HasComment("Tên loại công trình dự án");
        });

        modelBuilder.Entity<ProjectWorkEstimate>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("ProjectWorkEstimate");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.TotalAmount)
                .HasComment("Chi phí dự toán công trình")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.ProjectWorkEstimates)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectWorkEstimate_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.ProjectWorkEstimates)
                .HasForeignKey(d => d.ProjectWorkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectWorkEstimate_ProjectWork");
        });

        modelBuilder.Entity<ProjectWorkEstimateDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("ProjectWorkEstimateDetail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Giá trị dự toán")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.ProjectWorkEstimateDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectWorkEstimateDetail_ExpenseItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.ProjectWorkEstimateDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_ProjectWorkEstimateDetail_ProjectWorkEstimate");
        });

        modelBuilder.Entity<ProjectWorkNorm>(entity =>
        {
            entity.ToTable("ProjectWorkNorm", tb => tb.HasComment("Định mức nguyên vật liệu công trinh"));

            entity.Property(e => e.ProjectWorkNormId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ProjectWorkNormID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate)
                .HasComment("Áp dụng từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("FK")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.ProjectWorkNorms)
                .HasForeignKey(d => d.ProjectWorkId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectWorkNorm_ProjectWork");
        });

        modelBuilder.Entity<ProjectWorkNormDetail>(entity =>
        {
            entity.ToTable("ProjectWorkNormDetail", tb => tb.HasComment("Định mức nguyên vật liệu công trình"));

            entity.Property(e => e.ProjectWorkNormDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ProjectWorkNormDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên Nguyên vật liệu");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Nguyên vật liệu")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.ProjectWorkNormId)
                .HasComment("FK")
                .HasColumnName("ProjectWorkNormID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng định mức")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vi tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.ProjectWorkNormDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectWorkNormDetail_InventoryItem");

            entity.HasOne(d => d.ProjectWorkNorm).WithMany(p => p.ProjectWorkNormDetails)
                .HasForeignKey(d => d.ProjectWorkNormId)
                .HasConstraintName("FK_ProjectWorkNormDetail_ProjectWorkNorm");

            entity.HasOne(d => d.Unit).WithMany(p => p.ProjectWorkNormDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_ProjectWorkNormDetail_Unit");
        });

        modelBuilder.Entity<PublishingInvoiceConfig>(entity =>
        {
            entity.HasKey(e => new { e.SyncDate, e.CompanyTaxCode }).HasName("PK_PublishingInvoiceConfig_1");

            entity.ToTable("PublishingInvoiceConfig");

            entity.Property(e => e.SyncDate).HasColumnType("datetime");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.KeepInvoiceNoDay).HasDefaultValueSql("((-1))");
            entity.Property(e => e.KeepInvoiceNoExpiredDate).HasColumnType("datetime");
            entity.Property(e => e.ServerDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Pucontract>(entity =>
        {
            entity.ToTable("PUContract", tb => tb.HasComment("Hợp đồng mua"));

            entity.HasIndex(e => new { e.ContractCode, e.BranchId }, "IX_PUContract_ContractCode");

            entity.Property(e => e.PucontractId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("PUContractID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ nhà cung cấp");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người liên hệ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID Nhà cung cấp")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế NCC");
            entity.Property(e => e.Amount)
                .HasComment("Giá trị hợp đồng Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Giá trị hợp đồng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CloseAmount)
                .HasComment("Giá trị thanh lý Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CloseAmountOc)
                .HasComment("Giá trị thanh lý")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CloseAmountOC");
            entity.Property(e => e.CloseDate)
                .HasComment("Ngày thanh lý/Hủy bỏ")
                .HasColumnType("datetime");
            entity.Property(e => e.CloseReason)
                .HasMaxLength(255)
                .HasComment("Lý do");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Số hợp đồng");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DeliverAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ giao hàng");
            entity.Property(e => e.DeliverDueDate)
                .HasComment("Hạn giao hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.EmployeeId)
                .HasComment("ID nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ giá")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExecutedAmountFinance)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExecutedAmountManagement)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IsArisedBeforeUseSoftware).HasDefaultValueSql("((0))");
            entity.Property(e => e.PaidAmount)
                .HasComment("Số đã trả Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidAmountFinance)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidAmountManagement)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidAmountOc)
                .HasComment("Số đã trả")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PaidAmountOC");
            entity.Property(e => e.PayableAmount)
                .HasComment("Số còn phải trả Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PayableAmountOc)
                .HasComment("Số còn phải trả")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PayableAmountOC");
            entity.Property(e => e.PaymentTerm)
                .HasMaxLength(255)
                .HasComment("Điều khoản khác");
            entity.Property(e => e.PuorderId)
                .HasComment("Mã đơn mua hàng")
                .HasColumnName("PUOrderID");
            entity.Property(e => e.RefType)
                .HasDefaultValueSql("((9040))")
                .HasComment("Loai chung tu");
            entity.Property(e => e.SignDate)
                .HasComment("Ngày ký")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasComment("Tình trạng hợp đồng. 0: Chưa thực hiện; 1: Đang thực hiện; 2: Hoàn thành; 3: Đã thanh lý; 4: Đã hủy bỏ");
            entity.Property(e => e.Subject)
                .HasMaxLength(255)
                .HasComment("Trích yếu");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PucontractAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUContract_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Pucontracts)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PUContract_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Pucontracts)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUContract_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.PucontractEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_PUContract_AccountObject1");
        });

        modelBuilder.Entity<PucontractDetailInventoryItem>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_PUContractDetail");

            entity.ToTable("PUContractDetailInventoryItem");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasComment("Tỷ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã sản phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.PucontractId)
                .HasComment("ID Hợp đồng")
                .HasColumnName("PUContractID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityDelivered).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityDeliveredLastYear).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền thanh toán Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền thanh toán")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế Quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PucontractDetailInventoryItems)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUContractDetail_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.PucontractDetailInventoryItemMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_PUContractDetail_Unit_MainUnitID");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PucontractDetailInventoryItems)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUContractDetail_PUContract");

            entity.HasOne(d => d.Unit).WithMany(p => p.PucontractDetailInventoryItemUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PUContractDetail_Unit_UnitID");
        });

        modelBuilder.Entity<PudebtPeriod>(entity =>
        {
            entity.HasKey(e => e.DebtPeriodId);

            entity.ToTable("PUDebtPeriod", tb => tb.HasComment("Danh sách các khoảng thời gian theo dõi Nợ"));

            entity.Property(e => e.DebtPeriodId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DebtPeriodID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DebtPeriodName).HasMaxLength(255);
            entity.Property(e => e.DebtPeriodType).HasComment("0: Trước hạn; 1 quá hạn");
            entity.Property(e => e.FromDay).HasComment("Từ ngày");
            entity.Property(e => e.IsReadOnly)
                .HasDefaultValueSql("((0))")
                .HasComment("True: Item không cho sửa, xóa");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<Pudiscount>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PUDiscount", tb => tb.HasComment("Bảng Master của Hàng mua trả lại"));

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_PUDiscount_RefNoFinance");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Kèm theo");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EinvoiceItemName)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceItemName");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên mua hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.IsValueDecrementFromStock)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Giảm giá trị hàng nhập kho");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do nộp");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Payer)
                .HasMaxLength(128)
                .HasComment("Người nộp");
            entity.Property(e => e.PayerAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ người nộp");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("ID của hóa đơn nhận")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tiền thuế NT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.Pudiscounts)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUDiscount_AccountingObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Pudiscounts)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUDiscount_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Pudiscounts)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUDiscount_CCY");

            entity.HasOne(d => d.PuinvoiceRef).WithMany(p => p.Pudiscounts)
                .HasForeignKey(d => d.PuinvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUDiscount_PUInvoice");
        });

        modelBuilder.Entity<PudiscountDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PUDiscountDetail", tb => tb.HasComment("Bảng Detail của Hàng mua trả lại"));

            entity.HasIndex(e => e.CreditAccount, "IX_PUDiscountDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_PUDiscountDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_PUDiscountDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_PUDiscountDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục chi")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId).HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId).HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractId)
                .HasComment("PK  hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.EinvoiceItemName)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceItemName");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng/Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.OrderId)
                .HasComment("Mã đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng (Phòng ban trong cơ cấu tổ chức)")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("PK hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("ID của hóa đơn nhận (lấy dữ liệu cho dễ dàng khi ghi sô TaxLedger)")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.PuorderRefDetailId)
                .HasComment("ID chi tiết đơn mua hàng")
                .HasColumnName("PUOrderRefDetailID");
            entity.Property(e => e.PuorderRefId)
                .HasComment("Số đơn mua hàng")
                .HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm hàng hóa dịch vụ")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.PuvoucherInvDate)
                .HasColumnType("datetime")
                .HasColumnName("PUVoucherInvDate");
            entity.Property(e => e.PuvoucherInvNo)
                .HasMaxLength(25)
                .HasColumnName("PUVoucherInvNo");
            entity.Property(e => e.PuvoucherRefDetailId)
                .HasComment("ID chi tiết chứng từ mua hàng")
                .HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId)
                .HasComment("ID của chứng từ mua hàng")
                .HasColumnName("PUVoucherRefID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_PUDiscountDetail_BankAccount");

            entity.HasOne(d => d.Contract).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PUDiscountDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PudiscountDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PudiscountDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PUDiscountDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUDiscountDetail_InventoryItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_PUDiscountDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_PUDiscountDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_PUDiscountDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_PUDiscountDetail_LOANAgreement");

            entity.HasOne(d => d.Order).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PUDiscountDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PUDiscountDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_PUDiscountDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUDiscountDetail_PUContract");

            entity.HasOne(d => d.PuinvoiceRef).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.PuinvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUDiscountDetail_PUInvoice");

            entity.HasOne(d => d.PuorderRefDetail).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.PuorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUDiscountDetail _PUOrderDetail");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_PUDiscountDetail _PUOrder");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_PUDiscountDetail_PurchasePurpose");

            entity.HasOne(d => d.PuvoucherRef).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.PuvoucherRefId)
                .HasConstraintName("FK_PUDiscountDetail_PUVoucher");

            entity.HasOne(d => d.Ref).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUDiscountDetail_PUDiscount");

            entity.HasOne(d => d.Stock).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_PUDiscountDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.PudiscountDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PUDiscountDetail_Unit");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.PudiscountDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<Puinvoice>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_PUInvoice_1");

            entity.ToTable("PUInvoice", tb => tb.HasComment("Hóa đơn nhận (Mua hàng, Mua dịch vụ, Giám giá hàng mua, Bán trả lại)"));

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_PUInvoice_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ người nhận");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã nhà cung cấp/khách hàng/cán bộ")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp/khách hàng/cán bộ");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được hiển thị trên sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EinvoiceType).HasColumnName("EInvoiceType");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên mua hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncludeInvoice).HasComment("Nhận kèm hóa đơn? (Hóa đơn này được nhận kèm chứng từ)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.IsImportEinvoice).HasColumnName("IsImportEInvoice");
            entity.Property(e => e.IsImportPurchase).HasComment("Với loại chứng từ là Mua hàng nhập khẩu thì = 1. Còn lại = 0");
            entity.Property(e => e.IsPaid).HasComment("Đã thanh toán đủ");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.IsSummaryBySameInventoryItem).HasComment("Cộng gộp các mặt hàng giống nhau");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán (Phiếu chi/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ (Phiếu chi/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu chi/Chứng từ ghi nợ)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu chi/Chứng từ ghi nợ)");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SellerTaxCode).HasMaxLength(100);
            entity.Property(e => e.TotalTurnoverAmount)
                .HasComment("Giá trị HHDV chưa thuế QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTurnoverAmountOc)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalTurnoverAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tiền thuế GTGT QĐ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("TransactionID");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PuinvoiceAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUInvoice_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Puinvoices)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PUInvoice_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Puinvoices)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUInvoice_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.PuinvoiceEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<PuinvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_PUInvoiceDetail_1");

            entity.ToTable("PUInvoiceDetail");

            entity.HasIndex(e => e.RefId, "IX_PUInvoiceDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("PK  hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Mã đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("PK hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefDetailId).HasColumnName("PUOrderRefDetailID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm hàng hóa dịch vụ")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.PuvoucherRefDetailId)
                .HasComment("RefDetailID chứng từ Mua hàng")
                .HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId)
                .HasComment("RefID chứng từ Mua hàng")
                .HasColumnName("PUVoucherRefID");
            entity.Property(e => e.PuvoucherRefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Mua hàng")
                .HasColumnName("PUVoucherRefNoFinance");
            entity.Property(e => e.PuvoucherRefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Mua hàng")
                .HasColumnName("PUVoucherRefNoManagement");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TurnoverAmount)
                .HasComment("Giá trị HHDV chưa thuế QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnoverAmountOc)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TurnoverAmountOC");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.Contract).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PUInvoiceDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PuinvoiceDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_PUInvoiceDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PuinvoiceDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_PUInvoiceDetail_Account_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PUInvoiceDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUInvoiceDetail_InventoryItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_PUInvoiceDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_PUInvoiceDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_PUInvoiceDetail_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PUInvoiceDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PUInvoiceDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_PUInvoiceDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUInvoiceDetail_PUContract");

            entity.HasOne(d => d.PuorderRefDetail).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.PuorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUInvoiceDetail_PUOrderDetail");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_PUInvoiceDetail_PUOrder");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_PUInvoiceDetail_PurchasePurpose");

            entity.HasOne(d => d.Ref).WithMany(p => p.PuinvoiceDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUInvoiceDetail_PUInvoice");
        });

        modelBuilder.Entity<PulastedUnitPrice>(entity =>
        {
            entity.ToTable("PULastedUnitPrice");

            entity.Property(e => e.PulastedUnitPriceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("PULastedUnitPriceID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PulastedUnitPrices)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PULastedUnitPrice_AccountObject");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PulastedUnitPrices)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_PULastedUnitPrice_InventoryItem");

            entity.HasOne(d => d.Unit).WithMany(p => p.PulastedUnitPrices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PULastedUnitPrice_Unit");
        });

        modelBuilder.Entity<Puorder>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PUOrder", tb =>
                {
                    tb.HasComment("Đơn mua hàng");
                    tb.HasTrigger("trg_PUOrder_DataChanged");
                });

            entity.HasIndex(e => e.RefDate, "IX_PUOrder").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_PUOrder_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ NCC");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã nhà cung cấp/khách hàng/cán bộ")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp/khách hàng/cán bộ");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế NCC");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DueDay).HasComment("Số ngày được nợ");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherTerm)
                .HasMaxLength(255)
                .HasComment("Điều khoản khác");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Điều khoản thanh toán")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.ReceiveAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ nhận hàng");
            entity.Property(e => e.ReceiveDate)
                .HasComment("Ngày nhận hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày đơn hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số đơn hàng");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.Status).HasComment("Tình trạng đơn hàng: 0: Chưa gửi; 1: Đã gửi; 2: Đang thực hiện; 3: Hoàn thành 4: Đã hủy bỏ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế Quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PuorderAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUOrder_AccountingObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Puorders)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PUOrder_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Puorders)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUOrder_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.PuorderEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<PuorderDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PUOrderDetail", tb => tb.HasComment("Chi tiết đơn mua hàng"));

            entity.HasIndex(e => e.InventoryItemId, "IX_PUOrderDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_PUOrderDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải (Tên hàng)");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiêt khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiêt khấu nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỉ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.InproductionOrderRefId).HasColumnName("INProductionOrderRefID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProductionId).HasColumnName("ProductionID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityReceipt)
                .HasComment("Số lượng nhận trên PUInvoiceDetail")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityReceiptLastYear)
                .HasComment("Số lượng nhận năm trước")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax)
                .HasComment("Đơn giá sau thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("% Thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.Contract).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PUOrderDetail_Contract");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PUOrderDetail_ExpenseItem");

            entity.HasOne(d => d.InproductionOrderRef).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.InproductionOrderRefId)
                .HasConstraintName("FK_PUOrderDetail_INProductionOrder");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUOrderDetail_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.PuorderDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_PUOrderDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PUOrderDetail_SAOrder");

            entity.HasOne(d => d.Production).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUOrderDetail_INProductionOrderProduct");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUOrderDetail_PUContract");

            entity.HasOne(d => d.Ref).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUOrderDetail_PUOrder");

            entity.HasOne(d => d.Stock).WithMany(p => p.PuorderDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_PUOrderDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.PuorderDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PUOrderDetail_Unit");
        });

        modelBuilder.Entity<PurchaseLedger>(entity =>
        {
            entity.ToTable("PurchaseLedger", tb => tb.HasComment("Bảng Ledger mua hàng"));

            entity.HasIndex(e => e.InvRefId, "IX_PurchaseLedger_InvRefID");

            entity.HasIndex(e => e.InventoryItemId, "IX_PurchaseLedger_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_PurchaseLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_PurchaseLedger_RefID").HasFillFactor(90);

            entity.Property(e => e.PurchaseLedgerId)
                .HasComment("PK-Sổ mua hàng")
                .HasColumnName("PurchaseLedgerID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectAddressOther).HasMaxLength(400);
            entity.Property(e => e.AccountObjectCode)
                .HasMaxLength(50)
                .HasComment("Mã đối tượng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectIdentificationNumberOther).HasMaxLength(20);
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AccountObjectNameDi)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng (Lấy từ danh mục)")
                .HasColumnName("AccountObjectNameDI");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Mã hợp đồng");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.ContractName)
                .HasMaxLength(255)
                .HasComment("Tên hợp đồng");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("Tk Có");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(5)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiêt khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiêt khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỉ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.EmployeeCode)
                .HasMaxLength(25)
                .HasComment("Mã nhân viên");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(128)
                .HasComment("Tên nhân viên");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("((0))")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.FreightAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportChargeAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(500)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvRefId).HasColumnName("InvRefID");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemCode)
                .HasMaxLength(50)
                .HasComment("Mã vật tư, hàng hóa");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên vật tư, hàng hóa");
            entity.Property(e => e.IsPostToManagementBook).HasComment("Trạng thái ghi vào vào sổ quản trị");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Có cần cập nhật dữ liệu từ các bảng dư thừa sang không, 0: không, 1: có. Sau khi cập nhật xong thì thiết lập thông tin này về =0");
            entity.Property(e => e.JobId)
                .HasComment("Công việc")
                .HasColumnName("JobID");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceOc)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("MainUnitPriceOC");
            entity.Property(e => e.OrderId)
                .HasComment("ID đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("ID đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PaymentDate)
                .HasComment("Ngày thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentTermCode)
                .HasMaxLength(20)
                .HasComment("Mã điều khoản chiết khấu");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Điều khoản chiết khấu")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.PaymentTermName)
                .HasMaxLength(128)
                .HasComment("Tên điều khoản chiết khấu");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PuorderRefId)
                .HasComment("ID Đơn mua hàng")
                .HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchaseAmount)
                .HasComment("Giá trị mua Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PurchaseAmountOc)
                .HasComment("Giá trị mua")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("PurchaseAmountOC");
            entity.Property(e => e.PurchaseQuantity)
                .HasComment("Số lượng mua")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PuvoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ Mua hàng")
                .HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId)
                .HasComment("RefID của chứng từ Mua hàng")
                .HasColumnName("PUVoucherRefID");
            entity.Property(e => e.ReduceAmount)
                .HasComment("Giá trị giảm Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReduceAmountOc)
                .HasComment("Giá trị giảm")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReduceAmountOC");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID của chứng từ gốc")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của chứng từ gốc")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Thứ tự các chứng từ nhập trước, nhập sau");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.ReturnAmount)
                .HasComment("Giá trị trả lại Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReturnAmountOc)
                .HasComment("Giá trị trả lại")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReturnAmountOC");
            entity.Property(e => e.ReturnMainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ReturnQuantity)
                .HasComment("Số lượng trả lại")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockCode)
                .HasMaxLength(20)
                .HasComment("Mã kho");
            entity.Property(e => e.StockId)
                .HasComment("Kho")
                .HasColumnName("StockID");
            entity.Property(e => e.StockName)
                .HasMaxLength(128)
                .HasComment("Tên kho");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá quy đổi")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceOc)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("UnitPriceOC");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");
        });

        modelBuilder.Entity<PurchasePurpose>(entity =>
        {
            entity.HasKey(e => e.PurchasePurposeId).HasName("PK_PurchasePurpose_1");

            entity.ToTable("PurchasePurpose", tb => tb.HasComment("Nhóm HHDV mua vào. Dùng để phân loại hóa đơn mua vào phục vụ việc lập bảng kê mua vào."));

            entity.HasIndex(e => e.PurchasePurposeId, "IX_PurchasePurpose")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.PurchasePurposeId)
                .ValueGeneratedNever()
                .HasComment("")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PurchasePurposeCode)
                .HasMaxLength(20)
                .HasComment("Mã mục đích mua");
            entity.Property(e => e.PurchasePurposeName)
                .HasMaxLength(255)
                .HasComment("Tên mục đích mua");
        });

        modelBuilder.Entity<Pureturn>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PUReturn", tb =>
                {
                    tb.HasComment("Bảng Master của Hàng mua trả lại");
                    tb.HasTrigger("trg_PUReturn_DataChanged");
                });

            entity.HasIndex(e => e.AccountObjectId, "IX_PUReturn_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => new { e.CarefNoFinance, e.BranchId }, "IX_PUReturn_CARefNoFinance");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_PUReturn_RefNoFinance");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CadocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo trên phiếu thu")
                .HasColumnName("CADocumentIncluded");
            entity.Property(e => e.CajournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do nộp")
                .HasColumnName("CAJournalMemo");
            entity.Property(e => e.CapostedDate)
                .HasComment("Ngày hạch toán (Phiếu chi)")
                .HasColumnType("datetime")
                .HasColumnName("CAPostedDate");
            entity.Property(e => e.CarefDate)
                .HasComment("Ngày chứng từ (Phiếu chi)")
                .HasColumnType("datetime")
                .HasColumnName("CARefDate");
            entity.Property(e => e.CarefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu chi)")
                .HasColumnName("CARefNoFinance");
            entity.Property(e => e.CarefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu chi)")
                .HasColumnName("CARefNoManagement");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("Phiên bản sửa chứng từ");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên mua hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryPostedDate)
                .HasComment("Ngày ghi sổ kho")
                .HasColumnType("datetime");
            entity.Property(e => e.IsInvoiceExported).HasComment("Đã xuất hóa đơn");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedInventoryBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ tài chính)");
            entity.Property(e => e.IsPostedInventoryBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ quản trị)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do xuất(Phiếu xuất)/Diễn giải (Chứng từ ghi nợ)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OutDocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo trên phiếu xuất");
            entity.Property(e => e.Payer)
                .HasMaxLength(128)
                .HasComment("Người nộp");
            entity.Property(e => e.PayerAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ người nộp");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán (Phiếu xuất/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.Receiver)
                .HasMaxLength(128)
                .HasComment("Người nhận hàng (Phiếu xuất)");
            entity.Property(e => e.ReceiverAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ người nhận hàng");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ (Phiếu xuất/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu xuất/Chứng từ ghi nợ)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu xuất/Chứng từ ghi nợ)");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.SainvoiceRefId)
                .HasComment("ID của hóa đơn xuất")
                .HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi Sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền Sổ tài chính")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế quy đổi Sổ tài chỉnh")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tiền thuế GTGT NT Sổ tài chính")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.Pureturns)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUReturn_AccountingObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Pureturns)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PUReturn_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Pureturns)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUReturn_CCY");

            entity.HasOne(d => d.SainvoiceRef).WithMany(p => p.Pureturns)
                .HasForeignKey(d => d.SainvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUReturn_SAInvoice");
        });

        modelBuilder.Entity<PureturnDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PUReturnDetail", tb => tb.HasComment("Bảng Detail của Hàng mua trả lại"));

            entity.HasIndex(e => e.CreditAccount, "IX_PUReturnDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_PUReturnDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_PUReturnDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.ListItemId, "IX_PUReturnDetail_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => new { e.InproductionOrderRefId, e.InventoryItemId, e.ProductionId }, "IX_PUReturnDetail_ProductionOrderRefID");

            entity.HasIndex(e => e.RefId, "IX_PUReturnDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.ConfrontingRefDetailId)
                .HasComment("RefDetailID của chứng từ Nhập đối trừ")
                .HasColumnName("ConfrontingRefDetailID");
            entity.Property(e => e.ConfrontingRefId)
                .HasComment("RefID của chứng từ Nhập đối trừ")
                .HasColumnName("ConfrontingRefID");
            entity.Property(e => e.ContractId)
                .HasComment("PK  hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.InproductionOrderRefId).HasColumnName("INProductionOrderRefID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng/Mã vật tư")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính (Sổ tài chính)")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId)
                .HasComment("Mã đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng (Phòng ban trong cơ cấu tổ chức)")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProductionId).HasColumnName("ProductionID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasComment("PK hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefDetailId)
                .HasComment("ID chi tiết đơn mua hàng")
                .HasColumnName("PUOrderRefDetailID");
            entity.Property(e => e.PuorderRefId)
                .HasComment("Số đơn mua hàng")
                .HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm hàng hóa dịch vụ")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.PuvoucherInvDate)
                .HasColumnType("datetime")
                .HasColumnName("PUVoucherInvDate");
            entity.Property(e => e.PuvoucherInvNo)
                .HasMaxLength(25)
                .HasColumnName("PUVoucherInvNo");
            entity.Property(e => e.PuvoucherRefDetailId)
                .HasComment("ID chi tiết chứng từ mua hàng")
                .HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId)
                .HasComment("ID của chứng từ mua hàng")
                .HasColumnName("PUVoucherRefID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SainvoiceRefId)
                .HasComment("ID của hóa đơn xuất (mục đích dễ dàng join lấy lên Hóa đơn xuất)")
                .HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId)
                .HasComment("Mã kho")
                .HasColumnName("StockID");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceBeforeDiscount).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_PUReturnDetail_BankAccount");

            entity.HasOne(d => d.Contract).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PUReturnDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PureturnDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PureturnDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PUReturnDetail_ExpenseItem");

            entity.HasOne(d => d.InproductionOrderRef).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.InproductionOrderRefId)
                .HasConstraintName("FK_PUReturnDetail_INProductionOrder");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUReturnDetail_InventoryItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_PUReturnDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_PUReturnDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_PUReturnDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_PUReturnDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.PureturnDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_PUReturnDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PUReturnDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PUReturnDetail_OrganizationUnit");

            entity.HasOne(d => d.Production).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUReturnDetail_INProductionOrderProduct");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_PUReturnDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUReturnDetail_PUContract");

            entity.HasOne(d => d.PuorderRefDetail).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.PuorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUReturnDetail_PUOrderDetail");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_PUReturnDetail_PUOrder");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_PUReturnDetail_PurchasePurpose");

            entity.HasOne(d => d.PuvoucherRef).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.PuvoucherRefId)
                .HasConstraintName("FK_PUReturnDetail_PUVoucher");

            entity.HasOne(d => d.Ref).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUReturnDetail_PUReturn");

            entity.HasOne(d => d.SainvoiceRef).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.SainvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUReturnDetail_SAInvoice");

            entity.HasOne(d => d.Stock).WithMany(p => p.PureturnDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_PUReturnDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.PureturnDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PUReturnDetail_Unit");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.PureturnDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<Puservice>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PUService", tb =>
                {
                    tb.HasComment("Chứng từ mua dịch vụ");
                    tb.HasTrigger("trg_PUService_DataChanged");
                });

            entity.HasIndex(e => new { e.PostedDate, e.BranchId, e.DisplayOnBook }, "IX_PUService_Composite");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_PUService_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ người nhận");
            entity.Property(e => e.AccountObjectAddressOther).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount)
                .HasMaxLength(50)
                .HasComment("Tài khoản của nhà cung cấp");
            entity.Property(e => e.AccountObjectBankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng của nhà cung cấp");
            entity.Property(e => e.AccountObjectContactname)
                .HasMaxLength(128)
                .HasComment("Người nhận/Người lĩnh tiền");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã nhà cung cấp/khách hàng/cán bộ")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectIdentificationNumberOther).HasMaxLength(20);
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp/khách hàng/cán bộ");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng của đơn vị trả tiền")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasComment("Tên ngân hàng đơn vị trả tiền:  chỉ dùng cho chứng từ chi tiền gửi");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo");
            entity.Property(e => e.DueDate)
                .HasComment("Ngày thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.DueTime).HasComment("Hạn thanh toán (bao nhiêu ngày)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EinvoiceType).HasColumnName("EInvoiceType");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên mua hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IdentificationNumber)
                .HasMaxLength(20)
                .HasComment("Số CMTND của người liên hệ");
            entity.Property(e => e.IncludeInvoice).HasComment("0: Không kèm hóa đơn; 1: Nhận kèm hóa đơn; 2: Không có hóa đơn");
            entity.Property(e => e.IsFreightService).HasComment("Là chi phí mua hàng");
            entity.Property(e => e.IsImportEinvoice).HasColumnName("IsImportEInvoice");
            entity.Property(e => e.IsPaid)
                .HasDefaultValueSql("((0))")
                .HasComment("Đã thanh toán đủ.Với Chưa thanh toán, khi trả hết tiền thì cập nhật = 1");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.IssueBy)
                .HasMaxLength(120)
                .HasComment("Nơi cấp CMTND người liên hệ");
            entity.Property(e => e.IssueDate)
                .HasComment("Ngày cấp CMTND người liên hệ")
                .HasColumnType("datetime");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do chi/Nội dung thanh toán");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Điều kiện thanh toán")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán (Phiếu chi/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("RefID của hóa đơn mua dịch vụ")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ (Phiếu chi/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu chi/Chứng từ ghi nợ)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu chi/Chứng từ ghi nợ)");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.SellerTaxCode).HasMaxLength(100);
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
            entity.Property(e => e.TransactionId)
                .HasMaxLength(100)
                .HasColumnName("TransactionID");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PuserviceAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUService_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.Puservices)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_PUService_BankAccount");

            entity.HasOne(d => d.Branch).WithMany(p => p.Puservices)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PUService_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Puservices)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUService_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.PuserviceEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.Puservices)
                .HasForeignKey(d => d.PaymentTermId)
                .HasConstraintName("FK_PUService_PaymentTerm");
        });

        modelBuilder.Entity<PuserviceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PUServiceDetail");

            entity.HasIndex(e => e.InventoryItemId, "IX_PUServiceDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_PUServiceDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BudgetItemId).HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffVatamountFinance)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountFinance");
            entity.Property(e => e.CashOutDiffVatamountManagement)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountManagement");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutVatamountFinance)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountFinance");
            entity.Property(e => e.CashOutVatamountManagement)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountManagement");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionsTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DeductionsTaxAmountOC");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EinvoiceItemName)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceItemName");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.InwardAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId).HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefDetailId).HasColumnName("PUOrderRefDetailID");
            entity.Property(e => e.PuorderRefId).HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TaxAccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.TaxAccountObjectId).HasColumnName("TaxAccountObjectID");
            entity.Property(e => e.TaxAccountObjectName).HasMaxLength(400);
            entity.Property(e => e.TaxAccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatrate406)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate406");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PuserviceDetailAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUServiceDetail_AccountObject");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.PuserviceDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_PUServiceDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.PuserviceDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_PUServiceDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PUServiceDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PuserviceDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PuserviceDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PUServiceDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUServiceDetail_InventoryItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_PUServiceDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_PUServiceDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_PUServiceDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_PUServiceDetail_LOANAgreement");

            entity.HasOne(d => d.Order).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PUServiceDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PUServiceDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_PUServiceDetail_ProjectWork");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUServiceDetail_PUContract");

            entity.HasOne(d => d.PuorderRefDetail).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.PuorderRefDetailId)
                .HasConstraintName("FK_PUServiceDetail_PUOrderDetail");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_PUServiceDetail_PUOrder");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_PUServiceDetail_PurchasePurpose");

            entity.HasOne(d => d.Ref).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUServiceDetail_PUService");

            entity.HasOne(d => d.TaxAccountObject).WithMany(p => p.PuserviceDetailTaxAccountObjects)
                .HasForeignKey(d => d.TaxAccountObjectId)
                .HasConstraintName("FK_PUServiceDetail_AccountObject_Tax");

            entity.HasOne(d => d.Unit).WithMany(p => p.PuserviceDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PUServiceDetail_Unit");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.PuserviceDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<Puvoucher>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("PUVoucher", tb =>
                {
                    tb.HasComment("Chứng từ mua hàng");
                    tb.HasTrigger("trg_PUVoucher_DataChanged");
                });

            entity.HasIndex(e => new { e.CabarefNoFinance, e.BranchId }, "IX_PUVoucher_CABARefNoFinance");

            entity.HasIndex(e => new { e.PostedDate, e.BranchId, e.DisplayOnBook }, "IX_PUVoucher_Composite");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_PUVoucher_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectAddressOther).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount)
                .HasMaxLength(50)
                .HasComment("Tài khoản đơn vị nhận tiền");
            entity.Property(e => e.AccountObjectBankName)
                .HasMaxLength(128)
                .HasComment("Tên ngân hàng đơn vị nhận tiền");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người giao hàng (Phiếu nhập)");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã nhà cung cấp/khách hàng/cán bộ")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectIdentificationNumberOther).HasMaxLength(20);
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp/khách hàng/cán bộ");
            entity.Property(e => e.BankAccountId)
                .HasComment("Tài khoản ngân hàng của đơn vị trả tiền")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BankName)
                .HasMaxLength(255)
                .HasComment("Tên ngân hàng đơn vị trả tiền:  chỉ dùng cho chứng từ chi tiền gửi");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CabadocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo")
                .HasColumnName("CABADocumentIncluded");
            entity.Property(e => e.CabajournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do chi/Nội dung thanh toán")
                .HasColumnName("CABAJournalMemo");
            entity.Property(e => e.CabapostedDate)
                .HasComment("Ngày hạch toán (Phiếu chi)")
                .HasColumnType("datetime")
                .HasColumnName("CABAPostedDate");
            entity.Property(e => e.CabarefDate)
                .HasComment("Ngày chứng từ (Phiếu chi)")
                .HasColumnType("datetime")
                .HasColumnName("CABARefDate");
            entity.Property(e => e.CabarefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu chi)")
                .HasColumnName("CABARefNoFinance");
            entity.Property(e => e.CabarefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu chi)")
                .HasColumnName("CABARefNoManagement");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Kèm theo (Phiếu nhập)");
            entity.Property(e => e.DueDate)
                .HasComment("Ngày thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.DueTime).HasComment("Hạn thanh toán (bao nhiêu ngày)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IdentificationNumber)
                .HasMaxLength(20)
                .HasComment("Số CMTND của người liên hệ");
            entity.Property(e => e.IncludeInvoice).HasComment("Có nhận kèm hóa đơn hay không?");
            entity.Property(e => e.InrefOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("INRefOrder");
            entity.Property(e => e.InventoryPostedDate)
                .HasComment("Ngày ghi sổ kho")
                .HasColumnType("datetime");
            entity.Property(e => e.IsConvertVat)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsConvertVAT");
            entity.Property(e => e.IsPaid)
                .HasDefaultValueSql("((0))")
                .HasComment("Đã thanh toán đủ.Với Chưa thanh toán, khi trả hết tiền thì cập nhật = 1");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedInventoryBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ tài chính)");
            entity.Property(e => e.IsPostedInventoryBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ kho (Sổ quản trị)");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.IsPulotVoucher).HasColumnName("IsPULotVoucher");
            entity.Property(e => e.IssueBy)
                .HasMaxLength(120)
                .HasComment("Nơi cấp CMTND người liên hệ");
            entity.Property(e => e.IssueDate)
                .HasComment("Ngày cấp CMTND người liên hệ")
                .HasColumnType("datetime");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Điều kiện thanh toán")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán (Phiếu nhập/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("RefID của hóa đơn mua hàng")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.Receiver)
                .HasMaxLength(128)
                .HasComment("Người nhận (Phiếu chi)/Người lĩnh tiền (Séc tiền mặt)");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ (Phiếu nhập/Chứng từ ghi nợ)")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu nhập/Chứng từ ghi nợ)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu nhập/Chứng từ ghi nợ)");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền hàng quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalCustomBeforeAmount)
                .HasComment("Tổng phí trước hải quan")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalFreightAmount)
                .HasComment("Tổng phí vận chuyển quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmount)
                .HasComment("Tổng tiền thuế nhập khẩu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalImportTaxAmountOc)
                .HasComment("Tổng tiền thuế nhập khẩu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalImportTaxAmountOC");
            entity.Property(e => e.TotalInwardAmount)
                .HasComment("Tổng giá trị nhập kho quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSpecialConsumeTaxAmount)
                .HasComment("Tổng tiền thuế tiêu thụ đặc biệt quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSpecialConsumeTaxAmountOc)
                .HasComment("Thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSpecialConsumeTaxAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.PuvoucherAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_PUVoucher_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.Puvouchers)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_PUVoucher_BankAccount");

            entity.HasOne(d => d.Branch).WithMany(p => p.Puvouchers)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_PUVoucher_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Puvouchers)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_PUVoucher_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.PuvoucherEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_PUVoucher_AccountObject1");

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.Puvouchers)
                .HasForeignKey(d => d.PaymentTermId)
                .HasConstraintName("FK_PUVoucher_PaymentTerm");

            entity.HasOne(d => d.PuinvoiceRef).WithMany(p => p.Puvouchers)
                .HasForeignKey(d => d.PuinvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUVoucher_PUInvoice");
        });

        modelBuilder.Entity<PuvoucherDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PUVoucherDetail", tb => tb.HasComment("Chi tiết chứng từ mua hàng"));

            entity.HasIndex(e => e.CreditAccount, "IX_PUVoucherDetail_CreditAccount").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_PUVoucherDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_PUVoucherDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.PucontractId, "IX_PUVoucherDetail_PUContractID").HasFillFactor(90);

            entity.HasIndex(e => new { e.InproductionOrderRefId, e.InventoryItemId, e.ProductionId }, "IX_PUVoucherDetail_ProductionOrderRefID");

            entity.HasIndex(e => e.RefId, "IX_PUVoucherDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.StockId, "IX_PUVoucherDetail_StockID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(24, 10)");
            entity.Property(e => e.AllocationRateImport)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(24, 10)");
            entity.Property(e => e.AllocationRateImportOriginCurrency).HasColumnType("decimal(24, 10)");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.AntiDumpingTaxAccount).HasMaxLength(20);
            entity.Property(e => e.AntiDumpingTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AntiDumpingTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AntiDumpingTaxAmountOC");
            entity.Property(e => e.AntiDumpingTaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục chi")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffVatamountFinance)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountFinance");
            entity.Property(e => e.CashOutDiffVatamountManagement)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountManagement");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutVatamountFinance)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountFinance");
            entity.Property(e => e.CashOutVatamountManagement)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountManagement");
            entity.Property(e => e.ContractId)
                .HasComment("PK  hợp đồng bán")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DateEnoughTaxPayment)
                .HasComment("Ngày nộp đủ thuế: trường hợp với không nộp thuế --> Là ngày ghi sổ của chứng từ mua hàng; trường hợp nộp thuế 1 hóa đơn: --> Ngày max nhất của chứng từ nộp thuế mà số tiền nộp đã nộp đủ")
                .HasColumnType("datetime");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.DeductionDebitAccount)
                .HasMaxLength(20)
                .HasComment("TK đối ứng thuế GTGT");
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionsTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DeductionsTaxAmountOC");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiêt khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiêt khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasComment("Tỉ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EinvoiceItemName)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceItemName");
            entity.Property(e => e.EnvironmentalTaxAccount).HasMaxLength(20);
            entity.Property(e => e.EnvironmentalTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EnvironmentalTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("EnvironmentalTaxAmountOC");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Hạn dùng")
                .HasColumnType("datetime");
            entity.Property(e => e.Fobamount)
                .HasComment("Giá FOB")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FOBAmount");
            entity.Property(e => e.FobamountOc)
                .HasComment("Giá FOB ngoại tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FOBAmountOC");
            entity.Property(e => e.FreightAmount)
                .HasComment("Chi phí mua hàng/Phí hàng về kho QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportChargeAmount)
                .HasComment("Phí trước hải quan")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportChargeBeforeCustomAmountAllocated).HasColumnType("decimal(24, 10)");
            entity.Property(e => e.ImportChargeBeforeCustomAmountMainCurrency).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportChargeBeforeCustomAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ImportChargeBeforeCustomAmountOC");
            entity.Property(e => e.ImportChargeExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportTaxAccount)
                .HasMaxLength(20)
                .HasComment("TK thuế  nhập khẩu");
            entity.Property(e => e.ImportTaxAmount)
                .HasComment("Tiền thuế  nhập khẩu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportTaxAmountOc)
                .HasComment("Tiền thuế nhập khẩu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ImportTaxAmountOC");
            entity.Property(e => e.ImportTaxRate)
                .HasComment("% Thuế nhập khẩu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ImportTaxRatePrice)
                .HasComment("Giá tính thuế NK = Giá FOB + Phí trước hải quan")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.ImportTaxRatePriceOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ImportTaxRatePriceOC");
            entity.Property(e => e.InproductionOrderRefId)
                .HasComment("ID lệnh sản xuất")
                .HasColumnName("INProductionOrderRefID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryResaleTypeId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InventoryResaleTypeID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.InwardAmount)
                .HasComment("Giá trị nhập kho/Tổng giá trị HHDV (Mua hàng ko qua kho) QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId)
                .HasComment("Mã đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PanelHeightQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ProductionId).HasColumnName("ProductionID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractDetailId).HasColumnName("PUContractDetailID");
            entity.Property(e => e.PucontractId)
                .HasComment("PK hợp đồng mua")
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("ID của hóa đơn nhận (lấy dữ liệu cho dễ dàng khi ghi sô TaxLedger)")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.PuorderRefDetailId)
                .HasComment("ID chi tiết đơn mua hàng")
                .HasColumnName("PUOrderRefDetailID");
            entity.Property(e => e.PuorderRefId)
                .HasComment("Số đơn mua hàng")
                .HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm hàng hóa dịch vụ")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.SpecialConsumeTaxAccount)
                .HasMaxLength(20)
                .HasDefaultValueSql("((0))")
                .HasComment("Tài khoản thuế tiêu thụ đặc biệt");
            entity.Property(e => e.SpecialConsumeTaxAmount)
                .HasComment("Thuế tiêu thụ đặc biệt quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialConsumeTaxAmountOc)
                .HasComment("Thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SpecialConsumeTaxAmountOC");
            entity.Property(e => e.SpecialConsumeTaxRate)
                .HasComment("%Thuế tiêu thụ đặc biệt")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.StockId)
                .HasComment("Kho")
                .HasColumnName("StockID");
            entity.Property(e => e.TaxAccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.TaxAccountObjectId).HasColumnName("TaxAccountObjectID");
            entity.Property(e => e.TaxAccountObjectName).HasMaxLength(400);
            entity.Property(e => e.TaxAccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá quy đổi")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax)
                .HasComment("Đơn giá sau thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatrate406)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate406");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.AntiDumpingTaxAccountNavigation).WithMany(p => p.PuvoucherDetailAntiDumpingTaxAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AntiDumpingTaxAccount);

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.PuvoucherDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_PUVoucherDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.PuvoucherDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_PUVoucherDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.Contract).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_PUVoucherDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.PuvoucherDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.PuvoucherDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.DeductionDebitAccountNavigation).WithMany(p => p.PuvoucherDetailDeductionDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DeductionDebitAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_PUVoucherDetail_ExpenseItem");

            entity.HasOne(d => d.ImportTaxAccountNavigation).WithMany(p => p.PuvoucherDetailImportTaxAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.ImportTaxAccount);

            entity.HasOne(d => d.InproductionOrderRef).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.InproductionOrderRefId)
                .HasConstraintName("FK_PUVoucherDetail_INProductionOrder");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PUVoucherDetail_InventoryItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_PUVoucherDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_PUVoucherDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_PUVoucherDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_PUVoucherDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.PuvoucherDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_PUVoucherDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_PUVoucherDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_PUVoucherDetail_OrganizationUnit");

            entity.HasOne(d => d.Production).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.ProductionId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUVoucherDetail_INProductionOrderProduct");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_PUVoucherDetail_ProjectWork");

            entity.HasOne(d => d.PucontractDetail).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.PucontractDetailId)
                .HasConstraintName("FK_PUVoucherDetail_PUContractDetail");

            entity.HasOne(d => d.Pucontract).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.PucontractId)
                .HasConstraintName("FK_PUVoucherDetail_PUContract");

            entity.HasOne(d => d.PuinvoiceRef).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.PuinvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUVoucherDetail_PUInvoice");

            entity.HasOne(d => d.PuorderRefDetail).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.PuorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_PUVoucherDetail_PUOrderDetail");

            entity.HasOne(d => d.PuorderRef).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.PuorderRefId)
                .HasConstraintName("FK_PUVoucherDetail_PUOrder");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_PUVoucherDetail_PurchasePurpose");

            entity.HasOne(d => d.Ref).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUVoucherDetail_PUVoucher");

            entity.HasOne(d => d.SpecialConsumeTaxAccountNavigation).WithMany(p => p.PuvoucherDetailSpecialConsumeTaxAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.SpecialConsumeTaxAccount);

            entity.HasOne(d => d.Stock).WithMany(p => p.PuvoucherDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_PUVoucherDetail_Stock");

            entity.HasOne(d => d.Unit).WithMany(p => p.PuvoucherDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_PUVoucherDetail_Unit");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.PuvoucherDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<PuvoucherDetailCost>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("PUVoucherDetailCost", tb => tb.HasComment("Bảng chi tiết các dòng chi phí mua hàng/phí hàng về kho"));

            entity.HasIndex(e => e.RefId, "IX_PUVoucherDetailCost_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã nhà cung cấp/khách hàng/cán bộ")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp/khách hàng/cán bộ");
            entity.Property(e => e.AccumulatedAllocateAmount)
                .HasComment("Lũy kế số đã phân bổ (lũy kế số tiền sau từng lần phân bổ)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AccumulatedAllocateAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AccumulatedAllocateAmountOC");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền/Số phân bổ lần này (Phục vụ phân bổ 1 chứng từ chi phí cho nhiều HĐ mua hàng)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.CostRefId)
                .HasComment("RefID của chứng từ chi phí")
                .HasColumnName("CostRefID");
            entity.Property(e => e.CostType).HasComment("Loại chi phí. 0: Chi phí hàng về kho; 1: Phí trước hải quan");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày HT")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày CT")
                .HasColumnType("datetime");
            entity.Property(e => e.RefId)
                .HasComment("RefID (FK của chứng từ mua hàng)")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính (Phiếu nhập/Chứng từ ghi nợ)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị (Phiếu nhập/Chứng từ ghi nợ)");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TotalFreightAmount)
                .HasComment("Tổng chi phí quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalFreightAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalFreightAmountOC");

            entity.HasOne(d => d.Ref).WithMany(p => p.PuvoucherDetailCosts)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_PUCostDetail_PUVoucher");
        });

        modelBuilder.Entity<Relationship>(entity =>
        {
            entity.ToTable("Relationship");

            entity.Property(e => e.RelationshipId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RelationshipID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RelationshipName).HasMaxLength(255);
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((32767))");
        });

        modelBuilder.Entity<ReportColumnCaption>(entity =>
        {
            entity.ToTable("ReportColumnCaption", tb => tb.HasComment("Bảng lưu các caption tiếng việt cho từng báo cáo"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ID");
            entity.Property(e => e.ColumnCaption)
                .HasMaxLength(255)
                .HasComment("Caption của cột");
            entity.Property(e => e.ColumnName)
                .HasMaxLength(100)
                .HasComment("Tên cột");
            entity.Property(e => e.ColumnWidth).HasComment("Độ rộng của cột");
            entity.Property(e => e.IsHidden).HasDefaultValueSql("((0))");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasComment("ReportID")
                .HasColumnName("ReportID");
            entity.Property(e => e.ReportTitle)
                .HasMaxLength(255)
                .HasComment("Title của báo cáo");
        });

        modelBuilder.Entity<ReportConfigToPrint>(entity =>
        {
            entity.ToTable("ReportConfigToPrint");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.InvNo).HasMaxLength(22);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.LastPrint).HasColumnType("datetime");
            entity.Property(e => e.ReportFile)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserName).HasMaxLength(255);
        });

        modelBuilder.Entity<ReportFilter>(entity =>
        {
            entity.HasKey(e => e.FilterId).HasName("PK__ReportFilter__4BA87411");

            entity.ToTable("ReportFilter");

            entity.Property(e => e.FilterId)
                .ValueGeneratedNever()
                .HasColumnName("FilterID");
            entity.Property(e => e.DefaultFilter).HasMaxLength(500);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<ReportFilterColumn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReportFilterColumn");

            entity.Property(e => e.FieldCaption).HasMaxLength(255);
            entity.Property(e => e.FieldName).HasMaxLength(255);
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<ReportFilterDetail>(entity =>
        {
            entity.HasKey(e => e.FilterDetailId).HasName("PK__ReportFilterDeta__5CD30013");

            entity.ToTable("ReportFilterDetail");

            entity.Property(e => e.FilterDetailId)
                .ValueGeneratedNever()
                .HasColumnName("FilterDetailID");
            entity.Property(e => e.FieldName).HasMaxLength(255);
            entity.Property(e => e.FilterId).HasColumnName("FilterID");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
            entity.Property(e => e.Value1).HasMaxLength(255);
            entity.Property(e => e.Value2).HasMaxLength(255);

            entity.HasOne(d => d.Filter).WithMany(p => p.ReportFilterDetails)
                .HasForeignKey(d => d.FilterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReportFilterDetail_ReportFilter");
        });

        modelBuilder.Entity<ReportSigner>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReportSigner");

            entity.HasIndex(e => new { e.ReportId, e.BranchId, e.SortOrder, e.TitleId }, "IX_ReportSigner");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.SignerName).HasMaxLength(50);
            entity.Property(e => e.SignerTitleEn).HasMaxLength(50);
            entity.Property(e => e.SignerTitleKo).HasMaxLength(50);
            entity.Property(e => e.SignerTitleVi).HasMaxLength(50);
            entity.Property(e => e.SignerTitleZh).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(50);
            entity.Property(e => e.TitleId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TitleID");
        });

        modelBuilder.Entity<ResourceInfoTempEinvoice>(entity =>
        {
            entity.ToTable("ResourceInfoTempEInvoice");

            entity.Property(e => e.ResourceInfoTempEinvoiceId)
                .ValueGeneratedNever()
                .HasColumnName("ResourceInfoTempEInvoiceID");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.PercentRemainCashQuantity).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PercentRemainInvQuantity).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PercentRemainTicketQuantity).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<ResourcesTaxTable>(entity =>
        {
            entity.ToTable("ResourcesTaxTable", tb => tb.HasComment("Danh mục Biểu thuế tài nguyên"));

            entity.Property(e => e.ResourcesTaxTableId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ResourcesTaxTableID");
            entity.Property(e => e.BaseOn).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Grade)
                .HasDefaultValueSql("((1))")
                .HasComment("Cấp bậc");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsParent).HasComment("Là mục chi cha");
            entity.Property(e => e.IsSystem).HasComment("Thuộc hệ thống");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId)
                .HasComment("Mục chi cha")
                .HasColumnName("ParentID");
            entity.Property(e => e.ResourcesTaxTableCode)
                .HasMaxLength(20)
                .HasComment("Mã biểu thuế");
            entity.Property(e => e.ResourcesTaxTableCodeSort).HasMaxLength(20);
            entity.Property(e => e.ResourcesTaxTableName)
                .HasMaxLength(255)
                .HasComment("Tên biểu thuế");
            entity.Property(e => e.SectionCode).HasMaxLength(20);
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.SubsectionCode).HasMaxLength(20);
            entity.Property(e => e.TaxRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");
            entity.Property(e => e.Vatprice)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("VATPrice");
            entity.Property(e => e.Vbqpdate)
                .HasColumnType("datetime")
                .HasColumnName("VBQPDate");
        });

        modelBuilder.Entity<ResourcesTaxTableDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ResourcesTaxTableDetail");

            entity.Property(e => e.Fromdate).HasColumnType("datetime");
            entity.Property(e => e.MaxVatprice)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("MaxVATPrice");
            entity.Property(e => e.MinVatprice)
                .HasColumnType("decimal(28, 4)")
                .HasColumnName("MinVATPrice");
            entity.Property(e => e.ResourcesTaxTableCode).HasMaxLength(20);
            entity.Property(e => e.ResourcesTaxTableName).HasMaxLength(255);
            entity.Property(e => e.TaxRate).HasColumnType("decimal(28, 4)");
            entity.Property(e => e.Todate).HasColumnType("datetime");
            entity.Property(e => e.Unit).HasMaxLength(100);
        });

        modelBuilder.Entity<Sadiscount>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SADiscount", tb => tb.HasComment("Bảng Hàng bán giảm giá"));

            entity.HasIndex(e => e.RefDate, "IX_SADiscount_RefDate");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_SADiscount_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ khách hàng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Khách hàng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên khách hàng");
            entity.Property(e => e.AdjustInvoiceRefId).HasColumnName("AdjustInvoiceRefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên bán hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do chi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.Receiver)
                .HasMaxLength(128)
                .HasComment("Người nhận");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Phiếu chi/Chứng từ ghi giảm công nợ (sổ tài chính)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ  Phiếu chi/Chứng từ ghi giảm công nợ (sổ quản trị)");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SainvoiceRefId)
                .HasComment("RefID của hóa đơn xuất")
                .HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SupplierId)
                .HasComment("Đơn vị giao đại lý/Đơn vị ủy thác")
                .HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(400)
                .HasComment("Tên đơn vị giao đại lý/Đơn vị ủy thác");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalSaleAmount)
                .HasComment("Tổng tiền quy đổi của hóa đơn chưa có thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasComment("Tổng tiền của hóa đơn chưa có thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế thuế NT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SadiscountAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SADiscount_AccountingObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Sadiscounts)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SADiscount_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Sadiscounts)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SADiscount_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SadiscountEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.Supplier).WithMany(p => p.SadiscountSuppliers).HasForeignKey(d => d.SupplierId);
        });

        modelBuilder.Entity<SadiscountDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SADiscountDetail", tb => tb.HasComment("Bảng Detail của hàng bán giảm giá"));

            entity.HasIndex(e => e.RefId, "IX_SADiscountDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.SaorderRefDetailId, "IX_SADiscountDetail_SAOrderRefDetailID");

            entity.HasIndex(e => e.SavoucherRefDetailId, "IX_SADiscountDetail_SAVoucherRefDetailID");

            entity.HasIndex(e => e.SavoucherRefId, "IX_SADiscountDetail_SAVoucherRefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền trước thuế quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền trước thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffVatamountFinance)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountFinance");
            entity.Property(e => e.CashOutDiffVatamountManagement)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountManagement");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutVatamountFinance)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountFinance");
            entity.Property(e => e.CashOutVatamountManagement)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountManagement");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.DiscountAccount)
                .HasMaxLength(20)
                .HasComment("TK chiết khấu");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.NotInVatdeclaration)
                .HasComment("HHDV không tổng hợp trên tờ khai GTGT")
                .HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("ID công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SainvoiceRefId)
                .HasComment("ID của hóa đơn xuất (mục đích dễ dàng join lấy lên Hóa đơn xuất)")
                .HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.SavoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ bán hàng")
                .HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId)
                .HasComment("RefID của chứng từ bán hàng")
                .HasColumnName("SAVoucherRefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.TacareerGroupId)
                .HasComment("ID nhóm ngành nghề")
                .HasColumnName("TACareerGroupID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax)
                .HasComment("Đơn giá sau thuế")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK Thuế")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasComment("% thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_SADiscountDetail_BankAccount");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_SADiscountDetail_BudgetItem");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.SadiscountDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_SADiscountDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.SadiscountDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_SADiscountDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.ContractDetailId)
                .HasConstraintName("FK_SADiscountDetail_ContractDetailInventoryItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SADiscountDetail_Contract");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SADiscountDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SADiscountDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_SADiscountDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_SADiscountDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_SADiscountDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.SadiscountDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_SADiscountDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_SADiscountDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_SADiscountDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_SADiscountDetail_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SADiscountDetail_SADiscount");

            entity.HasOne(d => d.SainvoiceRef).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.SainvoiceRefId)
                .HasConstraintName("FK_SADiscountDetail_SAInvoice");

            entity.HasOne(d => d.SaorderRefDetail).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.SaorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SADiscountDetail_SAOrderDetail");

            entity.HasOne(d => d.SavoucherRefDetail).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.SavoucherRefDetailId)
                .HasConstraintName("FK_SADiscountDetail_SAVoucherDetail");

            entity.HasOne(d => d.SavoucherRef).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.SavoucherRefId)
                .HasConstraintName("FK_SADiscountDetail_SAVoucher");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.SadiscountDetails)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_SADiscountDetail_TACareerGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SadiscountDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SADiscountDetail_Unit");
        });

        modelBuilder.Entity<Sainvoice>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SAInvoice", tb =>
                {
                    tb.HasComment("Hóa đơn bán hàng");
                    tb.HasTrigger("trg_SAInvoice_DataChanged");
                });

            entity.HasIndex(e => new { e.InvTemplateNo, e.InvSeries, e.RefId, e.BranchId, e.IncludeInvoice, e.IsBranchIssued, e.RefType, e.InvNo, e.InvDate }, "IX_Composite");

            entity.HasIndex(e => e.AccountObjectId, "IX_SAInvoice_AccountingObjectID").HasFillFactor(90);

            entity.HasIndex(e => new { e.InvDate, e.InvTemplateNo, e.InvSeries, e.InvNo, e.BranchId, e.DisplayOnBook, e.RefType, e.ExportNontariffZones, e.IsGetForInvoice }, "IX_SAInvoice_Invoice");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectBankAccount)
                .HasMaxLength(50)
                .HasComment("Tài khoản của khách hàng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Mã đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế của khách hàng");
            entity.Property(e => e.AdjustInvDate).HasColumnType("datetime");
            entity.Property(e => e.AdjustInvNo).HasMaxLength(25);
            entity.Property(e => e.AdjustInvSeries).HasMaxLength(20);
            entity.Property(e => e.AdjustInvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.AdjustInvestmentProjectId).HasColumnName("AdjustInvestmentProjectID");
            entity.Property(e => e.AdjustJournalMemo).HasMaxLength(500);
            entity.Property(e => e.AdjustPurchasePurposeId).HasColumnName("AdjustPurchasePurposeID");
            entity.Property(e => e.AdjustRefId).HasColumnName("AdjustRefID");
            entity.Property(e => e.AdjustTacareerGroupId).HasColumnName("AdjustTACareerGroupID");
            entity.Property(e => e.AdjustVatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AdjustVATRate");
            entity.Property(e => e.BillOfLadingNo)
                .HasMaxLength(50)
                .HasComment("Số vận đơn");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Buyer)
                .HasMaxLength(128)
                .HasComment("Người mua hàng");
            entity.Property(e => e.CommonInventoryName)
                .HasMaxLength(255)
                .HasComment("Tên mặt hàng chung");
            entity.Property(e => e.ContainerNo)
                .HasMaxLength(50)
                .HasComment("Số container");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Số hợp đồng");
            entity.Property(e => e.ContractDate)
                .HasComment("Ngày hợp đồng")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncludeInvoice).HasComment("Có lập kèm hóa đơn hay không? (Cho tiện việc cập nhật, nếu có lập kèm thì cập nhật đồng thời sang Chứng từ bán hàng)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo)
                .HasMaxLength(25)
                .HasComment("Mẫu số hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("Loại hóa đơn: 1.Hóa đơn giá trị gia tăng; 2.Hóa đơn bán hàng; 3.Phiếu xuất kho kiêm vận chuyển hàng hóa nội bộ; 4.Phiếu xuất kho gửi bán hàng đại lý; 5.Hóa đơn xuất khấu; 6.Hóa đơn bán hàng (dành cho tổ chức, cá nhân trong khu phi thuế quan)")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.InvoiceCode).HasMaxLength(100);
            entity.Property(e => e.IsAttachList).HasComment("In kèm bảng kê");
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.IsGetForInvoice).HasComputedColumnSql("(case when [InvSeries]<>'' AND right(rtrim([InvSeries]),(1))='E' then CONVERT([bit],(1),0) when [InvNo] IS NULL then CONVERT([bit],(1),0) when [InvNo]='' then CONVERT([bit],(1),0) else CONVERT([bit],(1),0) end)", true);
            entity.Property(e => e.IsPaid).HasComment("Đã thanh toán đủ");
            entity.Property(e => e.IsPosted).HasComment("Đã hạch toán");
            entity.Property(e => e.IsPostedLastYear).HasComment("Đã hạch toán năm trước");
            entity.Property(e => e.IsSainvoiceValueAdjustEmptyVat).HasColumnName("IsSAInvoiceValueAdjustEmptyVat");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.ListDate)
                .HasComment("ngày in bảng kê")
                .HasColumnType("datetime");
            entity.Property(e => e.ListNo)
                .HasMaxLength(20)
                .HasComment("Số bảng kê");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasComment("Hình thức thanh toán");
            entity.Property(e => e.PlaceOfDelivery)
                .HasMaxLength(255)
                .HasComment("Địa điểm giao hàng");
            entity.Property(e => e.PlaceOfReceipt)
                .HasMaxLength(255)
                .HasComment("Địa điểm nhận hàng");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Giá trị hóa đơn QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Giá trị hóa đơn")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tiền CK QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tiền CK")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalSaleAmount)
                .HasComment("Tổng tiền hàng Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasComment("Tổng tiền hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tiền thuế GTGT QĐ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
            entity.Property(e => e.TransportName)
                .HasMaxLength(128)
                .HasComment("Đơn vị vận chuyển");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SainvoiceAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAInvoice_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Sainvoices)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAInvoice_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Sainvoices)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAInvoice_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SainvoiceEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<SainvoiceDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAInvoiceDetail", tb => tb.HasComment("Bảng chi tiết Hóa đơn xuất"));

            entity.HasIndex(e => e.RefId, "IX_SAInvoiceDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionsTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DeductionsTaxAmountOC");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Tên hàng");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền CK QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền CK")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ lệ CK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.IsPromotion).HasComment("Là hàng khuyến mại");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.NotInVatdeclaration)
                .HasComment("HHDV không tổng hợp trên tờ khai GTGT")
                .HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK - Cúa master Hóa đơn xuất")
                .HasColumnName("RefID");
            entity.Property(e => e.SavoucherRefDetailId).HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId).HasColumnName("SAVoucherRefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TacareerGroupId)
                .HasComment("ID nhóm ngành nghề")
                .HasColumnName("TACareerGroupID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax)
                .HasComment("Đơn giá sau thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(25)
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế GTGT QĐ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("% thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatrate406)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate406");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SainvoiceDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_SAInvoiceDetail_InventoryItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.SainvoiceDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SAInvoiceDetail_SAInvoice");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.SainvoiceDetails)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_SAInvoiceDetail_TACareerGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SainvoiceDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAInvoiceDetail_Unit");
        });

        modelBuilder.Entity<SainvoiceHub>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SAInvoiceHub");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount).HasMaxLength(50);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.AdjustInvDate).HasColumnType("datetime");
            entity.Property(e => e.AdjustInvNo).HasMaxLength(25);
            entity.Property(e => e.AdjustInvSeries).HasMaxLength(20);
            entity.Property(e => e.AdjustInvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.AdjustInvestmentProjectId).HasColumnName("AdjustInvestmentProjectID");
            entity.Property(e => e.AdjustJournalMemo).HasMaxLength(500);
            entity.Property(e => e.AdjustPurchasePurposeId).HasColumnName("AdjustPurchasePurposeID");
            entity.Property(e => e.AdjustRefId).HasColumnName("AdjustRefID");
            entity.Property(e => e.AdjustTacareerGroupId).HasColumnName("AdjustTACareerGroupID");
            entity.Property(e => e.AdjustVatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AdjustVATRate");
            entity.Property(e => e.BillOfLadingNo).HasMaxLength(50);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Buyer).HasMaxLength(128);
            entity.Property(e => e.CommonInventoryName).HasMaxLength(255);
            entity.Property(e => e.ContainerNo).HasMaxLength(50);
            entity.Property(e => e.ContractCode).HasMaxLength(50);
            entity.Property(e => e.ContractDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvTypeId).HasColumnName("InvTypeID");
            entity.Property(e => e.IsBranchIssued)
                .HasDefaultValueSql("((0))")
                .HasColumnName("isBranchIssued");
            entity.Property(e => e.IsGetForInvoice).HasComputedColumnSql("(case when [InvSeries]<>'' AND right(rtrim([InvSeries]),(1))='E' then CONVERT([bit],(1),(0)) when [InvNo] IS NULL then CONVERT([bit],(1),(0)) when [InvNo]='' then CONVERT([bit],(1),(0)) else CONVERT([bit],(1),(0)) end)", true);
            entity.Property(e => e.ListDate).HasColumnType("datetime");
            entity.Property(e => e.ListNo).HasMaxLength(20);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.PlaceOfDelivery).HasMaxLength(255);
            entity.Property(e => e.PlaceOfReceipt).HasMaxLength(255);
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalSaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");
            entity.Property(e => e.TransportName).HasMaxLength(128);

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SainvoiceHubAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAInvoiceHub_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.SainvoiceHubs)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAInvoiceHub_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.SainvoiceHubs)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAInvoiceHub_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SainvoiceHubEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<SainvoiceHubDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAInvoiceHubDetail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.NotInVatdeclaration).HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SavoucherRefDetailId).HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId).HasColumnName("SAVoucherRefID");
            entity.Property(e => e.TacareerGroupId).HasColumnName("TACareerGroupID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(25)
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SainvoiceHubDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_SAInvoiceHubDetail_InventoryItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.SainvoiceHubDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SAInvoiceHubDetail_SAInvoiceHub");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.SainvoiceHubDetails)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_SAInvoiceHubDetail_TACareerGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SainvoiceHubDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAInvoiceHubDetail_Unit");
        });

        modelBuilder.Entity<SainvoicePetroleum>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SAInvoicePetroleum");

            entity.HasIndex(e => e.AccountObjectId, "IX_SAInvoicePetroleum_AccountObjectID").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectBankAccount).HasMaxLength(50);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectTaxCode).HasMaxLength(50);
            entity.Property(e => e.AdjustInvDate).HasColumnType("datetime");
            entity.Property(e => e.AdjustInvNo).HasMaxLength(20);
            entity.Property(e => e.AdjustJournalMemo).HasMaxLength(500);
            entity.Property(e => e.AdjustPurchasePurposeId).HasColumnName("AdjustPurchasePurposeID");
            entity.Property(e => e.AdjustRefId).HasColumnName("AdjustRefID");
            entity.Property(e => e.AdjustTacareerGroupId).HasColumnName("AdjustTACareerGroupID");
            entity.Property(e => e.AdjustVatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AdjustVATRate");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.Buyer).HasMaxLength(128);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(20);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalSaleAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SainvoicePetroleumAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAInvoicePetroleum_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.SainvoicePetroleums)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_SAInvoicePetroleum_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.SainvoicePetroleums)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAInvoicePetroleum_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SainvoicePetroleumEmployees).HasForeignKey(d => d.EmployeeId);
        });

        modelBuilder.Entity<SainvoicePetroleumDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAInvoicePetroleumDetail");

            entity.HasIndex(e => e.RefId, "IX_SAInvoicePetroleumDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.NotInVatdeclaration).HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SavoucherRefDetailId).HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId).HasColumnName("SAVoucherRefID");
            entity.Property(e => e.TacareerGroupId).HasColumnName("TACareerGroupID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SainvoicePetroleumDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .HasConstraintName("FK_SAInvoicePetroleumDetail_InventoryItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.SainvoicePetroleumDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SAInvoicePetroleumDetail_SAInvoicePetroleum");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.SainvoicePetroleumDetails)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_SAInvoicePetroleumDetail_TACareerGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SainvoicePetroleumDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAInvoicePetroleumDetail_Unit");
        });

        modelBuilder.Entity<SainvoicePetroleumReference>(entity =>
        {
            entity.HasKey(e => e.ReferencefId);

            entity.ToTable("SAInvoicePetroleumReference");

            entity.HasIndex(e => e.SainvoiceRefId, "IX_SAInvoicePetroleumReference_SAInvoiceRefID");

            entity.HasIndex(e => e.VoucherRefId, "IX_SAInvoicePetroleumReference_VoucherRefID");

            entity.Property(e => e.ReferencefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReferencefID");
            entity.Property(e => e.ReferenceCreatedType).HasDefaultValueSql("((1))");
            entity.Property(e => e.ReferenceType).HasDefaultValueSql("((0))");
            entity.Property(e => e.SainvoiceRefId).HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");

            entity.HasOne(d => d.SainvoiceRef).WithMany(p => p.SainvoicePetroleumReferences)
                .HasForeignKey(d => d.SainvoiceRefId)
                .HasConstraintName("FK_SAInvoicePetroleumReference_SAInvoicePetroleum");
        });

        modelBuilder.Entity<SainvoiceReference>(entity =>
        {
            entity.HasKey(e => e.ReferencefId).HasName("PK_SAInvoiceRelation");

            entity.ToTable("SAInvoiceReference", tb => tb.HasComment("Bảng thể hiện liên hệ giữa Hóa đơn xuất với các chứng từ khác"));

            entity.HasIndex(e => e.SainvoiceRefId, "IX_SAInvoiceReference_SAInvoiceRefID");

            entity.HasIndex(e => e.VoucherRefId, "IX_SAInvoiceReference_VoucherRefID");

            entity.Property(e => e.ReferencefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ReferencefID");
            entity.Property(e => e.ReferenceCreatedType).HasDefaultValueSql("((1))");
            entity.Property(e => e.ReferenceType).HasDefaultValueSql("((0))");
            entity.Property(e => e.SainvoiceRefId)
                .HasComment("FK - RefID của Hóa đơn xuất")
                .HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("FK - RefID của các chứng từ liên quan: Bán hàng, Hàng mua trả lại, Bán giảm giá")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ liên quan");

            entity.HasOne(d => d.SainvoiceRef).WithMany(p => p.SainvoiceReferences)
                .HasForeignKey(d => d.SainvoiceRefId)
                .HasConstraintName("FK_SAInvoiceRelation_SAInvoice");
        });

        modelBuilder.Entity<SaleLedger>(entity =>
        {
            entity.ToTable("SaleLedger", tb => tb.HasComment("Bảng Ledger bán hàng"));

            entity.HasIndex(e => e.AccountObjectId, "IX_SaleLedger_AccountObjectID").HasFillFactor(90);

            entity.HasIndex(e => e.BranchId, "IX_SaleLedger_BranchID").HasFillFactor(90);

            entity.HasIndex(e => e.EmployeeId, "IX_SaleLedger_EmployeeID").HasFillFactor(90);

            entity.HasIndex(e => e.InvRefId, "IX_SaleLedger_InvRefID");

            entity.HasIndex(e => e.InventoryItemId, "IX_SaleLedger_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.IsPostToManagementBook, "IX_SaleLedger_IsPostToManagementBook").HasFillFactor(90);

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_SaleLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => e.ListItemId, "IX_SaleLedger_ListItemID").HasFillFactor(90);

            entity.HasIndex(e => e.MainUnitId, "IX_SaleLedger_MainUnitID").HasFillFactor(90);

            entity.HasIndex(e => e.OrderId, "IX_SaleLedger_OrderID").HasFillFactor(90);

            entity.HasIndex(e => e.OrganizationUnitId, "IX_SaleLedger_OrganizationUnitID").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsPostToManagementBook, e.PostedDate, e.InventoryItemId }, "IX_SaleLedger_PostedDate");

            entity.HasIndex(e => e.RefDetailId, "IX_SaleLedger_RefDetailID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_SaleLedger_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.StockId, "IX_SaleLedger_StockID").HasFillFactor(90);

            entity.HasIndex(e => e.UnitId, "IX_SaleLedger_UnitID").HasFillFactor(90);

            entity.Property(e => e.SaleLedgerId)
                .HasComment("PK - Sổ bán hàng")
                .HasColumnName("SaleLedgerID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectCode)
                .HasMaxLength(50)
                .HasComment("Mã đối tượng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng");
            entity.Property(e => e.AccountObjectNameDi)
                .HasMaxLength(400)
                .HasComment("Tên đối tượng (lấy từ danh mục)")
                .HasColumnName("AccountObjectNameDI");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế của khách hàng");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Mã hợp đồng");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.ContractName)
                .HasMaxLength(255)
                .HasComment("Tên hợp đồng");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK doanh thu");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK phải thu");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải detail");
            entity.Property(e => e.DiscountAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chiết khấu");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiêt khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiêt khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasComment("Tỉ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.EmployeeCode)
                .HasMaxLength(25)
                .HasComment("Mã nhân viên");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(128)
                .HasComment("Tên nhân viên");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("((0))")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
            entity.Property(e => e.ExportTaxAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản thuế xuất khẩu");
            entity.Property(e => e.ExportTaxAmount)
                .HasComment("Tiền thuế xuất khẩu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExportTaxAmountOc)
                .HasComment("Tiền thuế xuất khẩu nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ExportTaxAmountOC");
            entity.Property(e => e.ExportTaxRate)
                .HasComment("Tỉ lệ thuế xuất khẩu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn tài chính")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(500)
                .HasComment("Số hóa đơn tài chính");
            entity.Property(e => e.InvRefId).HasColumnName("InvRefID");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InventoryItemCode)
                .HasMaxLength(50)
                .HasComment("Mã vật tư, hàng hóa");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên vật tư, hàng hóa");
            entity.Property(e => e.IsPostToManagementBook).HasComment("Trạng thái ghi vào vào sổ quản trị");
            entity.Property(e => e.IsPromotion).HasComment("1=Là hàng khuyến mại;0=không phải là hàng khuyến mại");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Có cần cập nhật dữ liệu từ các bảng dư thừa sang không, 0: không, 1: có. Sau khi cập nhật xong thì thiết lập thông tin này về =0");
            entity.Property(e => e.JobId)
                .HasComment("Đối tượng THCP")
                .HasColumnName("JobID");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.MainUnitPriceOc)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("MainUnitPriceOC");
            entity.Property(e => e.OrderId)
                .HasComment("ID đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("ID Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PaymentDate)
                .HasComment("Ngày thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentTermCode)
                .HasMaxLength(20)
                .HasComment("Mã điều khoản chiết khấu");
            entity.Property(e => e.PaymentTermId)
                .HasComment("ID Điều khoản chiết khấu, dùng cho mua hàng, bán hàng")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.PaymentTermName)
                .HasMaxLength(128)
                .HasComment("Tên điều khoản chiết khấu");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/Dự án")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.ReceiptAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReceiptAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReceiptAmountOC");
            entity.Property(e => e.ReduceAmount)
                .HasComment("Giá trị giảm giá quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReduceAmountOc)
                .HasComment("Giá trị giảm giá")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReduceAmountOC");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDetailId)
                .HasComment("RefDetailID chứng từ gốc")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("RefID chứng từ gốc")
                .HasColumnName("RefID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Sổ tài chính");
            entity.Property(e => e.RefOrder).HasComment("Thứ tự các chứng từ nhập trước, nhập sau");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
            entity.Property(e => e.ReturnAmount)
                .HasComment("Giá trị trả lại Quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReturnAmountOc)
                .HasComment("Giá trị trả lại")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("ReturnAmountOC");
            entity.Property(e => e.ReturnMainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ReturnQuantity)
                .HasComment("Số lượng bán trả lại")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SaleAmount)
                .HasComment("Thành tiền bán hàng quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SaleAmountOc)
                .HasComment("Thành tiền bán hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("SaleAmountOC");
            entity.Property(e => e.SaleQuantity)
                .HasComment("Số lượng bán")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SavoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ Bán hàng")
                .HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId)
                .HasComment("RefID của chứng từ Bán hàng")
                .HasColumnName("SAVoucherRefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockCode)
                .HasMaxLength(20)
                .HasComment("Mã kho");
            entity.Property(e => e.StockId)
                .HasComment("Kho vật tư")
                .HasColumnName("StockID");
            entity.Property(e => e.StockName)
                .HasMaxLength(128)
                .HasComment("Tên kho");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá quy đổi")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceOc)
                .HasColumnType("decimal(20, 6)")
                .HasColumnName("UnitPriceOC");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");
            entity.Property(e => e.Warranty)
                .HasMaxLength(255)
                .HasComment("Hạn bảo hành");
        });

        modelBuilder.Entity<SaleOutwardReference>(entity =>
        {
            entity.HasKey(e => e.ReferencefId);

            entity.ToTable("SaleOutwardReference");

            entity.HasIndex(e => e.InoutwardRefId, "IX_SaleOutwardReference_INOutwardRefID");

            entity.HasIndex(e => e.SavoucherRefId, "IX_SaleOutwardReference_SAVoucherRefID");

            entity.Property(e => e.ReferencefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ReferencefID");
            entity.Property(e => e.InoutwardRefId)
                .HasComment("RefID của chứng từ xuất")
                .HasColumnName("INOutwardRefID");
            entity.Property(e => e.ReferenceType).HasComment("0 = BH sinh PX; 1 = Lập BH từ 1 hoặc nhiều PX; 2 = Lập PX từ 1 hoặc nhiều CT BH");
            entity.Property(e => e.SavoucherRefId)
                .HasComment("RefID của chứng từ Bán hàng")
                .HasColumnName("SAVoucherRefID");

            entity.HasOne(d => d.InoutwardRef).WithMany(p => p.SaleOutwardReferences)
                .HasForeignKey(d => d.InoutwardRefId)
                .HasConstraintName("FK_SaleOutwardReference_INOutward");

            entity.HasOne(d => d.SavoucherRef).WithMany(p => p.SaleOutwardReferences)
                .HasForeignKey(d => d.SavoucherRefId)
                .HasConstraintName("FK_SaleOutwardReference_SAVoucher");
        });

        modelBuilder.Entity<SaleOutwardReferenceDetail>(entity =>
        {
            entity.HasKey(e => e.ReferencefId);

            entity.ToTable("SaleOutwardReferenceDetail");

            entity.HasIndex(e => e.InoutwardRefDetailId, "IX_SaleOutwardReferenceDetail_INOutwardRefDetailID");

            entity.HasIndex(e => e.SavoucherRefDetailId, "IX_SaleOutwardReferenceDetail_SAVoucherRefDetailID");

            entity.Property(e => e.ReferencefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("FK")
                .HasColumnName("ReferencefID");
            entity.Property(e => e.InoutwardRefDetailId)
                .HasComment("RefDetailID của chứng từ xuất")
                .HasColumnName("INOutwardRefDetailID");
            entity.Property(e => e.SavoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ Bán hàng")
                .HasColumnName("SAVoucherRefDetailID");

            entity.HasOne(d => d.InoutwardRefDetail).WithMany(p => p.SaleOutwardReferenceDetails)
                .HasForeignKey(d => d.InoutwardRefDetailId)
                .HasConstraintName("FK_SaleOutwardReferenceDetail_INOutwardDetail");

            entity.HasOne(d => d.SavoucherRefDetail).WithMany(p => p.SaleOutwardReferenceDetails)
                .HasForeignKey(d => d.SavoucherRefDetailId)
                .HasConstraintName("FK_SaleOutwardReferenceDetail_SAVoucherDetail");
        });

        modelBuilder.Entity<Saorder>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SAOrder", tb => tb.HasComment("Bảng master đơn đặt hàng"));

            entity.HasIndex(e => e.AccountObjectId, "IX_SAOrder_CustomerID").HasFillFactor(90);

            entity.HasIndex(e => e.RefNo, "IX_SAOrder_RefNo").HasFillFactor(90);

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("FK: ID khách hàng là tổ chức hoặc cá nhân")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên khách hàng là tổ chức hoặc cá nhân");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DeliveryDate)
                .HasComment("Ngày giao hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.DueDay).HasComment("Số ngày được nợ");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên bán hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IsCalculatedCost).HasComment("Check tính giá thành");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Ghi chú");
            entity.Property(e => e.LastYearInvoiceAmount)
                .HasComment("Giá trị đã xuất hóa đơn năm trước")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.LastYearInvoiceAmountOc)
                .HasComment("Giá trị đã xuất hóa đơn năm trước nguyên tệ")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("LastYearInvoiceAmountOC");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherTerm)
                .HasMaxLength(255)
                .HasComment("Điều khoản khác");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Mã điều kiện chiết khấu")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.QuoteRefId)
                .HasComment("FK với bảng báo giá")
                .HasColumnName("QuoteRefID");
            entity.Property(e => e.Receiver)
                .HasMaxLength(128)
                .HasComment("Người nhận hàng");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày đơn hàng")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(25)
                .HasComment("Số đơn hàng");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.ShippingAddress)
                .HasMaxLength(255)
                .HasComment("Địa chỉ giao hàng");
            entity.Property(e => e.Status).HasComment("Tình trạng đơn hàng, 0: Chưa thực hiện; 1: Đang thực hiện; 2: Tạm dừng; 3: Hoàn thành; 4: Đã hủy bỏ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền hàng quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SaorderAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAOrder_AccountObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Saorders)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_SAOrder_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Saorders)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAOrder_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SaorderEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.Saorders)
                .HasForeignKey(d => d.PaymentTermId)
                .HasConstraintName("FK_SAOrder_PaymentTerm");

            entity.HasOne(d => d.QuoteRef).WithMany(p => p.Saorders)
                .HasForeignKey(d => d.QuoteRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAOrder_SAQuote");
        });

        modelBuilder.Entity<SaorderDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAOrderDetail");

            entity.HasIndex(e => e.RefId, "IX_SAOrderDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.CustomFieldAmount1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldAmount2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldAmount3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldAmountOc1)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CustomFieldAmountOC1");
            entity.Property(e => e.CustomFieldAmountOc2)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CustomFieldAmountOC2");
            entity.Property(e => e.CustomFieldAmountOc3)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CustomFieldAmountOC3");
            entity.Property(e => e.CustomFieldDateTime1).HasColumnType("datetime");
            entity.Property(e => e.CustomFieldDateTime2).HasColumnType("datetime");
            entity.Property(e => e.CustomFieldDateTime3).HasColumnType("datetime");
            entity.Property(e => e.CustomFieldQuantity1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldQuantity2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldQuantity3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldUnitPrice1).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldUnitPrice2).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldUnitPrice3).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CustomFieldUnitPriceOc1)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CustomFieldUnitPriceOC1");
            entity.Property(e => e.CustomFieldUnitPriceOc2)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CustomFieldUnitPriceOC2");
            entity.Property(e => e.CustomFieldUnitPriceOc3)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CustomFieldUnitPriceOC3");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.GuarantyPeriod).HasMaxLength(100);
            entity.Property(e => e.InventoryItemId).HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemSource).HasMaxLength(255);
            entity.Property(e => e.IsPromotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.LastYearDeliveredAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LastYearDeliveredAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("LastYearDeliveredAmountOC");
            entity.Property(e => e.LastYearDeliveredBeforeTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LastYearDeliveredBeforeTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("LastYearDeliveredBeforeTaxAmountOC");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.LotNo).HasMaxLength(50);
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainQuantityDeliveredIn)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("MainQuantityDeliveredIN");
            entity.Property(e => e.MainQuantityDeliveredInlastYear)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("MainQuantityDeliveredINLastYear");
            entity.Property(e => e.MainQuantityDeliveredSa)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("MainQuantityDeliveredSA");
            entity.Property(e => e.MainQuantityDeliveredSalastYear)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("MainQuantityDeliveredSALastYear");
            entity.Property(e => e.MainUnitId).HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PanelHeightQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityDeliveredIn)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredIN");
            entity.Property(e => e.QuantityDeliveredInlastYear)
                .HasComment("Số đã giao năm trước (Tính theo Bán hàng)")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredINLastYear");
            entity.Property(e => e.QuantityDeliveredSa)
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredSA");
            entity.Property(e => e.QuantityDeliveredSalastYear)
                .HasComment("Số đã giao năm trước (Tính theo Phiếu xuất)")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("QuantityDeliveredSALastYear");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SaquoteRefDetailId).HasColumnName("SAQuoteRefDetailID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.Contract).WithMany(p => p.SaorderDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SAOrderDetail_Contract");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SaorderDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SAOrderDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SaorderDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAOrderDetail_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.SaorderDetailMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Ref).WithMany(p => p.SaorderDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SAOrderDetail_SAOrder");

            entity.HasOne(d => d.SaquoteRefDetail).WithMany(p => p.SaorderDetails)
                .HasForeignKey(d => d.SaquoteRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAOrderDetail_SAQuoteDetail");

            entity.HasOne(d => d.Unit).WithMany(p => p.SaorderDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAOrderDetail_Unit");
        });

        modelBuilder.Entity<Sapolicy>(entity =>
        {
            entity.ToTable("SAPolicy", tb => tb.HasComment("Bảng master chứa danh sách các chính sách giá bán hàng"));

            entity.Property(e => e.SapolicyId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SAPolicyID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả chi tiết");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.Inactive).HasComment("Ngừng áp dụng");
            entity.Property(e => e.IndexUnitConvert).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSetDiscount)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Có thiết lập chiết khấu cho chính sách giá hay không");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PolicyName)
                .HasMaxLength(255)
                .HasComment("Tên chính sách giá");
            entity.Property(e => e.ToDate).HasColumnType("datetime");

            entity.HasOne(d => d.Currency).WithMany(p => p.Sapolicies)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAPolicy_CCY");
        });

        modelBuilder.Entity<SapolicyPrice>(entity =>
        {
            entity.ToTable("SAPolicyPrice", tb => tb.HasComment("Bảng lưu giá của  VTHH ứng với từng nhóm giá bán"));

            entity.HasIndex(e => e.InventoryCategoryId, "IX_SAPolicyPrice_InventoryCategoryID");

            entity.HasIndex(e => e.InventoryItemId, "IX_SAPolicyPrice_InventoryItemID");

            entity.Property(e => e.SapolicyPriceId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SAPolicyPriceID");
            entity.Property(e => e.DiscountType).HasComment("Loại Chiết khấu. 0 = Theo %; 1 = Theo số tiền/1 đơn vị số lượng");
            entity.Property(e => e.DiscountValue)
                .HasComment("% hoặc số tiền CK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InventoryCategoryId).HasColumnName("InventoryCategoryID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("VTHH")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.Price)
                .HasComment("Giá bán")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.SapolicyId)
                .HasComment("ID của Chính sách giá. Lưu lại cho dễ dàng query ra các vật tư áp dụng chính sách giá")
                .HasColumnName("SAPolicyID");
            entity.Property(e => e.SapolicySaleGroupId)
                .HasComment("FK")
                .HasColumnName("SAPolicySaleGroupID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.ValueAdjust).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SapolicyPrices)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SAPolicyPrice_InventoryItem");

            entity.HasOne(d => d.SapolicySaleGroup).WithMany(p => p.SapolicyPrices)
                .HasForeignKey(d => d.SapolicySaleGroupId)
                .HasConstraintName("FK_SAPolicyPrice_SAPolicySaleGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SapolicyPrices)
                .HasForeignKey(d => d.UnitId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SAPolicyPrice_Unit");
        });

        modelBuilder.Entity<SapolicySaleCustomer>(entity =>
        {
            entity.ToTable("SAPolicySaleCustomer", tb => tb.HasComment("Bảng chứa danh sách các khách hàng trong từng nhóm của một chính sách giá"));

            entity.Property(e => e.SapolicySaleCustomerId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SAPolicySaleCustomerID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Đối tượng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.SapolicyId)
                .HasComment("ID của Chính sách giá. Lưu lại cho dễ dàng query ra các Khách hàng được áp dụng chính sách giá")
                .HasColumnName("SAPolicyID");
            entity.Property(e => e.SapolicySaleGroupId)
                .HasComment("Nhóm giá bán")
                .HasColumnName("SAPolicySaleGroupID");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SapolicySaleCustomers)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAPolicySaleCustomer_AccountingObject");

            entity.HasOne(d => d.SapolicySaleGroup).WithMany(p => p.SapolicySaleCustomers)
                .HasForeignKey(d => d.SapolicySaleGroupId)
                .HasConstraintName("FK_SAPolicySaleCustomer_SAPolicySaleGroup");
        });

        modelBuilder.Entity<SapolicySaleGroup>(entity =>
        {
            entity.ToTable("SAPolicySaleGroup", tb => tb.HasComment("Bảng chứa danh sách các nhóm giá bán của một chính sách giá"));

            entity.HasIndex(e => new { e.SapolicyId, e.SasaleGroupId }, "IX_SAPolicySaleGroup")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.SapolicySaleGroupId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SAPolicySaleGroupID");
            entity.Property(e => e.AccountObjectGroupId).HasColumnName("AccountObjectGroupID");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.BaseOn).HasComment("Dựa trên mức giá nào. 0 = Giá mua trong danh mục; 1 = Giá bán cố định; 2 = Giá bán 1; 3 = Giá bán 2; 4 = Giá bán 3");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DiscountType).HasComment("Loại Chiết khấu. 0 = Theo %; 1 = Theo số tiền/1 đơn vị số lượng");
            entity.Property(e => e.DiscountValue)
                .HasComment("% hoặc số tiền CK")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MethodId)
                .HasComment("Phương pháp tăng, giảm giá bán. 0 = Tăng %; 1 = Giảm %; 2 = Tăng số tiền; 3 = Giảm số tiền")
                .HasColumnName("MethodID");
            entity.Property(e => e.SaleGroupName).HasMaxLength(400);
            entity.Property(e => e.SapolicyId)
                .HasComment("Chính sách giá")
                .HasColumnName("SAPolicyID");
            entity.Property(e => e.SasaleGroupId)
                .HasComment("Nhóm giá bán")
                .HasColumnName("SASaleGroupID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("Thứ tự sắp xếp dòng");
            entity.Property(e => e.ValueAdjust)
                .HasComment("Giá trị tăng, giảm")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Sapolicy).WithMany(p => p.SapolicySaleGroups)
                .HasForeignKey(d => d.SapolicyId)
                .HasConstraintName("FK_SAPolicySaleGroup_SAPolicy");
        });

        modelBuilder.Entity<Saquote>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_Quote_QuoteID");

            entity.ToTable("SAQuote", tb => tb.HasComment("Bảng báo giá"));

            entity.HasIndex(e => e.AccountObjectId, "IX_Quote_AccountObjectID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SAQuote_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ khách hàng");
            entity.Property(e => e.AccountObjectContactName)
                .HasMaxLength(128)
                .HasComment("Người liên hệ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID khách hàng là tổ chức hoặc cá nhân")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên khách hàng");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EffectiveDate)
                .HasComment("Ngày hiệu lực")
                .HasColumnType("datetime");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Ghi chú");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày báo giá")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(25)
                .HasComment("Số báo giá");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền hàng quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế GTGT quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.Saquotes)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAQuote_AccountObject");

            entity.HasOne(d => d.Currency).WithMany(p => p.Saquotes)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAQuote_CCY");
        });

        modelBuilder.Entity<SaquoteDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAQuoteDetail", tb => tb.HasComment("Chi tiết báo giá"));

            entity.HasIndex(e => e.RefDetailId, "IX_SAQuoteDetail_RefID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterDiscount)
                .HasComment("Thành tiền sau chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterDiscountOc)
                .HasComment("Thành tiền sau chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountAfterDiscountOC");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Mô tả hàng hóa");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasComment("Tỉ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.GuarantyPeriod).HasMaxLength(100);
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã sản phẩm")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InventoryItemSource).HasMaxLength(255);
            entity.Property(e => e.IsPromotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PanelHeightQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((1))")
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterDiscount)
                .HasComment("Đơn giá sau chiết khấu")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax)
                .HasComment("Đơn giá sau thuế")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.Contract).WithMany(p => p.SaquoteDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SAQuoteDetail_Contract");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SaquoteDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SAQuoteDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SaquoteDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuoteInventoryItem_InventoryItem");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.SaquoteDetailMainUnits).HasForeignKey(d => d.MainUnitId);

            entity.HasOne(d => d.Ref).WithMany(p => p.SaquoteDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SAQuoteDetail_SAQuote");

            entity.HasOne(d => d.Unit).WithMany(p => p.SaquoteDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAQuoteDetail_Unit");
        });

        modelBuilder.Entity<Sareturn>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SAReturn", tb =>
                {
                    tb.HasComment("Bảng Hàng bán trả lại");
                    tb.HasTrigger("trg_SAReturn_DataChanged");
                });

            entity.HasIndex(e => e.RefDate, "IX_SAReturn_RefDate");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_SAReturn_RefNoFinance");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ khách hàng");
            entity.Property(e => e.AccountObjectId)
                .HasComment("Khách hàng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên khách hàng");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Tài liệu kèm theo");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên bán hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IninwardRefId).HasColumnName("INInwardRefID");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.IsCreatedIninwardLastYear)
                .HasComment("Đã lập phiếu nhập năm trước")
                .HasColumnName("IsCreatedINInwardLastYear");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải/Lý do chi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("ID của hóa đơn nhận")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.Receiver)
                .HasMaxLength(128)
                .HasComment("Người nhận");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ Phiếu chi/Chứng từ ghi giảm công nợ (sổ tài chính)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ  Phiếu chi/Chứng từ ghi giảm công nợ (sổ quản trị)");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SupplierId)
                .HasComment("Đơn vị giao đại lý/Đơn vị ủy thác")
                .HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(400)
                .HasComment("Tên đơn vị giao đại lý/Đơn vị ủy thác");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền quy đổi=TotalSaleAmount+TotalTaxAmount- TotalDiscountAmount")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền =TotalSaleAmountOC+TotalTaxAmountOC- TotalDiscountAmountOC")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalSaleAmount)
                .HasComment("Tổng tiền quy đổi của hóa đơn chưa có thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasComment("Tổng tiền của hóa đơn chưa có thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế thuế NT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SareturnAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAReturn_AccountingObject");

            entity.HasOne(d => d.Branch).WithMany(p => p.Sareturns)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAReturn_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Sareturns)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAReturn_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SareturnEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.PuinvoiceRef).WithMany(p => p.Sareturns)
                .HasForeignKey(d => d.PuinvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAReturn_PUInvoice");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SareturnSuppliers).HasForeignKey(d => d.SupplierId);
        });

        modelBuilder.Entity<SareturnDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAReturnDetail", tb => tb.HasComment("Bảng Detail của hàng bán trả lại"));

            entity.HasIndex(e => e.InventoryItemId, "IX_SAReturnDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.IsPromotion, "IX_SAReturnDetail_IsPromotion");

            entity.HasIndex(e => e.RefId, "IX_SAReturnDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.SaorderRefDetailId, "IX_SAReturnDetail_SAOrderRefDetailID");

            entity.HasIndex(e => e.SavoucherRefId, "IX_SAReturnDetail_SAVoucherRefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.CashOutAmountFinance)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutAmountManagement)
                .HasComment("Quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAccountNumberFinance)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ tài chính");
            entity.Property(e => e.CashOutDiffAccountNumberManagement)
                .HasMaxLength(20)
                .HasComment("Tài khoản xử lý chênh lệch Tỷ giá xuất quỹ sổ quản trị");
            entity.Property(e => e.CashOutDiffAmountFinance)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffAmountManagement)
                .HasComment("Chênh lệch Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CashOutDiffVatamountFinance)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountFinance");
            entity.Property(e => e.CashOutDiffVatamountManagement)
                .HasComment("Chênh lệch tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutDiffVATAmountManagement");
            entity.Property(e => e.CashOutExchangeRateFinance)
                .HasComment("Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutExchangeRateManagement)
                .HasComment("Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.CashOutVatamountFinance)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ tài chính")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountFinance");
            entity.Property(e => e.CashOutVatamountManagement)
                .HasComment("Tiền thuế quy đổi theo Tỷ giá xuất quỹ sổ quản trị")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CashOutVATAmountManagement");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.DiscountAccount)
                .HasMaxLength(20)
                .HasComment("TK chiết khấu");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.EinvoiceItemName)
                .HasMaxLength(500)
                .HasColumnName("EInvoiceItemName");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Hạn sử dụng")
                .HasColumnType("datetime");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.IsPromotion).HasComment("Là hàng khuyến mại");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.NotInVatdeclaration)
                .HasComment("HHDV không tổng hợp trên tờ khai GTGT")
                .HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PuinvoiceRefId)
                .HasComment("ID của hóa đơn nhận (lấy dữ liệu cho dễ dàng khi ghi sô TaxLedger)")
                .HasColumnName("PUInvoiceRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("Mã nhóm hàng hóa dịch vụ")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SaorderRefDetailId).HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.SavoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ bán hàng")
                .HasColumnName("SAVoucherRefDetailID");
            entity.Property(e => e.SavoucherRefId)
                .HasComment("RefID của chứng từ bán hàng")
                .HasColumnName("SAVoucherRefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.TacareerGroupId)
                .HasComment("ID nhóm ngành nghề")
                .HasColumnName("TACareerGroupID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax).HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK Thuế")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế nguyên tệ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasComment("% thuế GTGT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_SAReturnDetail_BankAccount");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_SAReturnDetail_BudgetItem");

            entity.HasOne(d => d.CashOutDiffAccountNumberFinanceNavigation).WithMany(p => p.SareturnDetailCashOutDiffAccountNumberFinanceNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberFinance)
                .HasConstraintName("FK_SAReturnDetail_Account_CashOutDiff");

            entity.HasOne(d => d.CashOutDiffAccountNumberManagementNavigation).WithMany(p => p.SareturnDetailCashOutDiffAccountNumberManagementNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CashOutDiffAccountNumberManagement)
                .HasConstraintName("FK_SAReturnDetail_Account_CashOutDiffManagement");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.ContractDetailId)
                .HasConstraintName("FK_SAReturnDetail_ContractDetailInventoryItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SAReturnDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.SareturnDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_SAReturnDetail_Account_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.SareturnDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_SAReturnDetail_Account_Debit");

            entity.HasOne(d => d.DiscountAccountNavigation).WithMany(p => p.SareturnDetailDiscountAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DiscountAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SAReturnDetail_ExpenseItem");

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAReturnDetail_InventoryItem");

            entity.HasOne(d => d.InvestmentProject).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.InvestmentProjectId)
                .HasConstraintName("FK_SAReturnDetail_InvestmentProject");

            entity.HasOne(d => d.Job).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_SAReturnDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_SAReturnDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_SAReturnDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.SareturnDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_SAReturnDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_SAReturnDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_SAReturnDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_SAReturnDetail_ProjectWork");

            entity.HasOne(d => d.PuinvoiceRef).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.PuinvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAReturnDetail_PUInvoice");

            entity.HasOne(d => d.PurchasePurpose).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.PurchasePurposeId)
                .HasConstraintName("FK_SAReturnDetail_PurchasePurpose");

            entity.HasOne(d => d.Ref).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SAReturnDetail_SAReturn");

            entity.HasOne(d => d.SaorderRefDetail).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.SaorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAReturnDetail_SAOrderDetail");

            entity.HasOne(d => d.SavoucherRef).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.SavoucherRefId)
                .HasConstraintName("FK_SAReturnDetail_SAVoucher");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.SareturnDetails)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_SAReturnDetail_TACareerGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SareturnDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAReturnDetail_Unit");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.SareturnDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<SareturnInwardReferenceDetail>(entity =>
        {
            entity.HasKey(e => e.ReferenceId);

            entity.ToTable("SAReturnInwardReferenceDetail", tb => tb.HasComment("Bảng lưu mối liên hệ giữa Bán trả lại và Nhập kho"));

            entity.Property(e => e.ReferenceId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ReferenceID");
            entity.Property(e => e.InwardRefDetailId)
                .HasComment("RefDetailID của chứng từ nhập kho từ bán trả lại")
                .HasColumnName("InwardRefDetailID");
            entity.Property(e => e.SareturnRefDetailId)
                .HasComment("RefDetailID của chứng từ bán trả lại")
                .HasColumnName("SAReturnRefDetailID");

            entity.HasOne(d => d.InwardRefDetail).WithMany(p => p.SareturnInwardReferenceDetails)
                .HasForeignKey(d => d.InwardRefDetailId)
                .HasConstraintName("FK_SAReturnInwardReferenceDetail_INInwardDetail");

            entity.HasOne(d => d.SareturnRefDetail).WithMany(p => p.SareturnInwardReferenceDetails)
                .HasForeignKey(d => d.SareturnRefDetailId)
                .HasConstraintName("FK_SAReturnInwardReferenceDetail_SAReturnDetail");
        });

        modelBuilder.Entity<SasaleGroup>(entity =>
        {
            entity.HasKey(e => e.SasaleGroupId).HasName("PK_SaleGroup");

            entity.ToTable("SASaleGroup", tb => tb.HasComment("Bảng danh mục Nhóm giá bán"));

            entity.HasIndex(e => new { e.SaleGroupCode, e.SasaleGroupId, e.SaleGroupName }, "IX_SASaleGroup")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.SasaleGroupId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SASaleGroupID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả các thông tin của nhóm giá bán");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.SaleGroupCode)
                .HasMaxLength(50)
                .HasComment("Mã số nhóm giá bán");
            entity.Property(e => e.SaleGroupName)
                .HasMaxLength(400)
                .HasComment("Tên nhóm giá bán");
        });

        modelBuilder.Entity<SasaleGroupDetail>(entity =>
        {
            entity.ToTable("SASaleGroupDetail", tb => tb.HasComment("Danh sách khách hàng trên danh mục Nhóm giá bán"));

            entity.Property(e => e.SasaleGroupDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SASaleGroupDetailID");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID khách hàng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.SasaleGroupId)
                .HasComment("FK")
                .HasColumnName("SASaleGroupID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SasaleGroupDetails)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SASaleGroupDetail_AccountObject");

            entity.HasOne(d => d.SasaleGroup).WithMany(p => p.SasaleGroupDetails)
                .HasForeignKey(d => d.SasaleGroupId)
                .HasConstraintName("FK_SASaleGroupDetail_SASaleGroup");
        });

        modelBuilder.Entity<Savoucher>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SAVoucher", tb =>
                {
                    tb.HasComment("Bảng master chứng từ bán hàng");
                    tb.HasTrigger("trg_SAVoucher_DataChanged");
                });

            entity.HasIndex(e => new { e.BranchId, e.DisplayOnBook, e.PostedDate }, "IX_SAVoucher_BranchID_PostedDate");

            entity.HasIndex(e => new { e.PostedDate, e.BranchId, e.DisplayOnBook }, "IX_SAVoucher_Composite").HasFillFactor(90);

            entity.HasIndex(e => new { e.PostedDate, e.RefDate, e.RefNoFinance, e.RefNoManagement }, "IX_SAVoucher_PostedDate");

            entity.HasIndex(e => new { e.RefNoFinance, e.BranchId }, "IX_SAVoucher_RefNoFinance");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ");
            entity.Property(e => e.AccountObjectId)
                .HasComment("ID khách hàng")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên khách hàng");
            entity.Property(e => e.AccountObjectTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BankName).HasMaxLength(255);
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Cabaamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmount");
            entity.Property(e => e.CabaamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("CABAAmountOC");
            entity.Property(e => e.CashBookPostedDate)
                .HasComment("Ngày ghi sổ thủ quỹ")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(3)
                .HasComment("Loại tiền")
                .HasColumnName("CurrencyID");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebtStatus)
                .HasDefaultValueSql("((0))")
                .HasComment("Tình trạng đòi nợ: (0=nợ bình thường;1=Nợ khó đòi;2=Nợ không thể đòi)");
            entity.Property(e => e.DisplayOnBook).HasComment("Xác định chứng từ được ghi vào sổ nào (0=Sổ tài chinh;1=Sổ quản trị;2=Cả hai)");
            entity.Property(e => e.DocumentIncluded)
                .HasMaxLength(255)
                .HasComment("Kèm theo chứng từ gốc");
            entity.Property(e => e.DueDate)
                .HasComment("Hạn thanh toán")
                .HasColumnType("datetime");
            entity.Property(e => e.DueDay).HasComment("Số ngày được nợ");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.EmployeeId)
                .HasComment("Nhân viên bán hàng")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExchangeRate)
                .HasComment("Tỉ giá hối đoái")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncludeInvoice).HasComment("Có lập kèm hóa đơn hay không?");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.IsInvoiceExported).HasComment("Đã xuất hóa đơn");
            entity.Property(e => e.IsInvoiceExportedLastYear).HasComment("Đã xuất hóa đơn năm trước");
            entity.Property(e => e.IsOutwardExported)
                .HasDefaultValueSql("((0))")
                .HasComment("Đã xuất hàng (0: Chưa xuất, 1: Đã xuất, 2: Để trắng <đối với hóa đơn bán hàng mà tất cả  mặt hàng đều có tính chất dịchvụ>)");
            entity.Property(e => e.IsPaid).HasComment("Đã thanh toán đủ.Với Chưa thanh toán, khi trả hết tiền thì cập nhật = 1");
            entity.Property(e => e.IsPostedCashBookFinance)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ tài chính)");
            entity.Property(e => e.IsPostedCashBookManagement)
                .HasDefaultValueSql("((0))")
                .HasComment("Trạng thái ghi sổ thủ quỹ (Sổ quản trị)");
            entity.Property(e => e.IsPostedFinance).HasComment("Trạng thái ghi sổ Sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Trạng thái ghi sổ Sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do nộp/Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OtherTerm)
                .HasMaxLength(255)
                .HasComment("Điều khoản khác");
            entity.Property(e => e.Payer)
                .HasMaxLength(128)
                .HasComment("Người nộp (Bán hàng thu tiền ngay) / Người liên hệ (Bán hàng chưa thu tiền)");
            entity.Property(e => e.PaymentTermId)
                .HasComment("Điều kiện thanh toán")
                .HasColumnName("PaymentTermID");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.PuvoucherRefId).HasColumnName("PUVoucherRefID");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefIdmshop).HasColumnName("RefIDMshop");
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ tài chính");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(20)
                .HasComment("Số chứng từ sổ quản trị");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.ShippingAddress)
                .HasMaxLength(255)
                .HasComment("Địa điểm giao hàng");
            entity.Property(e => e.SupplierId)
                .HasComment("Nhà cung cấp/Đơn vị ủy thác xuất khẩu")
                .HasColumnName("SupplierID");
            entity.Property(e => e.SupplierName)
                .HasMaxLength(400)
                .HasComment("Tên nhà cung cấp/đơn vị ủy thác xuất khẩu");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền thanh toán quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalAmountOc)
                .HasComment("Tổng tiền thanh toán")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalAmountOC");
            entity.Property(e => e.TotalDiscountAmount)
                .HasComment("Tổng tiền chiết khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDiscountAmountOc)
                .HasComment("Tổng tiền chiết khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalDiscountAmountOC");
            entity.Property(e => e.TotalExportTaxAmount)
                .HasComment("Tiền thuế xuất khẩu QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalExportTaxAmountOc)
                .HasComment("Tiền thuế xuất khẩu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalExportTaxAmountOC");
            entity.Property(e => e.TotalSaleAmount)
                .HasComment("Tổng tiền hàng quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalSaleAmountOc)
                .HasComment("Tổng tiền hàng")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalSaleAmountOC");
            entity.Property(e => e.TotalVatamount)
                .HasComment("Tổng tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmount");
            entity.Property(e => e.TotalVatamountOc)
                .HasComment("Tổng tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TotalVATAmountOC");

            entity.HasOne(d => d.AccountObject).WithMany(p => p.SavoucherAccountObjects)
                .HasForeignKey(d => d.AccountObjectId)
                .HasConstraintName("FK_SAVoucher_AccountObject");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.Savouchers)
                .HasForeignKey(d => d.BankAccountId)
                .HasConstraintName("FK_SAVoucher_BankAccount");

            entity.HasOne(d => d.Branch).WithMany(p => p.Savouchers)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAVoucher_OrganizationUnit");

            entity.HasOne(d => d.Currency).WithMany(p => p.Savouchers)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_SAVoucher_CCY");

            entity.HasOne(d => d.Employee).WithMany(p => p.SavoucherEmployees).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.PaymentTerm).WithMany(p => p.Savouchers)
                .HasForeignKey(d => d.PaymentTermId)
                .HasConstraintName("FK_SAVoucher_PaymentTerm");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SavoucherSuppliers)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_SAVoucher_AccountObject_Supplier");
        });

        modelBuilder.Entity<SavoucherDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SAVoucherDetail", tb => tb.HasComment("Chi tiết chứng từ bán hàng"));

            entity.HasIndex(e => e.ContractId, "IX_SAVoucherDetail_ContractID").HasFillFactor(90);

            entity.HasIndex(e => e.DebitAccount, "IX_SAVoucherDetail_DebitAccount").HasFillFactor(90);

            entity.HasIndex(e => e.InventoryItemId, "IX_SAVoucherDetail_InventoryItemID").HasFillFactor(90);

            entity.HasIndex(e => e.IsPromotion, "IX_SAVoucherDetail_IsPromotion");

            entity.HasIndex(e => e.OrderId, "IX_SAVoucherDetail_OrderID").HasFillFactor(90);

            entity.HasIndex(e => e.PuvoucherRefId, "IX_SAVoucherDetail_PUVoucherRefID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_SAVoucherDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.SainvoiceRefId, "IX_SAVoucherDetail_SAInvoiceRefID");

            entity.HasIndex(e => e.SaorderRefDetailId, "IX_SAVoucherDetail_SAOrderRefDetailID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("((0))")
                .HasComment("Thành tiền quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountAfterTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountOc)
                .HasComment("Thành tiền")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountOC");
            entity.Property(e => e.BudgetItemId)
                .HasComment("Mục thu")
                .HasColumnName("BudgetItemID");
            entity.Property(e => e.ContractDetailId).HasColumnName("ContractDetailID");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK Có");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.CustomField10).HasMaxLength(255);
            entity.Property(e => e.CustomField2).HasMaxLength(255);
            entity.Property(e => e.CustomField3).HasMaxLength(255);
            entity.Property(e => e.CustomField4).HasMaxLength(255);
            entity.Property(e => e.CustomField5).HasMaxLength(255);
            entity.Property(e => e.CustomField6).HasMaxLength(255);
            entity.Property(e => e.CustomField7).HasMaxLength(255);
            entity.Property(e => e.CustomField8).HasMaxLength(255);
            entity.Property(e => e.CustomField9).HasMaxLength(255);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK Nợ");
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DeductionsTaxAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DeductionsTaxAmountOC");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.DiscountAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chiết khấu");
            entity.Property(e => e.DiscountAmount)
                .HasComment("Tiền chiêt khấu quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountOc)
                .HasComment("Tiền chiêt khấu")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate)
                .HasComment("Tỉ lệ chiết khấu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExchangeRateOperator)
                .HasMaxLength(3)
                .HasDefaultValueSql("(N'*')")
                .HasComment("Toán tử quy đổi *=nhân;/=chia");
            entity.Property(e => e.ExpenseItemId)
                .HasComment("Khoản mục chi phí")
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.ExpiryDate)
                .HasComment("Hạn dùng")
                .HasColumnType("datetime");
            entity.Property(e => e.ExportTaxAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản thuế xuất khẩu");
            entity.Property(e => e.ExportTaxAmount)
                .HasComment("Tiền thuế xuất khẩu QĐ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExportTaxRate)
                .HasComment("% thuế xuất khẩu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Fobamount)
                .HasComment("Giá FOB (Giá tính thuế Xuất khẩu) QĐ")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("FOBAmount");
            entity.Property(e => e.GuarantyPeriod).HasMaxLength(100);
            entity.Property(e => e.IntransferRefDetailId)
                .HasComment("ID của dòng detail chứng từ chuyển kho")
                .HasColumnName("INTransferRefDetailID");
            entity.Property(e => e.IntransferRefId)
                .HasComment("ID của chứng từ chuyển kho")
                .HasColumnName("INTransferRefID");
            entity.Property(e => e.InventoryItemId)
                .HasComment("Mã hàng")
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.IsPromotion).HasComment("Là hàng khuyến mại");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.LoanagreementId).HasColumnName("LOANAgreementID");
            entity.Property(e => e.LotNo)
                .HasMaxLength(50)
                .HasComment("Số lô");
            entity.Property(e => e.MainConvertRate)
                .HasDefaultValueSql("((1))")
                .HasComment("Tỷ lệ chuyển đổi ra đơn vị chính")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.MainQuantity)
                .HasComment("Số lượng theo đơn vị chính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainQuantityBilled).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.MainUnitId)
                .HasComment("Đơn vị tính chính")
                .HasColumnName("MainUnitID");
            entity.Property(e => e.MainUnitPrice)
                .HasComment("Đơn giá theo đơn vị chính")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.NotInVatdeclaration)
                .HasComment("HHDV không tổng hợp trên tờ khai GTGT")
                .HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.OrderId)
                .HasComment("RefID của đơn đặt hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OutwardRefId).HasColumnName("OutwardRefID");
            entity.Property(e => e.PanelHeightQuantity)
                .HasComment("Chiều cao")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelLengthQuantity)
                .HasComment("Chiều dài")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelQuantity)
                .HasComment("Lượng, Số tấm")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelRadiusQuantity)
                .HasComment("Bán kính")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.PanelWidthQuantity)
                .HasComment("Chiều rộng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PuvoucherRefDetailId).HasColumnName("PUVoucherRefDetailID");
            entity.Property(e => e.PuvoucherRefId).HasColumnName("PUVoucherRefID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityBilled).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SainvoiceRefId)
                .HasComment("ID của hóa đơn xuất (mục đích dễ dàng join lấy lên Hóa đơn xuất)")
                .HasColumnName("SAInvoiceRefID");
            entity.Property(e => e.SaorderRefDetailId)
                .HasComment("RefDetailID của đơn đặt hàng")
                .HasColumnName("SAOrderRefDetailID");
            entity.Property(e => e.SaquoteRefDetailId).HasColumnName("SAQuoteRefDetailID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.StockId).HasColumnName("StockID");
            entity.Property(e => e.TacareerGroupId)
                .HasComment("ID nhóm ngành nghề")
                .HasColumnName("TACareerGroupID");
            entity.Property(e => e.UnitId)
                .HasComment("Đơn vị tính")
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá quy đổi")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitPriceAfterTax)
                .HasComment("Đơn giá sau thuế")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasComment("TK thuế GTGT")
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasComment("Tiền thuế quy đổi")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatdescription)
                .HasMaxLength(255)
                .HasColumnName("VATDescription");
            entity.Property(e => e.Vatrate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.Vatrate406)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate406");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");

            entity.HasOne(d => d.BudgetItem).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.BudgetItemId)
                .HasConstraintName("FK_SAVoucherDetail_BudgetItem");

            entity.HasOne(d => d.ContractDetail).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.ContractDetailId)
                .HasConstraintName("FK_SAVoucherDetail_ContractDetailInventoryItem");

            entity.HasOne(d => d.Contract).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SAVoucherDetail_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.SavoucherDetailCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount);

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.SavoucherDetailDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount);

            entity.HasOne(d => d.DiscountAccountNavigation).WithMany(p => p.SavoucherDetailDiscountAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DiscountAccount);

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SAVoucherDetail_ExpenseItem");

            entity.HasOne(d => d.ExportTaxAccountNavigation).WithMany(p => p.SavoucherDetailExportTaxAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.ExportTaxAccount);

            entity.HasOne(d => d.InventoryItem).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.InventoryItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SAVoucherDetail_InventoryItem");

            entity.HasOne(d => d.Job).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_SAVoucherDetail_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_SAVoucherDetail_ListItem");

            entity.HasOne(d => d.Loanagreement).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.LoanagreementId)
                .HasConstraintName("FK_SAVoucherDetail_LOANAgreement");

            entity.HasOne(d => d.MainUnit).WithMany(p => p.SavoucherDetailMainUnits)
                .HasForeignKey(d => d.MainUnitId)
                .HasConstraintName("FK_SAVoucherDetail_Unit_MainUnit");

            entity.HasOne(d => d.Order).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_SAVoucherDetail_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_SAVoucherDetail_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_SAVoucherDetail_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SAVoucherDetail_SAVoucher");

            entity.HasOne(d => d.SainvoiceRef).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.SainvoiceRefId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAVoucherDetail_SAInvoice");

            entity.HasOne(d => d.SaorderRefDetail).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.SaorderRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAVoucherDetail_SAOrderDetail");

            entity.HasOne(d => d.SaquoteRefDetail).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.SaquoteRefDetailId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_SAVoucherDetail_SAQuoteDetail");

            entity.HasOne(d => d.Stock).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.StockId)
                .HasConstraintName("FK_SAVoucherDetail_Stock");

            entity.HasOne(d => d.TacareerGroup).WithMany(p => p.SavoucherDetails)
                .HasForeignKey(d => d.TacareerGroupId)
                .HasConstraintName("FK_SAVoucherDetail_TACareerGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.SavoucherDetailUnits)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_SAVoucherDetail_Unit");

            entity.HasOne(d => d.VataccountNavigation).WithMany(p => p.SavoucherDetailVataccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.Vataccount);
        });

        modelBuilder.Entity<ScheduleAppointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK_ScheuleAppointment");

            entity.ToTable("ScheduleAppointment");

            entity.Property(e => e.AppointmentId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AppointmentID");
            entity.Property(e => e.AllDayEvent).HasDefaultValueSql("((0))");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.IsRemindAllUser)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsReminder).HasDefaultValueSql("((0))");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.OwnerLoginName).HasMaxLength(250);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Subject).HasMaxLength(255);
        });

        modelBuilder.Entity<ScheduleTask>(entity =>
        {
            entity.HasKey(e => e.TaskId);

            entity.ToTable("ScheduleTask");

            entity.Property(e => e.TaskId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("TaskID");
            entity.Property(e => e.CompletedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.ExpiredRepeatDate).HasColumnType("datetime");
            entity.Property(e => e.IsRemindAllUser)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsReminder).HasDefaultValueSql("((0))");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerId).HasColumnName("OwnerID");
            entity.Property(e => e.OwnerLoginName).HasMaxLength(250);
            entity.Property(e => e.ParentTaskId).HasColumnName("ParentTaskID");
            entity.Property(e => e.ReminderDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Subject).HasMaxLength(255);
            entity.Property(e => e.TaskPriorityId).HasColumnName("TaskPriorityID");
            entity.Property(e => e.TaskStatusId).HasColumnName("TaskStatusID");
            entity.Property(e => e.TaskTypeId).HasColumnName("TaskTypeID");
        });

        modelBuilder.Entity<SearchConfig>(entity =>
        {
            entity.HasKey(e => e.SearchResultConfigId);

            entity.ToTable("SearchConfig");

            entity.Property(e => e.SearchResultConfigId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SearchResultConfigID");
            entity.Property(e => e.AmountFinance).HasMaxLength(500);
            entity.Property(e => e.AmountManagement).HasMaxLength(500);
            entity.Property(e => e.AmountOcfinance)
                .HasMaxLength(500)
                .HasColumnName("AmountOCFinance");
            entity.Property(e => e.AmountOcmanagement)
                .HasMaxLength(500)
                .HasColumnName("AmountOCManagement");
            entity.Property(e => e.BankAccountId)
                .HasMaxLength(500)
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BranchId)
                .HasMaxLength(500)
                .HasColumnName("BranchID");
            entity.Property(e => e.CabarefNoFinance)
                .HasMaxLength(500)
                .HasColumnName("CABARefNoFinance");
            entity.Property(e => e.CabarefNoManagement)
                .HasMaxLength(500)
                .HasColumnName("CABARefNoManagement");
            entity.Property(e => e.ContractId)
                .HasMaxLength(500)
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount).HasMaxLength(500);
            entity.Property(e => e.CreditAccountObjectId)
                .HasMaxLength(500)
                .HasColumnName("CreditAccountObjectID");
            entity.Property(e => e.CurrencyId)
                .HasMaxLength(500)
                .HasColumnName("CurrencyID");
            entity.Property(e => e.DebitAccount).HasMaxLength(500);
            entity.Property(e => e.DebitAccountObjectId)
                .HasMaxLength(500)
                .HasColumnName("DebitAccountObjectID");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DetailContractId)
                .HasMaxLength(500)
                .HasColumnName("DetailContractID");
            entity.Property(e => e.DetailDescription).HasMaxLength(500);
            entity.Property(e => e.DetailExpenseItemId)
                .HasMaxLength(500)
                .HasColumnName("DetailExpenseItemID");
            entity.Property(e => e.DetailInventoryItemId)
                .HasMaxLength(500)
                .HasColumnName("DetailInventoryItemID");
            entity.Property(e => e.DetailJobId)
                .HasMaxLength(500)
                .HasColumnName("DetailJobID");
            entity.Property(e => e.DetailOrganizationUnitId)
                .HasMaxLength(500)
                .HasColumnName("DetailOrganizationUnitID");
            entity.Property(e => e.DetailTableName).HasMaxLength(100);
            entity.Property(e => e.DetailTableName1).HasMaxLength(100);
            entity.Property(e => e.DetailUnitId)
                .HasMaxLength(500)
                .HasColumnName("DetailUnitID");
            entity.Property(e => e.DiscountAmount).HasMaxLength(500);
            entity.Property(e => e.DiscountAmountOc)
                .HasMaxLength(500)
                .HasColumnName("DiscountAmountOC");
            entity.Property(e => e.DiscountRate).HasMaxLength(500);
            entity.Property(e => e.DisplayOnBook).HasMaxLength(500);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(500)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.ExpenseItemId)
                .HasMaxLength(500)
                .HasColumnName("ExpenseItemID");
            entity.Property(e => e.FilterCondition).HasMaxLength(500);
            entity.Property(e => e.FixedAssetId)
                .HasMaxLength(500)
                .HasColumnName("FixedAssetID");
            entity.Property(e => e.InstockId)
                .HasMaxLength(500)
                .HasColumnName("INStockID");
            entity.Property(e => e.InvDate).HasMaxLength(500);
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InventoryItemId)
                .HasMaxLength(500)
                .HasColumnName("InventoryItemID");
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.IsPostedFinance).HasMaxLength(500);
            entity.Property(e => e.IsPostedManagement).HasMaxLength(500);
            entity.Property(e => e.JobId)
                .HasMaxLength(500)
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasMaxLength(500)
                .HasColumnName("ListItemID");
            entity.Property(e => e.MasterAccountObjectId)
                .HasMaxLength(500)
                .HasColumnName("MasterAccountObjectID");
            entity.Property(e => e.MasterTableName).HasMaxLength(100);
            entity.Property(e => e.OrderId)
                .HasMaxLength(500)
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasMaxLength(500)
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.OutStockId)
                .HasMaxLength(500)
                .HasColumnName("OutStockID");
            entity.Property(e => e.PostedDate).HasMaxLength(500);
            entity.Property(e => e.ProjectWorkId)
                .HasMaxLength(500)
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.PucontractId)
                .HasMaxLength(500)
                .HasColumnName("PUContractID");
            entity.Property(e => e.PuorderRefId)
                .HasMaxLength(500)
                .HasColumnName("PUOrderRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasMaxLength(500)
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.Quantity).HasMaxLength(500);
            entity.Property(e => e.RefDate).HasMaxLength(500);
            entity.Property(e => e.RefId)
                .HasMaxLength(500)
                .HasColumnName("RefID");
            entity.Property(e => e.RefNoFinance).HasMaxLength(500);
            entity.Property(e => e.RefNoManagement).HasMaxLength(500);
            entity.Property(e => e.RefType).HasMaxLength(500);
            entity.Property(e => e.SupplyId)
                .HasMaxLength(500)
                .HasColumnName("SupplyID");
            entity.Property(e => e.TotalAmountFinance).HasMaxLength(500);
            entity.Property(e => e.TotalAmountManagement).HasMaxLength(500);
            entity.Property(e => e.TotalAmountOcfinance)
                .HasMaxLength(500)
                .HasColumnName("TotalAmountOCFinance");
            entity.Property(e => e.TotalAmountOcmanagement)
                .HasMaxLength(500)
                .HasColumnName("TotalAmountOCManagement");
            entity.Property(e => e.UnitId)
                .HasMaxLength(500)
                .HasColumnName("UnitID");
            entity.Property(e => e.UnitPriceFinance).HasMaxLength(500);
            entity.Property(e => e.UnitPriceManagement).HasMaxLength(500);
        });

        modelBuilder.Entity<SearchField>(entity =>
        {
            entity.HasKey(e => e.FieldName);

            entity.ToTable("SearchField");

            entity.Property(e => e.FieldName).HasMaxLength(128);
            entity.Property(e => e.ColumnLayout).HasMaxLength(128);
            entity.Property(e => e.Command).HasMaxLength(4000);
            entity.Property(e => e.Comment).HasMaxLength(128);
            entity.Property(e => e.DefaultOperator).HasMaxLength(8);
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.DictionaryType).HasMaxLength(128);
            entity.Property(e => e.ShowLayout)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.TableName).HasMaxLength(128);
        });

        modelBuilder.Entity<SearchRefType>(entity =>
        {
            entity.HasKey(e => e.RefType).HasName("PK_SearchRefType_1");

            entity.ToTable("SearchRefType");

            entity.Property(e => e.RefType).HasMaxLength(255);
            entity.Property(e => e.RefTypeName).HasMaxLength(100);
        });

        modelBuilder.Entity<SendEmailHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("SendEmailHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.EmailName).HasMaxLength(255);
            entity.Property(e => e.EmailSubject).HasMaxLength(1000);
            entity.Property(e => e.EmailTemplate).HasMaxLength(255);
            entity.Property(e => e.ReceiverEmail).HasMaxLength(255);
            entity.Property(e => e.ReceiverName).HasMaxLength(255);
            entity.Property(e => e.SendTime).HasColumnType("datetime");
            entity.Property(e => e.SenderEmail).HasMaxLength(255);
            entity.Property(e => e.SenderName).HasMaxLength(255);
            entity.Property(e => e.SubSystemCode).HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VoucherNo).HasMaxLength(100);
        });

        modelBuilder.Entity<SignInfo>(entity =>
        {
            entity.HasKey(e => e.BranchId).HasName("PK__SignInfo__A1682FA571E3BCC1");

            entity.ToTable("SignInfo");

            entity.Property(e => e.BranchId)
                .ValueGeneratedNever()
                .HasColumnName("BranchID");
            entity.Property(e => e.SignServer).HasMaxLength(255);
        });

        modelBuilder.Entity<Ssbussiness>(entity =>
        {
            entity.ToTable("SSBussiness");

            entity.Property(e => e.SsbussinessId)
                .ValueGeneratedNever()
                .HasColumnName("SSBussinessID");
            entity.Property(e => e.ActiveControlConfig).HasMaxLength(255);
            entity.Property(e => e.ActiveTabKey)
                .HasMaxLength(255)
                .HasComment("tabKey với trường hợp form chứa nghiệp vụ hiện thị dạng tab management");
            entity.Property(e => e.DisplaySearch)
                .HasMaxLength(500)
                .HasComment("Nội dung hiển thị");
            entity.Property(e => e.IsDbopen)
                .HasComment("Hiển thị trong trường hợp DB có kết nối không. Trường hợp NULL tương đương với có. 1 - Có, 0 - Không")
                .HasColumnName("IsDBOpen");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Path).HasComment("Đương dẫn đến nghiệp vụ");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.ToolbarKey)
                .HasMaxLength(255)
                .HasComment("Key theo toolbar management trên form main");
            entity.Property(e => e.Type).HasComment("Loại nghiệp vụ: ' Danh mục - Dictionary = 0 ' Nghiệp vụ - Voucher = 1 ' Nghiệp vụ mở rộng - VoucherPlus = 6 ' Hệ thống - System = 2 ' Tiện ích - Ultil = 3 ' Trợ giúp - Help = 4 ' Tệp - Start = 5 ' Tùy chọn - [Option] = 7");
            entity.Property(e => e.UnsignDisplaySearch).HasMaxLength(500);
        });

        modelBuilder.Entity<SsbussinessDetail>(entity =>
        {
            entity.ToTable("SSBussinessDetail");

            entity.HasIndex(e => e.SsbussinessId, "IX_SSBussinessDetail_SSBussinessID");

            entity.HasIndex(e => e.SskeywordId, "IX_SSBussinessDetail_SSKeywordID");

            entity.Property(e => e.SsbussinessDetailId)
                .ValueGeneratedNever()
                .HasColumnName("SSBussinessDetailID");
            entity.Property(e => e.SsbussinessId).HasColumnName("SSBussinessID");
            entity.Property(e => e.SskeywordId)
                .HasComment("Từ khóa tìm kiếm")
                .HasColumnName("SSKeywordID");

            entity.HasOne(d => d.Ssbussiness).WithMany(p => p.SsbussinessDetails)
                .HasForeignKey(d => d.SsbussinessId)
                .HasConstraintName("FK_SSBussinessDetail_SSBussiness");

            entity.HasOne(d => d.Sskeyword).WithMany(p => p.SsbussinessDetails)
                .HasForeignKey(d => d.SskeywordId)
                .HasConstraintName("FK_SSBussinessDetail_SSKeyword");
        });

        modelBuilder.Entity<SsbussinessUserActived>(entity =>
        {
            entity.ToTable("SSBussinessUserActived");

            entity.Property(e => e.SsbussinessUserActivedId)
                .ValueGeneratedNever()
                .HasColumnName("SSBussinessUserActivedID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.SsbussinessId).HasColumnName("SSBussinessID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<Sskeyword>(entity =>
        {
            entity.ToTable("SSKeyword");

            entity.Property(e => e.SskeywordId)
                .ValueGeneratedNever()
                .HasColumnName("SSKeywordID");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.UnsignValue).HasMaxLength(500);
            entity.Property(e => e.Value)
                .HasMaxLength(500)
                .HasComment("Từ khóa nghiệp vụ");
        });

        modelBuilder.Entity<SslastedAction>(entity =>
        {
            entity.ToTable("SSLastedAction");

            entity.Property(e => e.SslastedActionId)
                .ValueGeneratedNever()
                .HasColumnName("SSLastedActionID");
            entity.Property(e => e.SsbussinessId)
                .HasComment("Nghiệp vụ gần nhất")
                .HasColumnName("SSBussinessID");
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .HasComment("Người dùng tìm kiếm")
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.ToTable("Stock", tb =>
                {
                    tb.HasComment("Danh mục Kho");
                    tb.HasTrigger("trg_Stock_DataChanged");
                });

            entity.HasIndex(e => e.StockCode, "IX_Stock_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.StockId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK kho")
                .HasColumnName("StockID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.InventoryAccount).HasMaxLength(20);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.StockCode)
                .HasMaxLength(20)
                .HasComment("Mã kho");
            entity.Property(e => e.StockName)
                .HasMaxLength(128)
                .HasComment("Tên kho");

            entity.HasOne(d => d.Branch).WithMany(p => p.Stocks)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_Stock_OrganizationUnit");

            entity.HasOne(d => d.InventoryAccountNavigation).WithMany(p => p.Stocks)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.InventoryAccount)
                .HasConstraintName("FK_Stock_Account");
        });

        modelBuilder.Entity<Suadjustment>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SUAdjustment", tb => tb.HasComment("Điều chỉnh CCDC"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUAdjustment_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do điều chỉnh");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");

            entity.HasOne(d => d.Branch).WithMany(p => p.Suadjustments)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_SUAdjustment_OrganizationUnit");
        });

        modelBuilder.Entity<SuadjustmentDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SUAdjustmentDetail", tb => tb.HasComment("Chi tiết điều chỉnh CCDC"));

            entity.HasIndex(e => e.RefId, "IX_SUAdjustmentDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chờ phân bổ");
            entity.Property(e => e.CurrentRemainingAllocationTime).HasComment("Số kỳ phân bổ còn lại TRƯỚC điều chỉnh");
            entity.Property(e => e.CurrentRemainingAmount)
                .HasComment("Giá trị còn lại TRƯỚC điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffAllocationTime)
                .HasComment("Chênh lệch số kỳ phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiffRemainingAmount)
                .HasComment("Chênh lệch giá trị còn lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.NewRemainingAllocationTime).HasComment("Số kỳ phân bổ còn lại SAU điều chỉnh");
            entity.Property(e => e.NewRemainingAmount)
                .HasComment("Giá trị còn lại SAU điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.SupplyId)
                .HasComment("Mã CCCDC")
                .HasColumnName("SupplyID");
            entity.Property(e => e.TermlyAllocationAmount)
                .HasComment("Số tiền phân bổ hàng kỳ")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.AllocationAccountNavigation).WithMany(p => p.SuadjustmentDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AllocationAccount)
                .HasConstraintName("FK_SUAdjustmentDetail_Account");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuadjustmentDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAdjustmentDetail_SUAdjustment");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuadjustmentDetails)
                .HasForeignKey(d => d.SupplyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUAdjustmentDetail_SUIncrement");
        });

        modelBuilder.Entity<SuadjustmentDetailVoucher>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SUAdjustmentDetailVoucher", tb => tb.HasComment("Tập hợp các chứng từ liên quan Tăng, giảm CCDC"));

            entity.HasIndex(e => e.RefId, "IX_SUAdjustmentDetailVoucher_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ liên quan")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefType).HasComment("Loại chứng từ liên quan");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuadjustmentDetailVouchers)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAdjustmentDetailVoucher_SUAdjustment");
        });

        modelBuilder.Entity<Suallocation>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SUAllocation", tb => tb.HasComment("Bảng Master: Phân bổ công cụ dụng cụ"));

            entity.HasIndex(e => new { e.BranchId, e.RefNo }, "IX_SUAllocation_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUAllocation_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.IsGetSupplyAllocated)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Month)
                .HasDefaultValueSql("((1))")
                .HasComment("Tháng");
            entity.Property(e => e.PostedDate)
                .HasComment("Ngày hạch toán")
                .HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng tiền phân bổ quy đổi")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Year)
                .HasDefaultValueSql("((2014))")
                .HasComment("Năm");

            entity.HasOne(d => d.Branch).WithMany(p => p.Suallocations)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_SUAllocation_OrganizationUnit");
        });

        modelBuilder.Entity<SuallocationDetailExpense>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("SUAllocationDetailExpense", tb => tb.HasComment("Bảng xác định mức chi phí Phân bổ CCDC"));

            entity.HasIndex(e => e.RefId, "IX_SUAllocationDetailExpense_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ CCDC đang dùng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK - ID")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainingAmount)
                .HasComment("Giá trị còn lại của CCDC giảm trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SupplyCategoryId).HasColumnName("SupplyCategoryID");
            entity.Property(e => e.SupplyId).HasColumnName("SupplyID");
            entity.Property(e => e.TotalAllocationAmount)
                .HasComment("Tổng số tiền phân bổ")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuallocationDetailExpenses)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAllocationDetailExpense_SUAllocation");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuallocationDetailExpenses)
                .HasForeignKey(d => d.SupplyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUAllocationDetailExpense_SUIncrement");
        });

        modelBuilder.Entity<SuallocationDetailPost>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_SUAllocationDetailAccount");

            entity.ToTable("SUAllocationDetailPost", tb => tb.HasComment("Bảng chi tiết hạch toán giá trị phân bổ"));

            entity.HasIndex(e => e.RefId, "IX_SUAllocationDetailPost_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasComment("Số tiền")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ContractId)
                .HasComment("Hợp đồng")
                .HasColumnName("ContractID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasComment("TK chờ phân bổ");
            entity.Property(e => e.CreditAccountObjectId)
                .HasComment("Đối tượng Có")
                .HasColumnName("CreditAccountObjectID");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.DebitAccountObjectId)
                .HasComment("Đối tượng Nợ")
                .HasColumnName("DebitAccountObjectID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.JobId)
                .HasComment("ĐT tập hợp chi phí")
                .HasColumnName("JobID");
            entity.Property(e => e.ListItemId)
                .HasComment("Mã thống kê")
                .HasColumnName("ListItemID");
            entity.Property(e => e.OrderId)
                .HasComment("Đơn hàng")
                .HasColumnName("OrderID");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.ProjectWorkId)
                .HasComment("Công trình/vụ việc")
                .HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Sắp xếp");
            entity.Property(e => e.UnResonableCost).HasComment("Chi phí không hợp lý");

            entity.HasOne(d => d.Contract).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SUAllocationDetailPost_Contract");

            entity.HasOne(d => d.CreditAccountNavigation).WithMany(p => p.SuallocationDetailPostCreditAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CreditAccount)
                .HasConstraintName("FK_SUAllocationDetailAccount_Account_CreditAccount");

            entity.HasOne(d => d.CreditAccountObject).WithMany(p => p.SuallocationDetailPostCreditAccountObjects)
                .HasForeignKey(d => d.CreditAccountObjectId)
                .HasConstraintName("FK_SUAllocationDetailPost_AccountObject_Credit");

            entity.HasOne(d => d.DebitAccountNavigation).WithMany(p => p.SuallocationDetailPostDebitAccountNavigations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.DebitAccount)
                .HasConstraintName("FK_SUAllocationDetailAccount_Account_DebitAccount");

            entity.HasOne(d => d.DebitAccountObject).WithMany(p => p.SuallocationDetailPostDebitAccountObjects)
                .HasForeignKey(d => d.DebitAccountObjectId)
                .HasConstraintName("FK_SUAllocationDetailPost_AccountObject_Debit");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SUAllocationDetailAccount_ExpenseItem");

            entity.HasOne(d => d.Job).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK_SUAllocationDetailPost_Job");

            entity.HasOne(d => d.ListItem).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.ListItemId)
                .HasConstraintName("FK_SUAllocationDetailAccount_ListItem");

            entity.HasOne(d => d.Order).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_SUAllocationDetailPost_SAOrder");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_SUAllocationDetailPost_OrganizationUnit");

            entity.HasOne(d => d.ProjectWork).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.ProjectWorkId)
                .HasConstraintName("FK_SUAllocationDetailPost_ProjectWork");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuallocationDetailPosts)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAllocationDetailAccount_SUAllocation");
        });

        modelBuilder.Entity<SuallocationDetailTable>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_SUAllocationDetail");

            entity.ToTable("SUAllocationDetailTable", tb => tb.HasComment("Bảng phân bổ chi phí CCDC"));

            entity.HasIndex(e => e.RefId, "IX_SUAllocationDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.SortOrder, "IX_SUAllocationDetail_SortOrder").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount)
                .HasComment("Số tiền phân bổ cho từng đối tượng phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationObjectId)
                .HasComment("Đối tượng phân bổ")
                .HasColumnName("AllocationObjectID");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ (%)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Sắp xếp");
            entity.Property(e => e.SupplyId)
                .HasComment("ID của CCDC")
                .HasColumnName("SupplyID");
            entity.Property(e => e.TotalAllocationAmount)
                .HasComment("Chi phí phân bổ (Tổng giá trị phân bổ của 1 CCDC)")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.SuallocationDetailTables)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_SUAllocationDetail_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SuallocationDetailTables)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SUAllocationDetailTable_ExpenseItem");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuallocationDetailTables)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAllocationDetail_SUAllocation");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuallocationDetailTables)
                .HasForeignKey(d => d.SupplyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUAllocationDetail_SUIncrement");
        });

        modelBuilder.Entity<Suaudit>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_SUInventory");

            entity.ToTable("SUAudit", tb => tb.HasComment("Kiêm kê công cụ dụng cụ"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUAudit_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.BalanceDate)
                .HasComment("Ngày kiểm kê")
                .HasColumnType("datetime");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.IsExecuted).HasComment("Đã xử lý chênh lệch");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số kiểm kê");
            entity.Property(e => e.RefTime)
                .HasComment("Giờ kiểm kê")
                .HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.Summary)
                .HasMaxLength(255)
                .HasComment("Kết luận sau kiểm kê");

            entity.HasOne(d => d.Branch).WithMany(p => p.Suaudits)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUInventory_OrganizationUnit");
        });

        modelBuilder.Entity<SuauditDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_SUInventoryDetail");

            entity.ToTable("SUAuditDetail", tb => tb.HasComment("Chi tiết kiểm kê"));

            entity.HasIndex(e => e.RefId, "IX_SUAuditDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Action).HasComment("Hành động: 0 = Ghi tăng; 1 = Ghi giảm; 2: Không xử lý");
            entity.Property(e => e.DamageQuantity)
                .HasComment("Số lượng bị hỏng")
                .HasColumnType("decimal(22, 8)")
                .HasColumnName("damageQuantity");
            entity.Property(e => e.DiffQuantity)
                .HasComment("Số lượng chênh lệch")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ExecuteQuantity)
                .HasComment("Số lượng xử lý")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.GoodQuantity)
                .HasComment("Số lượng còn tốt")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.QuantityInventory)
                .HasComment("Số lượng kiểm kê")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityOnBook)
                .HasComment("Số lượng trên số kế toán")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.SupplyId)
                .HasComment("Mã CCDC")
                .HasColumnName("SupplyID");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SuauditDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUInventoryDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuauditDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAuditDetail_SUAudit");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuauditDetails)
                .HasForeignKey(d => d.SupplyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUAuditDetail_SUIncrement");
        });

        modelBuilder.Entity<SuauditMemberDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_SUInventoryMemberDetail");

            entity.ToTable("SUAuditMemberDetail", tb => tb.HasComment("Thành viên kiểm kê"));

            entity.HasIndex(e => e.RefId, "IX_SUAuditMemberDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Họ và tên");
            entity.Property(e => e.Position)
                .HasMaxLength(128)
                .HasComment("Chức vụ");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Representative)
                .HasMaxLength(128)
                .HasComment("Đại diện");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("('((0))')");

            entity.HasOne(d => d.Ref).WithMany(p => p.SuauditMemberDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUAuditMemberDetail_SUAudit");
        });

        modelBuilder.Entity<Sudecrement>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("SUDecrement", tb => tb.HasComment("Ghi giảm CCDC"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUDecrement").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUDecrement_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Ghi tăng công cụ dụng cụ")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalAmount)
                .HasComment("Tổng Giá trị còn lại của CCDC ghi giảm")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Branch).WithMany(p => p.Sudecrements)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUDecrement_OrganizationUnit");
        });

        modelBuilder.Entity<SudecrementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_SUDerementDetail");

            entity.ToTable("SUDecrementDetail", tb => tb.HasComment("Chi tiết ghi giảm CCDC"));

            entity.HasIndex(e => e.RefId, "IX_SUDecrementDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.DecrementAmount)
                .HasComment("giá trị ghi giảm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DecrementQuantity)
                .HasComment("Số lượng ghi giảm")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Reason)
                .HasMaxLength(255)
                .HasComment("Lý do ghi giảm");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainingDecrementAmount)
                .HasComment("Giá trị còn lại của CCDC giảm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.SuallocationId).HasColumnName("SUAllocationID");
            entity.Property(e => e.SuauditRefId).HasColumnName("SUAuditRefID");
            entity.Property(e => e.SupplyId)
                .HasComment("Mã CCDC")
                .HasColumnName("SupplyID");
            entity.Property(e => e.UseQuantity)
                .HasComment("Số lượng đang dùng")
                .HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SudecrementDetails)
                .HasForeignKey(d => d.OrganizationUnitId)
                .HasConstraintName("FK_SUDecrementDetail_OrganizationUnit");

            entity.HasOne(d => d.Ref).WithMany(p => p.SudecrementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUDecrementDetail_SUDecrement");

            entity.HasOne(d => d.Supply).WithMany(p => p.SudecrementDetails)
                .HasForeignKey(d => d.SupplyId)
                .HasConstraintName("FK_SUDecrementDetail_SUIncrement1");
        });

        modelBuilder.Entity<Suincrement>(entity =>
        {
            entity.HasKey(e => e.SupplyId);

            entity.ToTable("SUIncrement", tb => tb.HasComment("Ghi tăng công cụ dụng cụ"));

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUIncrement").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUIncrement_RefNo");

            entity.Property(e => e.SupplyId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SupplyID");
            entity.Property(e => e.AllocatedAmount)
                .HasComment("Giá trị đã phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationAccount)
                .HasMaxLength(20)
                .HasComment("Tài khoản chờ phân bổ");
            entity.Property(e => e.AllocationTime).HasComment("Số kỳ phân bổ");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền/Giá trị CCDC")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.FadecrementRefId).HasColumnName("FADecrementRefID");
            entity.Property(e => e.InpurefDetailId).HasColumnName("INPURefDetailID");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.ReasonIncrement).HasMaxLength(255);
            entity.Property(e => e.RefDate)
                .HasComment("Ngày ghi tăng")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ ghi tăng");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.RemaingAmount)
                .HasComment("Giá trị còn lại")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RemainingAllocationTime).HasComment("Số kỳ phân bổ còn lại");
            entity.Property(e => e.SuauditRefId).HasColumnName("SUAuditRefID");
            entity.Property(e => e.SupplyCategoryId)
                .HasComment("Loại CCDC")
                .HasColumnName("SupplyCategoryID");
            entity.Property(e => e.SupplyCode)
                .HasMaxLength(25)
                .HasComment("Mã CCDC");
            entity.Property(e => e.SupplyGroup).HasMaxLength(255);
            entity.Property(e => e.SupplyName)
                .HasMaxLength(255)
                .HasComment("Tên CCDC");
            entity.Property(e => e.SupplyOtherBookId).HasColumnName("SupplyOtherBookID");
            entity.Property(e => e.TermlyAllocationAmount)
                .HasComment("Số tiền phân bổ hàng kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.AllocationAccountNavigation).WithMany(p => p.Suincrements)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.AllocationAccount)
                .HasConstraintName("FK_SUIncrement_Account_Allocation");

            entity.HasOne(d => d.Branch).WithMany(p => p.Suincrements)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUIncrement_OrganizationUnit");

            entity.HasOne(d => d.SupplyCategory).WithMany(p => p.Suincrements)
                .HasForeignKey(d => d.SupplyCategoryId)
                .HasConstraintName("FK_SUIncrement_SupplyCategory");
        });

        modelBuilder.Entity<SuincrementDetail>(entity =>
        {
            entity.HasKey(e => e.SupplyDetailId);

            entity.ToTable("SUIncrementDetail", tb => tb.HasComment("Mô tả chi tiết"));

            entity.Property(e => e.SupplyDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SupplyDetailID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.NumberNo)
                .HasMaxLength(100)
                .HasComment("Số hiệu");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.SupplyId)
                .HasComment("FK")
                .HasColumnName("SupplyID");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuincrementDetails)
                .HasForeignKey(d => d.SupplyId)
                .HasConstraintName("FK_SUIncrementDetail_SUIncrement");
        });

        modelBuilder.Entity<SuincrementDetailAllocation>(entity =>
        {
            entity.HasKey(e => e.SupplyDetailId);

            entity.ToTable("SUIncrementDetailAllocation", tb => tb.HasComment("Bảng đối tượng phân bổ chi Ghi tăng CCDC"));

            entity.Property(e => e.SupplyDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SupplyDetailID");
            entity.Property(e => e.AllocationRate)
                .HasComment("Tỷ lệ phân bổ (%)")
                .HasColumnType("decimal(9, 4)");
            entity.Property(e => e.CostAccount)
                .HasMaxLength(20)
                .HasComment("TK chi phí");
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.ObjectId)
                .HasComment("ID của đối tượng phân bổ")
                .HasColumnName("ObjectID");
            entity.Property(e => e.ObjectType).HasComment("Loại đối tượng. 0: ĐT tập hợp CP; 1: Công trình; 2: Đơn hàng; 3: Hợp đồng; 4: Đơn vị");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((1))")
                .HasComment("Số thứ tự");
            entity.Property(e => e.SupplyId)
                .HasComment("FK")
                .HasColumnName("SupplyID");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.SuincrementDetailAllocations)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_SUIncrementDetailAllocation_Account");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SuincrementDetailAllocations)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SUIncrementDetailAllocation_ExpenseItem");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuincrementDetailAllocations)
                .HasForeignKey(d => d.SupplyId)
                .HasConstraintName("FK_SUIncrementDetailAllocation_SUIncrement");
        });

        modelBuilder.Entity<SuincrementDetailDepartment>(entity =>
        {
            entity.HasKey(e => e.SupplyDetailId);

            entity.ToTable("SUIncrementDetailDepartment", tb => tb.HasComment("Chi tiết đơn vị sử dụng"));

            entity.Property(e => e.SupplyDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SupplyDetailID");
            entity.Property(e => e.AllocatedAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationTime).HasComment("Mẹo: lấy AllocationTime trên master vào dòng đầu tiên (Phục vụ ghi sổ)");
            entity.Property(e => e.Amount)
                .HasComment("Thành tiền/Giá trị CCDC")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrganizationUnitId)
                .HasComment("Đơn vị sử dụng")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RemainingAllocationTime).HasComment("Mẹo: lấy RemainingAllocationTime trên master vào dòng đầu tiên (Phục vụ ghi sổ)");
            entity.Property(e => e.SupplyId)
                .HasComment("FK")
                .HasColumnName("SupplyID");
            entity.Property(e => e.UnitPrice)
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");

            entity.HasOne(d => d.OrganizationUnit).WithMany(p => p.SuincrementDetailDepartments)
                .HasForeignKey(d => d.OrganizationUnitId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SUIncrementDetailDepartment_OrganizationUnit");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuincrementDetailDepartments)
                .HasForeignKey(d => d.SupplyId)
                .HasConstraintName("FK_SUIncrementDetailDepartment_SUIncrement");
        });

        modelBuilder.Entity<SuincrementDetailSource>(entity =>
        {
            entity.HasKey(e => e.SupplyDetailId);

            entity.ToTable("SUIncrementDetailSource", tb => tb.HasComment("Nguồn gôc hình thành CCDC"));

            entity.Property(e => e.SupplyDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SupplyDetailID");
            entity.Property(e => e.CreditAccount).HasMaxLength(20);
            entity.Property(e => e.DebitAccount).HasMaxLength(20);
            entity.Property(e => e.FixedAssetId).HasColumnName("FixedAssetID");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("ID của chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.RefType).HasComment("Loại chúng từ");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.SupplyId)
                .HasComment("FK")
                .HasColumnName("SupplyID");

            entity.HasOne(d => d.Supply).WithMany(p => p.SuincrementDetailSources)
                .HasForeignKey(d => d.SupplyId)
                .HasConstraintName("FK_SUIncrementDetailSource_SUIncrement");
        });

        modelBuilder.Entity<SupplyCategory>(entity =>
        {
            entity.ToTable("SupplyCategory", tb => tb.HasComment("Loại Công cụ dụng cụ"));

            entity.HasIndex(e => e.SupplyCategoryCode, "IX_SupplyCategory_SupplyCategoryCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.SupplyCategoryId)
                .ValueGeneratedNever()
                .HasColumnName("SupplyCategoryID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.Grade).HasDefaultValueSql("((0))");
            entity.Property(e => e.MisacodeId)
                .HasMaxLength(100)
                .HasColumnName("MISACodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.SortMisacodeId)
                .HasMaxLength(100)
                .HasComment("Cột dùng để sort trên báo cáo. Không sử dụng trên giao diện.")
                .HasColumnName("SortMISACodeID");
            entity.Property(e => e.SupplyCategoryCode)
                .HasMaxLength(20)
                .HasComment("Mã loại CCDC");
            entity.Property(e => e.SupplyCategoryName)
                .HasMaxLength(128)
                .HasComment("Tên loại CCDC");
        });

        modelBuilder.Entity<SupplyLedger>(entity =>
        {
            entity.ToTable("SupplyLedger");

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_SupplyLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.Property(e => e.SupplyLedgerId).HasColumnName("SupplyLedgerID");
            entity.Property(e => e.AllocationAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.DecrementAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DecrementQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IncrementAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IncrementQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.OrganizationUnitId).HasColumnName("OrganizationUnitID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.SupplyCategoryId).HasColumnName("SupplyCategoryID");
            entity.Property(e => e.SupplyCode).HasMaxLength(25);
            entity.Property(e => e.SupplyId).HasColumnName("SupplyID");
            entity.Property(e => e.SupplyName).HasMaxLength(255);
            entity.Property(e => e.TermlyAllocationAmount).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<Sutransfer>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_SUTransfer_RefID");

            entity.ToTable("SUTransfer", tb => tb.HasComment("Bảng Master của chứng từ điều chuyển CCDC\r\nLà Master của  bảng detail sau:\r\n -SUTransferDetail\r\n"));

            entity.HasIndex(e => new { e.BranchId, e.RefNo }, "IX_SUTransfer_BranchID").HasFillFactor(90);

            entity.HasIndex(e => new { e.RefNo, e.BranchId }, "IX_SUTransfer_RefNo");

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryName)
                .HasMaxLength(128)
                .HasComment("Người ban giao");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chinh;1=Sổ quản trị");
            entity.Property(e => e.EditVersion)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasComment("EditVersion");
            entity.Property(e => e.IsPostedFinance).HasComment("Ghi vào sổ tài chính");
            entity.Property(e => e.IsPostedManagement).HasComment("Ghi vào sổ quản trị");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Lý do điều chuyển");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReceiptName)
                .HasMaxLength(128)
                .HasComment("Người tiếp nhận");
            entity.Property(e => e.RefDate)
                .HasComment("Ngày biên bản giao nhận")
                .HasColumnType("datetime");
            entity.Property(e => e.RefNo)
                .HasMaxLength(20)
                .HasComment("Số biên bản giao nhận");
            entity.Property(e => e.RefOrder).HasComment("Số thứ tự nhập chứng từ");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ (Lấy từ bảng RefType)");
            entity.Property(e => e.TotalQuantity)
                .HasComment("Tổng số lượng")
                .HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.Branch).WithMany(p => p.Sutransfers)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("FK_SUTransfer_OrganizationUnit");
        });

        modelBuilder.Entity<SutransferDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_SUTransferDetail_1");

            entity.ToTable("SUTransferDetail", tb => tb.HasComment("Bảng Detail của chứng từ điều chuyển CCDC"));

            entity.HasIndex(e => e.FromOrganizationUnitId, "IX_SUTransferDetail_FromDepartmentID").HasFillFactor(90);

            entity.HasIndex(e => e.RefId, "IX_SUTransferDetail_RefID").HasFillFactor(90);

            entity.HasIndex(e => e.SortOrder, "IX_SUTransferDetail_SortOrder").HasFillFactor(90);

            entity.HasIndex(e => e.ToOrganizationUnitId, "IX_SUTransferDetail_ToDepartmentID").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.CostAccount).HasMaxLength(20);
            entity.Property(e => e.ExpenseItemId).HasColumnName("ExpenseItemID");
            entity.Property(e => e.FromOrganizationUnitId)
                .HasComment("Từ đơn vị")
                .HasColumnName("FromOrganizationUnitID");
            entity.Property(e => e.JobId).HasColumnName("JobID");
            entity.Property(e => e.ListItemId).HasColumnName("ListItemID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProjectWorkId).HasColumnName("ProjectWorkID");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp các dòng chi tiết");
            entity.Property(e => e.SupplyId)
                .HasComment("Mã CCDC")
                .HasColumnName("SupplyID");
            entity.Property(e => e.ToOrganizationUnitId)
                .HasComment("Đến đơn vị")
                .HasColumnName("ToOrganizationUnitID");
            entity.Property(e => e.TransferQuantity)
                .HasComment("Số lượng chuyển")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.UseQuantity)
                .HasComment("Số lượng đang dùng")
                .HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.Contract).WithMany(p => p.SutransferDetails)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_SUTransferDetail_Contract");

            entity.HasOne(d => d.CostAccountNavigation).WithMany(p => p.SutransferDetails)
                .HasPrincipalKey(p => p.AccountNumber)
                .HasForeignKey(d => d.CostAccount)
                .HasConstraintName("FK_Account_SUTransferDetail_CostAccount");

            entity.HasOne(d => d.ExpenseItem).WithMany(p => p.SutransferDetails)
                .HasForeignKey(d => d.ExpenseItemId)
                .HasConstraintName("FK_SUTransferDetail_ExpenseItem");

            entity.HasOne(d => d.FromOrganizationUnit).WithMany(p => p.SutransferDetailFromOrganizationUnits)
                .HasForeignKey(d => d.FromOrganizationUnitId)
                .HasConstraintName("FK_SUTransferDetail_OrganizationUnit_FromDepartmentID");

            entity.HasOne(d => d.Ref).WithMany(p => p.SutransferDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_SUTransferDetail_SUTransfer");

            entity.HasOne(d => d.Supply).WithMany(p => p.SutransferDetails)
                .HasForeignKey(d => d.SupplyId)
                .HasConstraintName("FK_SUTransferDetail_SUIncrement");

            entity.HasOne(d => d.ToOrganizationUnit).WithMany(p => p.SutransferDetailToOrganizationUnits)
                .HasForeignKey(d => d.ToOrganizationUnitId)
                .HasConstraintName("FK_SUTransferDetail_OrganizationUnit_ToDepartmentID");
        });

        modelBuilder.Entity<SyncDownLoadTime>(entity =>
        {
            entity.HasKey(e => new { e.CompanyTaxCode, e.TableName, e.GetServerType });

            entity.ToTable("SyncDownLoadTime");

            entity.Property(e => e.CompanyTaxCode).HasMaxLength(100);
            entity.Property(e => e.TableName).HasMaxLength(100);
            entity.Property(e => e.LastSyncTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<SysNewPostedVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SysNewPostedVoucher");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNoFinance).HasMaxLength(20);
            entity.Property(e => e.RefNoManagement).HasMaxLength(20);
        });

        modelBuilder.Entity<SysReportStyle>(entity =>
        {
            entity.HasKey(e => e.StyleId);

            entity.ToTable("SysReportStyle");

            entity.Property(e => e.StyleId)
                .ValueGeneratedNever()
                .HasColumnName("StyleID");
            entity.Property(e => e.BottomMargin).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DefaultStyleFileName).HasMaxLength(255);
            entity.Property(e => e.DisplayLogoRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.HieroglyphsStyleFileName).HasMaxLength(255);
            entity.Property(e => e.LeftMargin).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LicenseInfoWidth)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.StyleName).HasMaxLength(255);
            entity.Property(e => e.TopMargin).HasColumnType("decimal(18, 4)");
        });

        modelBuilder.Entity<SysVoucherTemplateUserDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sysVoucherTemplateUserDetail");

            entity.Property(e => e.LayoutId).HasColumnName("LayoutID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Layout).WithMany()
                .HasForeignKey(d => d.LayoutId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_sysVoucherTemplateUserDetail_SYSVoucherTemplate");
        });

        modelBuilder.Entity<SysaccountObjectLog>(entity =>
        {
            entity.ToTable("SYSAccountObjectLog");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.LogTime).HasColumnType("datetime");
            entity.Property(e => e.NewObjectId).HasColumnName("NewObjectID");
            entity.Property(e => e.OldObjectId).HasColumnName("OldObjectID");
        });

        modelBuilder.Entity<SysaddNewDefaultValue>(entity =>
        {
            entity.HasKey(e => e.DefaultId);

            entity.ToTable("SYSAddNewDefaultValue");

            entity.Property(e => e.DefaultId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DefaultID");
            entity.Property(e => e.DefaultCode).HasMaxLength(50);
            entity.Property(e => e.RefTypeList).HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<SysautoId>(entity =>
        {
            entity.HasKey(e => e.AutoId).HasName("PK_AutoID");

            entity.ToTable("SYSAutoID", tb => tb.HasComment("Bảng lưu cấu hình tự tăng của Số chứng từ"));

            entity.HasIndex(e => new { e.BranchId, e.RefTypeCategory, e.DisplayOnBook }, "IX_RefTypeCategoryID_BranchID")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.AutoId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("AutoID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh. Các thiết lập mặc định mang đi thì BranchID = NULL")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("0=Sổ tài chính; 1=Sổ quản trị; 2=Tự tăng trên cả 2 sổ");
            entity.Property(e => e.LengthOfValue)
                .HasDefaultValueSql("((5))")
                .HasComment("Độ dài");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Prefix)
                .HasMaxLength(50)
                .HasComment("Tiền tố");
            entity.Property(e => e.RefTypeCategory).HasComment("PK");
            entity.Property(e => e.RefTypeCategoryName)
                .HasMaxLength(255)
                .HasComment("Tên loại chứng từ");
            entity.Property(e => e.Suffix)
                .HasMaxLength(50)
                .HasComment("Hậu tố");
            entity.Property(e => e.Value)
                .HasComment("Giá trị")
                .HasColumnType("decimal(28, 0)");
        });

        modelBuilder.Entity<Sysbook>(entity =>
        {
            entity.HasKey(e => e.DisplayOnBook);

            entity.ToTable("SYSBook");

            entity.Property(e => e.DisplayOnBook)
                .ValueGeneratedNever()
                .HasComment("PK");
            entity.Property(e => e.DisplayOnBookName)
                .HasMaxLength(50)
                .HasComment("Tên sổ");
        });

        modelBuilder.Entity<SysbusinessScaleHiden>(entity =>
        {
            entity.HasKey(e => e.SysbusinessScaleVisibleId).HasName("PK_SYSBusinessScaleVisible");

            entity.ToTable("SYSBusinessScaleHiden");

            entity.Property(e => e.SysbusinessScaleVisibleId).HasColumnName("SYSBusinessScaleVisibleID");
            entity.Property(e => e.BussinessScaleId).HasColumnName("BussinessScaleID");
            entity.Property(e => e.OptionVisibleBusiness).HasMaxLength(100);
        });

        modelBuilder.Entity<SysbusinessVisible>(entity =>
        {
            entity.HasKey(e => e.UserOptionId);

            entity.ToTable("SYSBusinessVisible", tb => tb.HasComment("Hiển thị các nghiệp vụ"));

            entity.Property(e => e.UserOptionId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - ID của tùy chọn")
                .HasColumnName("UserOptionID");
            entity.Property(e => e.ParentSubSystemCode)
                .HasMaxLength(100)
                .HasComment("Mã phân hệ cha");
            entity.Property(e => e.SidebarKeyReference).HasMaxLength(1000);
            entity.Property(e => e.SortOrder).HasComment("Dùng để Order các phân hệ trên cây cho đẹp");
            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(100)
                .HasComment("Mã phân hệ, chức năng");
            entity.Property(e => e.SubSystemName)
                .HasMaxLength(255)
                .HasComment("Tên phân hệ, chức năng");
            entity.Property(e => e.ToolbarKeyReference).HasMaxLength(1000);
            entity.Property(e => e.Visible)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Có hiển thị không?");
        });

        modelBuilder.Entity<SysclientVersion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SYSClientVersion");

            entity.Property(e => e.ComputerName).HasMaxLength(100);
            entity.Property(e => e.FromVersion).HasMaxLength(20);
            entity.Property(e => e.LastestVersion).HasMaxLength(20);
        });

        modelBuilder.Entity<SysconfigForUpdateOutwardPrice>(entity =>
        {
            entity.ToTable("SYSConfigForUpdateOutwardPrice");

            entity.Property(e => e.SysconfigForUpdateOutwardPriceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConfigForUpdateOutwardPriceID");
            entity.Property(e => e.ColumnNameInDetail).HasMaxLength(100);
            entity.Property(e => e.ColumnNameInLedger).HasMaxLength(100);
            entity.Property(e => e.ColumnNameInMaster).HasMaxLength(100);
            entity.Property(e => e.DetailTableName).HasMaxLength(100);
            entity.Property(e => e.InOutWardType).HasDefaultValueSql("((2))");
            entity.Property(e => e.MasterTableName).HasMaxLength(100);
            entity.Property(e => e.PostToBookType).HasDefaultValueSql("((2))");
        });

        modelBuilder.Entity<SysconvertMappingColumn>(entity =>
        {
            entity.ToTable("SYSConvertMappingColumn");

            entity.Property(e => e.SysconvertMappingColumnId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertMappingColumnID");
            entity.Property(e => e.DefaultValue).HasMaxLength(255);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.SourceCondition).HasMaxLength(255);
            entity.Property(e => e.SourceTableName).HasMaxLength(100);
            entity.Property(e => e.TargetColumnName).HasMaxLength(100);
            entity.Property(e => e.TargetTableName).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(255);
        });

        modelBuilder.Entity<SysconvertMappingRefType>(entity =>
        {
            entity.ToTable("SYSConvertMappingRefType");

            entity.Property(e => e.SysconvertMappingRefTypeId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertMappingRefTypeID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ReasonTypeId).HasColumnName("ReasonTypeID");
            entity.Property(e => e.SourceCodeColumnDescription).HasMaxLength(100);
            entity.Property(e => e.SourceOtherTableName).HasMaxLength(100);
            entity.Property(e => e.SourceRefType).HasMaxLength(100);
            entity.Property(e => e.SourceTableName).HasMaxLength(100);
            entity.Property(e => e.TableConfigType).HasDefaultValueSql("((1))");
            entity.Property(e => e.TargetCodeColumnName).HasMaxLength(100);
            entity.Property(e => e.TargetTableName).HasMaxLength(100);
        });

        modelBuilder.Entity<SysconvertMappingTable>(entity =>
        {
            entity.ToTable("SYSConvertMappingTable");

            entity.Property(e => e.SysconvertMappingTableId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertMappingTableID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.SourceCodeColumnDescription).HasMaxLength(100);
            entity.Property(e => e.SourceOtherTableName).HasMaxLength(100);
            entity.Property(e => e.TargetCodeColumnName).HasMaxLength(100);
            entity.Property(e => e.TargetTableName).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(255);
        });

        modelBuilder.Entity<SysconvertMappingValidate>(entity =>
        {
            entity.ToTable("SYSConvertMappingValidate");

            entity.Property(e => e.SysconvertMappingValidateId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertMappingValidateID");
            entity.Property(e => e.TargetTableName).HasMaxLength(100);
            entity.Property(e => e.ValidateType).HasDefaultValueSql("((1))");
        });

        modelBuilder.Entity<SysconvertTempTable>(entity =>
        {
            entity.ToTable("SYSConvertTempTable");

            entity.Property(e => e.SysconvertTempTableId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertTempTableID");
            entity.Property(e => e.TempTableName).HasMaxLength(100);
        });

        modelBuilder.Entity<SysconvertTempTableDetail>(entity =>
        {
            entity.ToTable("SYSConvertTempTableDetail");

            entity.Property(e => e.SysconvertTempTableDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertTempTableDetailID");
            entity.Property(e => e.ColumnName).HasMaxLength(100);
            entity.Property(e => e.ColumnType).HasDefaultValueSql("((1))");
            entity.Property(e => e.DataType).HasMaxLength(100);
            entity.Property(e => e.DefaultValue).HasMaxLength(100);
            entity.Property(e => e.Desciption).HasMaxLength(255);
            entity.Property(e => e.TempTableName).HasMaxLength(100);
        });

        modelBuilder.Entity<SysconvertUpdateValue>(entity =>
        {
            entity.HasKey(e => e.SysconvertUpdateValue1);

            entity.ToTable("SYSConvertUpdateValue");

            entity.Property(e => e.SysconvertUpdateValue1)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertUpdateValue");
            entity.Property(e => e.AccountingObjectId).HasColumnName("AccountingObjectID");
            entity.Property(e => e.FinishDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(50);
            entity.Property(e => e.NewRefDetailId).HasColumnName("NewRefDetailID");
            entity.Property(e => e.NewRefId).HasColumnName("NewRefID");
            entity.Property(e => e.OldRefDetailId).HasColumnName("OldRefDetailID");
            entity.Property(e => e.OldRefId).HasColumnName("OldRefID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SysconvertUpdateValueRefdetailId>(entity =>
        {
            entity.HasKey(e => e.SysconvertUpdateValueRefdetailId1);

            entity.ToTable("SYSConvertUpdateValueRefdetailID");

            entity.Property(e => e.SysconvertUpdateValueRefdetailId1)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSConvertUpdateValueRefdetailID");
            entity.Property(e => e.NewRefDetailId).HasColumnName("NewRefDetailID");
            entity.Property(e => e.OldRefDetailId).HasColumnName("OldRefDetailID");
        });

        modelBuilder.Entity<SyscustomizeReport>(entity =>
        {
            entity.HasKey(e => e.CustomizeReportId);

            entity.ToTable("SYSCustomizeReport");

            entity.Property(e => e.CustomizeReportId)
                .ValueGeneratedNever()
                .HasColumnName("CustomizeReportID");
            entity.Property(e => e.DependOnReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Dựa trên mẫu")
                .HasColumnName("DependOnReportID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("ReportID, liên kết dạng 1-1")
                .HasColumnName("ReportID");
            entity.Property(e => e.ReportName)
                .HasMaxLength(255)
                .HasComment("Tên báo cáo, lưu dữ thừa để dễ thực hiện thống nhất trên 1 bảng");
            entity.Property(e => e.ScriptFile).HasComment("File script (cho phép Null để đảm bảo khi InitRow không phải khởi tạo kiểu Byte)");
            entity.Property(e => e.ScriptFileName)
                .HasMaxLength(255)
                .HasComment("Tên file script");
            entity.Property(e => e.TemplateFile).HasComment("File báo cáo");
            entity.Property(e => e.TemplateFileName)
                .HasMaxLength(255)
                .HasComment("Tên file mẫu báo cáo");

            entity.HasOne(d => d.Report).WithMany(p => p.SyscustomizeReports)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSCustomizeReport_SYSReportList");
        });

        modelBuilder.Entity<Sysdbinfo>(entity =>
        {
            entity.HasKey(e => e.Application).HasName("PK_DBInfo");

            entity.ToTable("SYSDBInfo", tb => tb.HasComment("Thông tin sản phẩm"));

            entity.Property(e => e.Application).HasMaxLength(20);
            entity.Property(e => e.ClosedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DemoDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.IsFirstTimeSyncLedger).HasDefaultValueSql("((1))");
            entity.Property(e => e.LastCheckLedgerDate).HasColumnType("datetime");
            entity.Property(e => e.MobileDatabaseId).HasColumnName("MobileDatabaseID");
            entity.Property(e => e.Mvc)
                .HasMaxLength(20)
                .HasColumnName("MVC");
            entity.Property(e => e.Version).HasMaxLength(20);
        });

        modelBuilder.Entity<Sysdboption>(entity =>
        {
            entity.HasKey(e => e.UserOptionId).HasName("PK_SYSDBoption");

            entity.ToTable("SYSDBOption", tb => tb.HasComment("Là option của tab Hiển thị nghiệp vụ"));

            entity.HasIndex(e => new { e.OptionId, e.UserId, e.BranchId }, "IX_SYSDBoption_OptionID").HasFillFactor(90);

            entity.Property(e => e.UserOptionId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK - ID của tùy chọn")
                .HasColumnName("UserOptionID");
            entity.Property(e => e.BranchId)
                .HasComment("ID chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải: option này để làm gì, có value range nào.");
            entity.Property(e => e.IsBranchOption).HasComment("Là tùy chọn theo chi nhánh");
            entity.Property(e => e.IsDefault).HasComment("Là tùy chọn mặc định mang đi. Khi thêm mới Tùy chọn theo chi nhánh, theo User thì copy từ Tùy chọn này");
            entity.Property(e => e.IsGlobalOption).HasComment("Là tùy chọn chung toàn hệ thống");
            entity.Property(e => e.IsUserOption).HasComment("Là tùy chọn theo Người dùng");
            entity.Property(e => e.Lock).HasComment("Khóa");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OptionId)
                .HasMaxLength(50)
                .HasComment("Mã của tùy chọn")
                .HasColumnName("OptionID");
            entity.Property(e => e.OptionValue).HasComment("Giá trị của tùy chọn đó");
            entity.Property(e => e.UserId)
                .HasComment("ID của người dùng")
                .HasColumnName("UserID");
            entity.Property(e => e.ValueType).HasComment("Kiểu giá trị (Thiết lập theo EnumDataType trên chương trình)");
        });

        modelBuilder.Entity<SysdboptionMachine>(entity =>
        {
            entity.HasKey(e => e.UserOptionId);

            entity.ToTable("SYSDBOptionMachine");

            entity.Property(e => e.UserOptionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UserOptionID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.MachineName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OptionId)
                .HasMaxLength(50)
                .HasColumnName("OptionID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<SysdefaultPaymentMethodValue>(entity =>
        {
            entity.HasKey(e => e.DefaultId);

            entity.ToTable("SYSDefaultPaymentMethodValue", tb => tb.HasComment("Bảng chứa giá trị phương thức thanh toán mặc định khi thêm mới"));

            entity.Property(e => e.DefaultId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("DefaultID");
            entity.Property(e => e.DefaultCode)
                .HasMaxLength(50)
                .HasComment("Mã ngầm định. Sẽ lưu trữ tên bảng hoặc tên form có dữ liệu cần lưu ngầm định");
            entity.Property(e => e.DefaultValue).HasComment("Các giá trị ngầm định. Lưu trữ theo định dạng JSON: Key, Value");
            entity.Property(e => e.DisplayOnBook).HasComment("Sổ lưu trữ. NULL: Mặc định; 0=Sổ tài chính; 1=Sổ quản trị; 2=Cho các loại ko theo sổ");
            entity.Property(e => e.KeyList).HasComment("Danh sách các key sẽ lưu lại giá trị, phân tách bởi dấu \",\"");
            entity.Property(e => e.RefTypeList)
                .HasMaxLength(255)
                .HasComment("Danh sách các RefType áp dụng, phân tách bởi dấu \",\" (Đối với các form chứng từ có RefType)");
            entity.Property(e => e.UserId)
                .HasComment("Ngầm định theo người dùng. Nếu là NULL thì là dòng config của hệ thống")
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<SysemailTemplateType>(entity =>
        {
            entity.HasKey(e => e.TemplateTypeId).HasName("PK__SYSEmail__E23AE68034EB2F09");

            entity.ToTable("SYSEmailTemplateType");

            entity.Property(e => e.TemplateTypeId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateTypeID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FunctionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ListObjectId)
                .HasMaxLength(700)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'')")
                .HasColumnName("ListObjectID");
            entity.Property(e => e.MergeTempalte).HasMaxLength(100);
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TableName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TemplateTypeName).HasMaxLength(100);
        });

        modelBuilder.Entity<SysgroupMultiLog>(entity =>
        {
            entity.ToTable("SYSGroupMultiLog");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.LogTime).HasColumnType("datetime");
            entity.Property(e => e.NewObjectId).HasColumnName("NewObjectID");
            entity.Property(e => e.OldObjectId).HasColumnName("OldObjectID");
        });

        modelBuilder.Entity<SysinfoInvoiceNo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SYSInfoI__SYSInfoInvoiceNo");

            entity.ToTable("SYSInfoInvoiceNo");

            entity.HasIndex(e => new { e.InvNo, e.InvSeries, e.InvTemplateNo, e.BranchId }, "IX_SYSInfoInvoiceNo_InvNo_InvTemplateNo_InvSeries_BranchID").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TimeOut).HasColumnType("datetime");
        });

        modelBuilder.Entity<SyslayoutLanguage>(entity =>
        {
            entity.ToTable("SYSLayoutLanguage");

            entity.HasIndex(e => e.FkeyId, "IX_SYSLayoutLanguage_FKeyID");

            entity.Property(e => e.SyslayoutLanguageId)
                .ValueGeneratedNever()
                .HasColumnName("SYSLayoutLanguageID");
            entity.Property(e => e.FkeyId).HasColumnName("FKeyID");
            entity.Property(e => e.LanguageId)
                .HasMaxLength(20)
                .HasColumnName("LanguageID");
        });

        modelBuilder.Entity<SyslayoutMemorized>(entity =>
        {
            entity.ToTable("SYSLayoutMemorized");

            entity.HasIndex(e => e.LayoutId, "IX_SYSLayoutMemorized_LayoutID").HasFillFactor(90);

            entity.HasIndex(e => e.UserId, "IX_SYSLayoutMemorized_UserID").HasFillFactor(90);

            entity.Property(e => e.SyslayoutMemorizedId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SYSLayoutMemorizedID");
            entity.Property(e => e.LayoutId)
                .HasComment("ID on SYSLayoutTemplate")
                .HasColumnName("LayoutID");
            entity.Property(e => e.UserId)
                .HasComment("ID on MSCUser")
                .HasColumnName("UserID");

            entity.HasOne(d => d.Layout).WithMany(p => p.SyslayoutMemorizeds)
                .HasForeignKey(d => d.LayoutId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SYSLayoutMemorized_SYSListLayoutTemplate");
        });

        modelBuilder.Entity<SyslistLayoutTemplate>(entity =>
        {
            entity.HasKey(e => e.LayoutId).HasName("PK_SysLayoutTemplateDict");

            entity.ToTable("SYSListLayoutTemplate", tb => tb.HasComment("Mẫu layout của Danh sách danh mục, chứng từ"));

            entity.HasIndex(e => new { e.SubSystemCode, e.LayoutName }, "IX_SYSListLayoutTemplate_SubSystemCode");

            entity.HasIndex(e => e.LayoutId, "IX_SysLayoutTemplateDict_LayoutID").HasFillFactor(90);

            entity.Property(e => e.LayoutId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK mã layout")
                .HasColumnName("LayoutID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả layout, dùng cho quản lý mẫu Hợp đồng bán");
            entity.Property(e => e.IsPublic).HasDefaultValueSql("((1))");
            entity.Property(e => e.LayoutName)
                .HasMaxLength(255)
                .HasComment("Tên layout, dùng cho danh sách Hợp đồng bán");
            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(50)
                .HasComment("Mã danh mục, danh sách chứng từ");
            entity.Property(e => e.TemplateConfig).HasComment("Cấu hình của grid list");
            entity.Property(e => e.UserId)
                .HasComment("ID của người dùng. Nếu NULLthì là mẫu ngầm định")
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<SysnewRefNo>(entity =>
        {
            entity.ToTable("SYSNewRefNo");

            entity.Property(e => e.SysnewRefNoId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("SYSNewRefNoID");
            entity.Property(e => e.BranchId)
                .HasComment("Chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày giờ thêm")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayOnBook).HasComment("Làm việc trên sổ");
            entity.Property(e => e.RefNo)
                .HasMaxLength(128)
                .HasComment("RefNo mới thêm tạm vào đây.");
            entity.Property(e => e.RefTypeCategory).HasComment("Loại chứng từ");
            entity.Property(e => e.VoucherRefId)
                .HasComment("ID của chứng từ tạm đang giữ alias này")
                .HasColumnName("VoucherRefID");
        });

        modelBuilder.Entity<Sysoperand>(entity =>
        {
            entity.HasKey(e => e.OperandId).HasName("PK_OPERAND");

            entity.ToTable("SYSOperand", tb => tb.HasComment("Bảng các toán hạng dùng trong thiết lập báo cáo tài chính"));

            entity.Property(e => e.OperandId)
                .ValueGeneratedNever()
                .HasColumnName("OperandID");
            entity.Property(e => e.Edescription)
                .HasMaxLength(200)
                .HasComment("Diễn giải tiếng anh")
                .HasColumnName("EDescription");
            entity.Property(e => e.Note)
                .HasMaxLength(200)
                .HasComment("ghi chú");
            entity.Property(e => e.OperandString)
                .HasMaxLength(200)
                .HasComment("Khóa: mã của toán hạng");
            entity.Property(e => e.Type)
                .HasDefaultValueSql("((0))")
                .HasComment("1: bảng cân đối kế toán; 2: Báo cáo kết quả hoạt động kinh doanh; 3: Báo cáo lưu chuyển tiền tệ; 4: Thuyết minh báo cáo tài chính; 5: Tờ khai quyết toán thuế");
            entity.Property(e => e.Vdescription)
                .HasMaxLength(200)
                .HasComment("Diễn giải tiếng việt")
                .HasColumnName("VDescription");
        });

        modelBuilder.Entity<SyspostMappingColumn>(entity =>
        {
            entity.ToTable("SYSPostMappingColumn", tb => tb.HasComment("Bảng này định nghĩa rule update dữ liệu từ các trường trên chứng từ gốc vào sổ"));

            entity.Property(e => e.SyspostMappingColumnId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("SYSPostMappingColumnID");
            entity.Property(e => e.AccountCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện theo tài khoản, cấu trúc <Tên cột mã tài khoản trên chứng từ gốc>;<điều kiện theo tài khoản>");
            entity.Property(e => e.ColumnNameInLedger)
                .HasMaxLength(50)
                .HasComment("Tên cột Trên sổ");
            entity.Property(e => e.ConfigType).HasComment("Kiểu config, định nghĩa trên EnumPostConfigType của chương trình");
            entity.Property(e => e.DefaultValue)
                .HasMaxLength(255)
                .HasComment("giá trị mặc định (khi giá trị null thì sẽ lấy thông tin từ cột này để đưa vào sổ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.DetailCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện ở bảng detail");
            entity.Property(e => e.DetailTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng detail của chứng từ, bỏ trống nghĩa là bảng master này k có detail ^^");
            entity.Property(e => e.LedgerTableName)
                .HasMaxLength(50)
                .HasComment("Tên sổ, bỏ trống nghĩa là rule này áp dụng với tất cả các sổ");
            entity.Property(e => e.MasterCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện ở bảng master");
            entity.Property(e => e.MasterTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng master của chứng từ, bỏ trống nghĩa là rule này có tác dụng với tất cả các chứng từ");
            entity.Property(e => e.PostToBookType).HasDefaultValueSql("((2))");
            entity.Property(e => e.Value)
                .HasMaxLength(255)
                .HasComment("Giá trị");
        });

        modelBuilder.Entity<SyspostMappingRedundant>(entity =>
        {
            entity.ToTable("SYSPostMappingRedundant", tb => tb.HasComment("Bảng này định nghĩa rule update dữ liệu lưu dư thừa từ các bảng khác vào"));

            entity.Property(e => e.SyspostMappingRedundantId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("SYSPostMappingRedundantID");
            entity.Property(e => e.ColumnNameInLedger)
                .HasMaxLength(50)
                .HasComment("Tên cột trên sổ");
            entity.Property(e => e.ColumnNameInRedundant)
                .HasMaxLength(50)
                .HasComment("Tên cột trên bảng chứa dữ liệu dư thừa, nếu null  thì = ledger");
            entity.Property(e => e.Desciption)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.LedgerTableName)
                .HasMaxLength(50)
                .HasComment("Tên sổ, bỏ trống nghĩa là rule này áp dụng với tất cả các sổ");
            entity.Property(e => e.RedundantTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng chứa dữ liệu dư thừa");
            entity.Property(e => e.RelationColumnNameInLedger)
                .HasMaxLength(50)
                .HasComment("Tên cột trên sổ tham gia vào relation join giữa danh mục - sổ");
            entity.Property(e => e.RelationColumnNameInRedundant)
                .HasMaxLength(50)
                .HasComment("Tên cột trên bảng chứa dữ liệu dư thừa tham gia vào relation join giữa danh mục - sổ, nếu null thì = ledger");
        });

        modelBuilder.Entity<SyspostMappingRow>(entity =>
        {
            entity.ToTable("SYSPostMappingRow", tb => tb.HasComment("Bảng này định nghĩa rule sinh ra các dòng dữ liệu post vào các sổ, quy định 1 dòng chứng từ gốc sẽ đc post vào sổ nào, mấy dòng"));

            entity.Property(e => e.SyspostMappingRowId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("SYSPostMappingRowID");
            entity.Property(e => e.AccountCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện theo tài khoản, cấu trúc <Tên cột mã tài khoản trên chứng từ gốc>;<điều kiện theo tài khoản>");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản  (chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.AccountObjectId)
                .HasMaxLength(255)
                .HasComment("Danh sách các AccountObjectID ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng (chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)")
                .HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountingSystem).HasMaxLength(50);
            entity.Property(e => e.AmountFinance)
                .HasMaxLength(255)
                .HasComment("Giá trị trên sổ tài chính(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.AmountManagement)
                .HasMaxLength(255)
                .HasComment("Giá trị trên sổ quản trị(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.AmountOcfinance)
                .HasMaxLength(255)
                .HasComment("Giá trị nguyên tệ trên sổ tài chính (chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)")
                .HasColumnName("AmountOCFinance");
            entity.Property(e => e.AmountOcmanagement)
                .HasMaxLength(255)
                .HasComment("Giá trị nguyên tệ trên sổ quản trị(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)")
                .HasColumnName("AmountOCManagement");
            entity.Property(e => e.BankAccountId)
                .HasMaxLength(255)
                .HasComment("Danh sách BankAccountID ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)")
                .HasColumnName("BankAccountID");
            entity.Property(e => e.BusinessType).HasMaxLength(255);
            entity.Property(e => e.ContactName)
                .HasMaxLength(255)
                .HasComment("Danh sách ContactName ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.CorrespondingAccountNumber)
                .HasMaxLength(50)
                .HasComment("Số tài khoản đối ứng (chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.DecrementQuantity)
                .HasMaxLength(255)
                .HasComment("Danh sách các DecrementQuantity ngăn cách nhau bởi ;");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasComment("Mô tả của rule");
            entity.Property(e => e.DetailCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện ở bảng detail");
            entity.Property(e => e.DetailDescription).HasMaxLength(255);
            entity.Property(e => e.DetailTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng detail của chứng từ");
            entity.Property(e => e.DocumentIncluded).HasMaxLength(255);
            entity.Property(e => e.IncrementQuantity)
                .HasMaxLength(255)
                .HasComment("Danh sách các IncrementQuantity ngăn cách nhau bởi ;");
            entity.Property(e => e.IsInward)
                .HasMaxLength(255)
                .HasComment("Là dòng nhập kho: 1; là dòng xuất kho:0(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Danh sách JournalMemo ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.LedgerTableName)
                .HasMaxLength(50)
                .HasComment("Tên sổ");
            entity.Property(e => e.MainQuantity)
                .HasMaxLength(255)
                .HasComment("Số lượng theo đơn vị chính(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.MasterCondition)
                .HasMaxLength(255)
                .HasComment("Điều kiện ở bảng master");
            entity.Property(e => e.MasterTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng master của chứng từ");
            entity.Property(e => e.OrganizationUnitId)
                .HasMaxLength(255)
                .HasComment("Danh sách các OrganizationUnitID ngăn cách nhau bởi ;")
                .HasColumnName("OrganizationUnitID");
            entity.Property(e => e.Quantity)
                .HasMaxLength(255)
                .HasComment("Số lượng (chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.RefDate).HasMaxLength(255);
            entity.Property(e => e.RefNoFinance)
                .HasMaxLength(255)
                .HasComment("Danh sách RefNoFinance ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.RefNoManagement)
                .HasMaxLength(255)
                .HasComment("Danh sách RefNoManagement ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)");
            entity.Property(e => e.RelationColumnNameInDetail)
                .HasMaxLength(50)
                .HasComment("Tên cột ở bảng detail tham gia vào relation master-detail");
            entity.Property(e => e.RelationColumnNameInMaster)
                .HasMaxLength(50)
                .HasComment("Tên cột ở bảng master tham gia vào relation master-detail");
            entity.Property(e => e.StockId)
                .HasMaxLength(255)
                .HasComment("Danh sách StockID ngăn cách nhau bởi dấu ; trong trường hợp nhiều giá trị, nhiều dòng(chỉ có ý nghĩa với các bảng dữ liệu được config trên bảng SYSPostMappingRowDetail)")
                .HasColumnName("StockID");
            entity.Property(e => e.TotalRowCount)
                .HasDefaultValueSql("((1))")
                .HasComment("Tổng sổ lượng dòng dữ liệu trên sổ được sinh ra bởi rule này");
        });

        modelBuilder.Entity<SyspostMappingRowDetail>(entity =>
        {
            entity.ToTable("SYSPostMappingRowDetail", tb => tb.HasComment("Bảng này phục vụ định nghĩa sự khác nhau giữa các dòng trong trường hợp có >1 dòng được thiết lập trên bảng SYSPostMappingRow. Chú ý: quan hệ với SYSPostMappingRow k phải quan hệ master-detail"));

            entity.Property(e => e.SyspostMappingRowDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("SYSPostMappingRowDetailID");
            entity.Property(e => e.ColumnNameInLedger)
                .HasMaxLength(50)
                .HasComment("Tên cột Trên sổ");
            entity.Property(e => e.ConfigType).HasComment("Kiểu config, định nghĩa trên EnumPostConfigType của chương trình");
            entity.Property(e => e.DetailCondition).HasMaxLength(255);
            entity.Property(e => e.IndexRow).HasComment("Thứ tự dòng");
            entity.Property(e => e.LedgerTableName)
                .HasMaxLength(50)
                .HasComment("Tên sổ");
            entity.Property(e => e.MasterAllCondition).HasMaxLength(255);
            entity.Property(e => e.MasterCondition).HasMaxLength(255);
            entity.Property(e => e.PostToBookType).HasDefaultValueSql("((2))");
            entity.Property(e => e.ValueInSyspostMappingRow)
                .HasMaxLength(50)
                .HasComment("Thông tin được config trên bảng SYSPostMappingRow")
                .HasColumnName("ValueInSYSPostMappingRow");
        });

        modelBuilder.Entity<SyspostMappingValidate>(entity =>
        {
            entity.ToTable("SYSPostMappingValidate");

            entity.Property(e => e.SyspostMappingValidateId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa")
                .HasColumnName("SYSPostMappingValidateID");
            entity.Property(e => e.ColumnNameInLedger).HasComment("Tên cột Trên sổ, nếu nhiều cột thì cách nhau bởi ;");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.DetailByColumnName)
                .HasMaxLength(100)
                .HasComment("với validate = 1 thì nó là tên trường validate trên bảng tài khoản");
            entity.Property(e => e.DetailByTypeColumnName)
                .HasMaxLength(100)
                .HasComment("với validate = 1 thì nó là tên trường kiểu validate trên bảng tài khoản");
            entity.Property(e => e.LedgerTableName)
                .HasMaxLength(50)
                .HasComment("Tên sổ");
            entity.Property(e => e.ValidateType)
                .HasDefaultValueSql("((1))")
                .HasComment("Kiểu validate. 1: Validate chi tiết theo tài khoản,2: validate chi tiết theo tài khoản - loại đối tượng");
        });

        modelBuilder.Entity<SyspostRefIdrebuid>(entity =>
        {
            entity.HasKey(e => e.SyspostRefIdrebuildId);

            entity.ToTable("SYSPostRefIDRebuid");

            entity.Property(e => e.SyspostRefIdrebuildId)
                .ValueGeneratedNever()
                .HasColumnName("SYSPostRefIDRebuildID");
        });

        modelBuilder.Entity<SysquickEditLedgerConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId);

            entity.ToTable("SYSQuickEditLedgerConfig");

            entity.Property(e => e.ConfigId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigID");
            entity.Property(e => e.ColumnDetail).HasMaxLength(255);
            entity.Property(e => e.ColumnDetailInLedger).HasMaxLength(255);
            entity.Property(e => e.ColumnMaster).HasMaxLength(255);
            entity.Property(e => e.ColumnMasterInLedger).HasMaxLength(255);
            entity.Property(e => e.DetailTableName).HasMaxLength(255);
            entity.Property(e => e.LedgerTableName).HasMaxLength(255);
            entity.Property(e => e.MasterTableName).HasMaxLength(255);
            entity.Property(e => e.RelationColumnDetail).HasMaxLength(255);
            entity.Property(e => e.RelationColumnMaster).HasMaxLength(255);
        });

        modelBuilder.Entity<SysquickEditPostConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId);

            entity.ToTable("SYSQuickEditPostConfig");

            entity.HasIndex(e => new { e.ColumnNameInLedger, e.Value }, "IX_SYSQuickEditPostConfig_Column").HasFillFactor(90);

            entity.HasIndex(e => new { e.LedgerTableName, e.MasterTableName, e.DetailTableName }, "IX_SYSQuickEditPostConfig_Table").HasFillFactor(90);

            entity.Property(e => e.ConfigId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigID");
            entity.Property(e => e.ColumnNameInLedger).HasMaxLength(50);
            entity.Property(e => e.ConfigType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DetailTableName).HasMaxLength(50);
            entity.Property(e => e.FilterCondition).HasMaxLength(1000);
            entity.Property(e => e.IsMaster)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.LedgerTableName).HasMaxLength(50);
            entity.Property(e => e.MasterTableName).HasMaxLength(50);
            entity.Property(e => e.Value).HasMaxLength(255);
        });

        modelBuilder.Entity<SysquickEditTableConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId).HasName("PK_SYSQuickEditConfig");

            entity.ToTable("SYSQuickEditTableConfig");

            entity.Property(e => e.ConfigId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigID");
            entity.Property(e => e.ColumnCode).HasMaxLength(100);
            entity.Property(e => e.ColumnId)
                .HasMaxLength(100)
                .HasColumnName("ColumnID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(255);
        });

        modelBuilder.Entity<SysquickSearchLayoutTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId).HasName("PK_QuickSearchLayoutTemplate");

            entity.ToTable("SYSQuickSearchLayoutTemplate", tb => tb.HasComment("Bảng lưu config layout cho grid trên form QuickSearch"));

            entity.Property(e => e.TemplateId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("TemplateID");
            entity.Property(e => e.DictionaryType)
                .HasMaxLength(50)
                .HasComment("Loại QuickSearch (Dùng cho các chỗ trùng tên bảng như AccountObject)");
            entity.Property(e => e.FormSizeHeight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FormSizeWidth).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FormTitle)
                .HasMaxLength(128)
                .HasComment("Tên form");
            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng danh mục");
            entity.Property(e => e.TemplateConfig).HasComment("Config");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<SysquickSearchLayoutTemplateLanguage>(entity =>
        {
            entity.ToTable("SYSQuickSearchLayoutTemplateLanguage");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");
            entity.Property(e => e.LanguageId)
                .HasMaxLength(20)
                .HasColumnName("LanguageID");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
        });

        modelBuilder.Entity<SysrefType>(entity =>
        {
            entity.HasKey(e => e.RefType);

            entity.ToTable("SYSRefType", tb => tb.HasComment("Loại chứng từ"));

            entity.Property(e => e.RefType)
                .ValueGeneratedNever()
                .HasComment("PK - Mã loại chứng từ");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.DetailTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng Detail của chứng từ ứng với RefType (phục vụ phần PostVoucher)");
            entity.Property(e => e.IsReference)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsShowOnAccountDefault).HasComment("Trường này dùng để chỉ các loại RefType Nào được show lên trên danh mục tài khoản ngầm định");
            entity.Property(e => e.MasterTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng Master của chứng từ ứng với RefType (phục vụ phần PostVoucher)");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.PostType)
                .HasDefaultValueSql("((0))")
                .HasComment("Xác định ứng với Reftype nay thi có post vào bảng GeneralLedger không: 0 : có Post vào bảng GL, 1 : không post vào bảng GL");
            entity.Property(e => e.Postable).HasComment("Loại chứng từ này có chức năng ghi sổ (post)");
            entity.Property(e => e.RefTypeCategory).HasComment("Nhóm chứng từ. Các chu cùng nhóm thì dùng chung AutoID và cùng hiển thị trên 1 danh sách chứng từ.");
            entity.Property(e => e.RefTypeName)
                .HasMaxLength(100)
                .HasComment("Tên loại chứng từ");
            entity.Property(e => e.RefTypeNameChinese).HasMaxLength(255);
            entity.Property(e => e.RefTypeNameEnglish).HasMaxLength(255);
            entity.Property(e => e.RefTypeNameKorean).HasMaxLength(255);
            entity.Property(e => e.Searchable).HasComment("Loại chứng từ này cho xuất hiện trong chức năng \"Tìm kiếm chứng từ\"");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.SubSystem)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Phân hệ");

            entity.HasOne(d => d.RefTypeCategoryNavigation).WithMany(p => p.SysrefTypes)
                .HasForeignKey(d => d.RefTypeCategory)
                .HasConstraintName("FK_SYSRefType_SYSRefTypeCategory");
        });

        modelBuilder.Entity<SysrefTypeCategory>(entity =>
        {
            entity.HasKey(e => e.RefTypeCategory).HasName("PK_RefTypeCategory");

            entity.ToTable("SYSRefTypeCategory", tb => tb.HasComment("Nhóm loại chứng từ"));

            entity.Property(e => e.RefTypeCategory).ValueGeneratedNever();
            entity.Property(e => e.DefaultCreditAccountId)
                .HasMaxLength(20)
                .HasColumnName("DefaultCreditAccountID");
            entity.Property(e => e.DefaultDebitAccountId)
                .HasMaxLength(20)
                .HasColumnName("DefaultDebitAccountID");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.RefTypeCategoryName).HasMaxLength(50);
            entity.Property(e => e.SortOrder).HasComment("Thứ tự sắp xếp");
            entity.Property(e => e.UseRebuildRefNo).HasComment("Dùng để xác định các loại nào hiển thị lên để đánh lại số chứng từ");
        });

        modelBuilder.Entity<SysrefTypeDetail>(entity =>
        {
            entity.HasKey(e => e.RefTypeDetailId);

            entity.ToTable("SYSRefTypeDetail", tb => tb.HasComment("Bảng chi tiết RefType, dùng để mapping đầy đủ RefType với RefTypeCategory"));

            entity.Property(e => e.RefTypeDetailId)
                .HasComment("PK")
                .HasColumnName("RefTypeDetailID");
            entity.Property(e => e.DetailTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng Detail của chứng từ ứng với RefType (phục vụ phần PostVoucher)");
            entity.Property(e => e.MasterTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng Master của chứng từ ứng với RefType (phục vụ phần PostVoucher)");
            entity.Property(e => e.PostedDateColumnName)
                .HasMaxLength(50)
                .HasComment("Tên cột Ngày hạch cho RefType, RefTypeCategory này");
            entity.Property(e => e.RefDateColumnName)
                .HasMaxLength(50)
                .HasComment("Tên cột Ngày chứng từ cho RefType, RefTypeCategory này");
            entity.Property(e => e.RefNoFinanceColumnName)
                .HasMaxLength(50)
                .HasComment("Tên cột Số chứng từ cho RefType, RefTypeCategory này");
            entity.Property(e => e.RefNoManagementColumnName)
                .HasMaxLength(50)
                .HasComment("Tên cột Số chứng từ cho RefType, RefTypeCategory này");
            entity.Property(e => e.RefType).HasComment("FK");
            entity.Property(e => e.RefTypeCategory).HasComment("FK");
            entity.Property(e => e.RefTypeName)
                .HasMaxLength(255)
                .HasComment("Tạm");

            entity.HasOne(d => d.RefTypeNavigation).WithMany(p => p.SysrefTypeDetails)
                .HasForeignKey(d => d.RefType)
                .HasConstraintName("FK_SYSRefTypeDetail_SYSRefType");

            entity.HasOne(d => d.RefTypeCategoryNavigation).WithMany(p => p.SysrefTypeDetails)
                .HasForeignKey(d => d.RefTypeCategory)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SYSRefTypeDetail_SYSRefTypeCategory");
        });

        modelBuilder.Entity<SysremindOption>(entity =>
        {
            entity.HasKey(e => e.UserOptionId);

            entity.ToTable("SYSRemindOption");

            entity.Property(e => e.UserOptionId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UserOptionID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.OptionId)
                .HasMaxLength(50)
                .HasColumnName("OptionID");
            entity.Property(e => e.OptionValue).HasMaxLength(100);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.ValueType)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<SysreportCopyConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId);

            entity.ToTable("SYSReportCopyConfig");

            entity.Property(e => e.ConfigId).HasColumnName("ConfigID");
            entity.Property(e => e.AllowEdit).HasDefaultValueSql("((0))");
            entity.Property(e => e.AllowEditBackground).HasDefaultValueSql("((0))");
            entity.Property(e => e.AllowEditColor).HasDefaultValueSql("((0))");
            entity.Property(e => e.AllowEditLogo).HasDefaultValueSql("((0))");
            entity.Property(e => e.AllowEditNameOfCopy).HasDefaultValueSql("((0))");
            entity.Property(e => e.AllowEditPurpose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.NumOfCopy).HasDefaultValueSql("((2))");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<SysreportCopyConfigDetail>(entity =>
        {
            entity.HasKey(e => e.ConfigDetailId).HasName("PK_SYSReportCopyConfigDetail_1");

            entity.ToTable("SYSReportCopyConfigDetail");

            entity.Property(e => e.ConfigDetailId).HasColumnName("ConfigDetailID");
            entity.Property(e => e.Ccbackground).HasColumnName("CCBackground");
            entity.Property(e => e.Cccolor)
                .HasMaxLength(64)
                .HasColumnName("CCColor");
            entity.Property(e => e.Cclogo).HasColumnName("CCLogo");
            entity.Property(e => e.Ccpurpose)
                .HasMaxLength(64)
                .HasColumnName("CCPurpose");
            entity.Property(e => e.CcpurposeEnglish)
                .HasMaxLength(255)
                .HasColumnName("CCPurposeEnglish");
            entity.Property(e => e.EnglishNameOfCopy).HasMaxLength(500);
            entity.Property(e => e.LocalPathBackground).HasMaxLength(50);
            entity.Property(e => e.LocalPathLogo).HasMaxLength(50);
            entity.Property(e => e.NameOfCopy).HasMaxLength(500);
            entity.Property(e => e.NoOfCopy).HasDefaultValueSql("((1))");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.TypeOfCopies).HasDefaultValueSql("((2))");
        });

        modelBuilder.Entity<SysreportCopyConfigDetailTemplate>(entity =>
        {
            entity.HasKey(e => e.ConfigDetailId);

            entity.ToTable("SYSReportCopyConfigDetailTemplate");

            entity.Property(e => e.ConfigDetailId).HasColumnName("ConfigDetailID");
            entity.Property(e => e.Ccbackground).HasColumnName("CCBackground");
            entity.Property(e => e.Cccolor)
                .HasMaxLength(64)
                .HasColumnName("CCColor");
            entity.Property(e => e.Cclogo).HasColumnName("CCLogo");
            entity.Property(e => e.Ccpurpose)
                .HasMaxLength(64)
                .HasColumnName("CCPurpose");
            entity.Property(e => e.CcpurposeEnglish)
                .HasMaxLength(255)
                .HasColumnName("CCPurposeEnglish");
            entity.Property(e => e.EnglishNameOfCopy).HasMaxLength(500);
            entity.Property(e => e.LocalPathBackground).HasMaxLength(50);
            entity.Property(e => e.LocalPathLogo).HasMaxLength(50);
            entity.Property(e => e.NameOfCopy).HasMaxLength(500);
            entity.Property(e => e.NoOfCopy).HasDefaultValueSql("((1))");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.TypeOfCopies).HasDefaultValueSql("((2))");
        });

        modelBuilder.Entity<SysreportCustom>(entity =>
        {
            entity.HasKey(e => e.ReportCustomId).HasName("PK_SYSReportTemplate");

            entity.ToTable("SYSReportCustom");

            entity.Property(e => e.ReportCustomId)
                .ValueGeneratedNever()
                .HasColumnName("ReportCustomID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CustomReportType).HasDefaultValueSql("((3))");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FileExtension).HasMaxLength(20);
            entity.Property(e => e.FileName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.ReportName).HasMaxLength(255);
            entity.Property(e => e.ReportNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ReportTypeId).HasColumnName("ReportTypeID");

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportCustoms)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSReportCustom_SYSReportList");

            entity.HasOne(d => d.ReportType).WithMany(p => p.SysreportCustoms)
                .HasForeignKey(d => d.ReportTypeId)
                .HasConstraintName("FK_SYSReportCustom_SYSReportMergeType");
        });

        modelBuilder.Entity<SysreportCustomDesignTemplate>(entity =>
        {
            entity.HasKey(e => e.DesignTemplateId);

            entity.ToTable("SYSReportCustomDesignTemplate");

            entity.HasIndex(e => e.ReportId, "IX_SYSReportCustomDesignTemplate").IsUnique();

            entity.Property(e => e.DesignTemplateId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("DesignTemplateID");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");

            entity.HasOne(d => d.Report).WithOne(p => p.SysreportCustomDesignTemplate)
                .HasForeignKey<SysreportCustomDesignTemplate>(d => d.ReportId)
                .HasConstraintName("FK_SYSReportCustomDesignTemplate_SYSReportList");
        });

        modelBuilder.Entity<SysreportFormula>(entity =>
        {
            entity.HasKey(e => e.ItemDetailId).HasName("PK_FRFormula_Custom");

            entity.ToTable("SYSReportFormula");

            entity.Property(e => e.ItemDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemDetailID");
            entity.Property(e => e.AccountNumber).HasMaxLength(20);
            entity.Property(e => e.AccountSystem).HasMaxLength(20);
            entity.Property(e => e.ColumnName).HasMaxLength(50);
            entity.Property(e => e.CorrespondingAccountNumber).HasMaxLength(20);
            entity.Property(e => e.FunctionCode).HasMaxLength(50);
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.ReportItemId).HasColumnName("ReportItemID");

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportFormulas)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SYSReportFormula_SYSReportList");

            entity.HasOne(d => d.ReportItem).WithMany(p => p.SysreportFormulas)
                .HasForeignKey(d => d.ReportItemId)
                .HasConstraintName("FK_SYSReportFormula_SYSReportTemplate");
        });

        modelBuilder.Entity<SysreportGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK_ReportGroup");

            entity.ToTable("SYSReportGroup");

            entity.Property(e => e.GroupId)
                .ValueGeneratedNever()
                .HasColumnName("GroupID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.GroupName).HasMaxLength(255);
            entity.Property(e => e.GroupNameChinese).HasMaxLength(255);
            entity.Property(e => e.GroupNameEnglish).HasMaxLength(255);
            entity.Property(e => e.GroupNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<SysreportInvoice>(entity =>
        {
            entity.HasKey(e => e.ReportInvoiceId);

            entity.ToTable("SYSReportInvoice");

            entity.Property(e => e.ReportInvoiceId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("ReportInvoiceID");
            entity.Property(e => e.RefId)
                .HasComment("ID chứng từ")
                .HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("ID báo cáo")
                .HasColumnName("ReportID");
        });

        modelBuilder.Entity<SysreportLayoutConfig>(entity =>
        {
            entity.HasKey(e => e.LayoutId).HasName("PK_SYSDynamicReportLayoutConfig");

            entity.ToTable("SYSReportLayoutConfig");

            entity.Property(e => e.LayoutId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("LayoutID");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người tạo");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày tạo")
                .HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
            entity.Property(e => e.DescriptionChinese).HasMaxLength(255);
            entity.Property(e => e.DescriptionEnglish).HasMaxLength(255);
            entity.Property(e => e.DescriptionKorean).HasMaxLength(255);
            entity.Property(e => e.IsForeignCurrency).HasComment("Theo ngoại tệ hay không?");
            entity.Property(e => e.IsPublic)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Language)
                .HasMaxLength(10)
                .HasComment("Ngôn ngữ");
            entity.Property(e => e.LastViewDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LayoutName)
                .HasMaxLength(255)
                .HasComment("Tên mẫu");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa")
                .HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Tên báo cáo")
                .HasColumnName("ReportID");
            entity.Property(e => e.SortOrder)
                .ValueGeneratedOnAdd()
                .HasComment("Thứ tự");
            entity.Property(e => e.TemplateConfig).HasComment("Chuỗi config hiển thị grid column. ĐỊnh dạng XML");
            entity.Property(e => e.UserId)
                .HasComment("ID người dùng. Nếu NULL thì là Mẫu ngầm định,00000000-0000-0000-0000-000000000000 là áp dụng cho tất cả mọi người")
                .HasColumnName("UserID");

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportLayoutConfigs)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSReportLayoutConfig_SYSReportList");
        });

        modelBuilder.Entity<SysreportLayoutUserApply>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SYSReportLayoutUserApply");

            entity.Property(e => e.IsForeignCurrency).HasDefaultValueSql("((0))");
            entity.Property(e => e.LayoutId).HasColumnName("LayoutID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Layout).WithMany()
                .HasForeignKey(d => d.LayoutId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SYSReportLayoutUserApply_SYSReportLayoutConfig");

            entity.HasOne(d => d.Report).WithMany()
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSReportLayoutUserApply_SYSReportList");
        });

        modelBuilder.Entity<SysreportList>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK_ReportList");

            entity.ToTable("SYSReportList");

            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.FileTemplateChart).HasMaxLength(255);
            entity.Property(e => e.FormNo).HasMaxLength(128);
            entity.Property(e => e.FormNo133).HasMaxLength(128);
            entity.Property(e => e.FormNo48).HasMaxLength(128);
            entity.Property(e => e.FunctionReportName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.InvTypeId).HasColumnName("InvTypeID");
            entity.Property(e => e.IsBeta).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotPrintSummary).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShow)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.LanguageId)
                .HasMaxLength(10)
                .HasColumnName("LanguageID");
            entity.Property(e => e.LastViewDate).HasColumnType("datetime");
            entity.Property(e => e.ParameterFormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParameterUserControl)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParentId)
                .HasMaxLength(100)
                .HasColumnName("ParentID");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RefTypeList)
                .HasMaxLength(700)
                .HasDefaultValueSql("(N'/')");
            entity.Property(e => e.ReportDetailName).HasMaxLength(255);
            entity.Property(e => e.ReportDetailNameChinese).HasMaxLength(255);
            entity.Property(e => e.ReportDetailNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ReportDetailNameKorean).HasMaxLength(255);
            entity.Property(e => e.ReportFile).HasMaxLength(100);
            entity.Property(e => e.ReportName).HasMaxLength(255);
            entity.Property(e => e.ReportName133).HasMaxLength(255);
            entity.Property(e => e.ReportName48).HasMaxLength(255);
            entity.Property(e => e.ReportNameChinese).HasMaxLength(255);
            entity.Property(e => e.ReportNameChinese133).HasMaxLength(255);
            entity.Property(e => e.ReportNameChinese48).HasMaxLength(255);
            entity.Property(e => e.ReportNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ReportNameEnglish133).HasMaxLength(255);
            entity.Property(e => e.ReportNameEnglish48).HasMaxLength(255);
            entity.Property(e => e.ReportNameKorean).HasMaxLength(255);
            entity.Property(e => e.ReportNameKorean133).HasMaxLength(255);
            entity.Property(e => e.ReportNameKorean48).HasMaxLength(255);
            entity.Property(e => e.ReportStyle).HasDefaultValueSql("((1))");
            entity.Property(e => e.ReportTitle).HasMaxLength(255);
            entity.Property(e => e.ReportType).HasDefaultValueSql("((1))");
            entity.Property(e => e.ReportViewer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TableNameExport)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.UserControlChart).HasMaxLength(255);

            entity.HasOne(d => d.Group).WithMany(p => p.SysreportLists)
                .HasForeignKey(d => d.GroupId)
                .HasConstraintName("FK_SYSReportList_SYSReportGroup");
        });

        modelBuilder.Entity<SysreportListCustom>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__SYSRepor__D5BD48E54628D391");

            entity.ToTable("SYSReportListCustom");

            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FormNo).HasMaxLength(255);
            entity.Property(e => e.FormNo48).HasMaxLength(255);
            entity.Property(e => e.FunctionReportName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsTa153template).HasColumnName("IsTA153Template");
            entity.Property(e => e.ParameterFormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReleaseTime).HasMaxLength(100);
            entity.Property(e => e.ReportFile)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReportName).HasMaxLength(255);
            entity.Property(e => e.ReportName48).HasMaxLength(255);
            entity.Property(e => e.ServiceQueryName).HasMaxLength(255);
            entity.Property(e => e.SortBy).HasMaxLength(255);
            entity.Property(e => e.SortOrder)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Ta153invTypeId).HasColumnName("TA153InvTypeID");
            entity.Property(e => e.Ta153reportId).HasColumnName("TA153ReportID");
            entity.Property(e => e.TableName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SysreportListExportOption>(entity =>
        {
            entity.HasKey(e => e.ExportOptionId);

            entity.ToTable("SYSReportListExportOption", tb => tb.HasComment("Tùy chỉnh xuất khẩu báo cáo"));

            entity.Property(e => e.ExportOptionId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("ExportOptionID");
            entity.Property(e => e.BranchId)
                .HasComment("BranchID = NULL là tùy chọn mặc định. Chi nhánh nào chưa thiết lập thì theo thằng mặc định này")
                .HasColumnName("BranchID");
            entity.Property(e => e.IsPrintLineNumber).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRepeatedColumnHeader)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Lặp lại tiêu đề cột ở các trang sau (PDF, Word)");
            entity.Property(e => e.IsShowCashierSign)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Hiển thị tên người ký là: Thủ kho");
            entity.Property(e => e.IsShowChiefAccountantSign)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Hiển thị tên người ký là: Kế toán trường");
            entity.Property(e => e.IsShowDirectorSign)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Hiển thị tên người ký là: Giám đốc");
            entity.Property(e => e.IsShowReporterSign)
                .HasDefaultValueSql("((1))")
                .HasComment("Hiển thị tên người ký là: Thủ quỹ");
            entity.Property(e => e.IsShowStockeeperSign)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Hiển thị tên người ký là: Thủ kho");
            entity.Property(e => e.IsSumToNextPage).HasDefaultValueSql("((0))");
            entity.Property(e => e.PageSize).HasDefaultValueSql("((0))");
            entity.Property(e => e.PrintNewPageToGroupName).HasMaxLength(128);
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("ReportID, liên kết dạng 1-1")
                .HasColumnName("ReportID");
            entity.Property(e => e.ReporterName)
                .HasMaxLength(128)
                .HasComment("Tên người ký là: Người lập");
            entity.Property(e => e.ReporterTitle)
                .HasMaxLength(128)
                .HasComment("Tiêu đề người ký là: Người lập");

            entity.HasOne(d => d.Branch).WithMany(p => p.SysreportListExportOptions)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SYSReportListExportOption_OrganizationUnit");

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportListExportOptions)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSReportListExportOption_SYSReportList");
        });

        modelBuilder.Entity<SysreportMemorized>(entity =>
        {
            entity.HasKey(e => e.MemorizedId).HasName("PK_SYSRCMemorized");

            entity.ToTable("SYSReportMemorized");

            entity.Property(e => e.MemorizedId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("MemorizedID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.LastViewDate).HasColumnType("datetime");
            entity.Property(e => e.MemorizedName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
            entity.Property(e => e.SubTitle).HasMaxLength(1000);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportMemorizeds)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSRCMemorized_SYSReportList");
        });

        modelBuilder.Entity<SysreportMergeType>(entity =>
        {
            entity.HasKey(e => e.ReportTypeId).HasName("PK_SYSReportType_1");

            entity.ToTable("SYSReportMergeType");

            entity.Property(e => e.ReportTypeId)
                .ValueGeneratedNever()
                .HasColumnName("ReportTypeID");
            entity.Property(e => e.FunctionReportName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MergeTemplate).HasMaxLength(100);
            entity.Property(e => e.MergeTemplateSample).HasMaxLength(100);
            entity.Property(e => e.PrimaryKeyMaster).HasMaxLength(50);
            entity.Property(e => e.ProcedureName).HasMaxLength(255);
            entity.Property(e => e.RefTypeList)
                .HasMaxLength(700)
                .HasDefaultValueSql("(N'/')");
            entity.Property(e => e.RefTypeListSample).HasMaxLength(700);
            entity.Property(e => e.ReportTypeName).HasMaxLength(255);
            entity.Property(e => e.ReportTypeNameChinese).HasMaxLength(255);
            entity.Property(e => e.ReportTypeNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ReportTypeNameKorean).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(50);
        });

        modelBuilder.Entity<SysreportOrder>(entity =>
        {
            entity.HasKey(e => e.OrderId);

            entity.ToTable("SYSReportOrder");

            entity.Property(e => e.OrderId)
                .HasMaxLength(125)
                .HasColumnName("OrderID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportOrders)
                .HasForeignKey(d => d.ReportId)
                .HasConstraintName("FK_SYSReportOrder_SYSReportList1");
        });

        modelBuilder.Entity<SysreportTemplate>(entity =>
        {
            entity.HasKey(e => e.ReportItemId).HasName("PK_FRTemplate_Custom");

            entity.ToTable("SYSReportTemplate");

            entity.Property(e => e.ReportItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReportItemID");
            entity.Property(e => e.Formula).HasMaxLength(255);
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.ReportItemAlias).HasMaxLength(20);
            entity.Property(e => e.ReportItemCode).HasMaxLength(20);
            entity.Property(e => e.ReportItemIndex).HasMaxLength(20);
            entity.Property(e => e.ReportItemName).HasMaxLength(255);
            entity.Property(e => e.SortOrder).HasMaxLength(20);

            entity.HasOne(d => d.Report).WithMany(p => p.SysreportTemplates)
                .HasForeignKey(d => d.ReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SYSReportTemplate_SYSReportList");
        });

        modelBuilder.Entity<SysreportVoucherTypeCategory>(entity =>
        {
            entity.HasKey(e => e.ReportVoucherTypeCategory).HasName("PK_ReportVoucherTypeCategory");

            entity.ToTable("SYSReportVoucherTypeCategory");

            entity.Property(e => e.ReportVoucherTypeCategory).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.ReportVoucherTypeCategoryName).HasMaxLength(50);
        });

        modelBuilder.Entity<SysreportVoucherTypeCategoryRefType>(entity =>
        {
            entity.HasKey(e => e.ReportVoucherTypeCategoryRefTypeId);

            entity.ToTable("SYSReportVoucherTypeCategory_RefType");

            entity.Property(e => e.ReportVoucherTypeCategoryRefTypeId).HasColumnName("ReportVoucherTypeCategory_RefTypeID");
            entity.Property(e => e.MasterTableName).HasMaxLength(50);
            entity.Property(e => e.PostedDateColumnName).HasMaxLength(50);
            entity.Property(e => e.RefDateColumnName).HasMaxLength(50);
            entity.Property(e => e.RefNoFinanceColumnName).HasMaxLength(50);
            entity.Property(e => e.RefNoManagementColumnName).HasMaxLength(50);
        });

        modelBuilder.Entity<SyssetNullColumnConfig>(entity =>
        {
            entity.HasKey(e => e.ConfigId);

            entity.ToTable("SYSSetNullColumnConfig");

            entity.Property(e => e.ConfigId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ConfigID");
            entity.Property(e => e.ColumnToSetNull).HasMaxLength(500);
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DetailCondition).HasMaxLength(255);
            entity.Property(e => e.MasterCondition).HasMaxLength(255);
            entity.Property(e => e.TableName).HasMaxLength(50);
        });

        modelBuilder.Entity<SyssubSystem>(entity =>
        {
            entity.HasKey(e => e.SubSystemId);

            entity.ToTable("SYSSubSystem", tb => tb.HasComment("Bảng danh sách phân hệ"));

            entity.Property(e => e.SubSystemId)
                .ValueGeneratedNever()
                .HasComment("PK = giá trị trên enum EnumSubSystem")
                .HasColumnName("SubSystemID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.SorOrder).HasComment("Thứ tự hiển thị trên giao diện \"ghi sổ/bỏ ghi theo lô\"");
            entity.Property(e => e.SubSystemCode)
                .HasMaxLength(50)
                .HasComment("Mã phân hệ ( = tên enum trên EnumSubSystem)");
            entity.Property(e => e.SubSystemName)
                .HasMaxLength(100)
                .HasComment("Tên phân hệ");
        });

        modelBuilder.Entity<SyssubSystemRefType>(entity =>
        {
            entity.ToTable("SYSSubSystemRefType", tb => tb.HasComment("Bảng mapping chứng từ và phân hệ (hiện đang dùng cho chức năng ghi sổ bỏ ghi theo lô và bảo trì)"));

            entity.Property(e => e.SyssubSystemRefTypeId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("SYSSubSystemRefTypeID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.IsPostBatch)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.MasterTableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng master của chứng từ, bỏ trống nghĩa là rule này có tác dụng với tất cả các chứng từ");
            entity.Property(e => e.RefOrderInSubSystem).HasComment("Thứ tự ghi sổ trong nội bộ mỗi phân hệ (trừ kho)");
            entity.Property(e => e.RefOrderWithRealName).HasComment("Thứ tự ghi sổ trong trường hợp đích danh k quan tâm thứ tự nhập xuất");
            entity.Property(e => e.RefType).HasComment("id reftype");
            entity.Property(e => e.SubSystemId)
                .HasComment("id phân hệ")
                .HasColumnName("SubSystemID");

            entity.HasOne(d => d.SubSystem).WithMany(p => p.SyssubSystemRefTypes)
                .HasForeignKey(d => d.SubSystemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SYSSubSystemRefType_SYSSubSystem");
        });

        modelBuilder.Entity<SysupdateField>(entity =>
        {
            entity.HasKey(e => e.UpdateFieldId).HasName("PK_UpdateField");

            entity.ToTable("SYSUpdateField");

            entity.Property(e => e.UpdateFieldId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UpdateFieldID");
            entity.Property(e => e.DictionaryCategory)
                .HasMaxLength(100)
                .HasComment("Trường này dùng để lấy các bảng để chuyển (VD: Chuyển tài khoản hạch toán thì giá trị=Account; Chuyển phòng ban thì giá trị =Department)");
            entity.Property(e => e.MasterTableName).HasMaxLength(100);
            entity.Property(e => e.TableColumnName)
                .HasMaxLength(100)
                .HasComment("Tên cột cần Update");
            entity.Property(e => e.TableType).HasComment("Trường này để xác định loại bảng (0=Danh mục; 1=chứng từ; 2=Số dư;3=Báo cáo;4=Ledger)");
            entity.Property(e => e.TableUpdate)
                .HasMaxLength(200)
                .HasComment("Danh sách bảng không cần Update");
            entity.Property(e => e.UpdateCondition)
                .HasMaxLength(4000)
                .HasComment("Điều kiện Update");
        });

        modelBuilder.Entity<SysuserInfo>(entity =>
        {
            entity.HasKey(e => e.UserInfoId).HasName("PK_UserInfo");

            entity.ToTable("SYSUserInfo");

            entity.Property(e => e.UserInfoId)
                .ValueGeneratedNever()
                .HasColumnName("UserInfoID");
            entity.Property(e => e.BranchName).HasMaxLength(255);
            entity.Property(e => e.ComputerName).HasMaxLength(255);
            entity.Property(e => e.ConnectionStringName).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DateTimeLogin).HasColumnType("datetime");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(50)
                .HasColumnName("IPAddress");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.UserName).HasMaxLength(255);
        });

        modelBuilder.Entity<SysvoucherTemplate>(entity =>
        {
            entity.HasKey(e => e.LayoutId);

            entity.ToTable("SYSVoucherTemplate");

            entity.HasIndex(e => new { e.RefType, e.LayoutName }, "IX_SYSVoucherTemplate_RefType");

            entity.Property(e => e.LayoutId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("LayoutID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsPublic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.LayoutName)
                .HasMaxLength(255)
                .HasComment("Tên của mẫu");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.RefTypeName)
                .HasMaxLength(255)
                .HasComment("Tên loại chứng từ");
            entity.Property(e => e.UserId)
                .HasComment("ID của người dùng. Nếu NULL thì là mẫu ngầm định")
                .HasColumnName("UserID");
            entity.Property(e => e.VoucherType).HasComment("Với mỗi RefType sẽ có các loại khác để hiển thị giao diện. Ví dụ trên phân hệ Quỹ, Ngân hàng là Lý do thu,chi");
        });

        modelBuilder.Entity<SysvoucherTemplateDetail>(entity =>
        {
            entity.HasKey(e => e.LayoutDetailId);

            entity.ToTable("SYSVoucherTemplateDetail");

            entity.HasIndex(e => e.LayoutId, "IX_SYSVoucherTemplateDetail_RefType").HasFillFactor(90);

            entity.Property(e => e.LayoutDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("LayoutDetailID");
            entity.Property(e => e.GridName)
                .HasMaxLength(50)
                .HasComment("Tên của grid, dùng để phân biệt trên các chứng từ có nhiều grid");
            entity.Property(e => e.GridType).HasComment("Xác định loại grid, 0=Grid Detail, 1=Grid other");
            entity.Property(e => e.IsHiddenTabByVatmethod)
                .HasDefaultValueSql("((0))")
                .HasComment("Tab này có được hiển thị khi chọn PP khấu trừ thuế trực tiếp theo doanh thu hay không?")
                .HasColumnName("IsHiddenTabByVATMethod");
            entity.Property(e => e.IsShowOnMaster)
                .HasDefaultValueSql("((0))")
                .HasComment("Tab này có được hiển thị khi chọn PP khấu trừ thuế trực tiếp theo doanh thu hay không?");
            entity.Property(e => e.IsTabCustomField)
                .HasDefaultValueSql("((0))")
                .HasComment("Là tab chứa các thông tin bổ sung");
            entity.Property(e => e.LayoutId)
                .HasComment("FK")
                .HasColumnName("LayoutID");
            entity.Property(e => e.TabCaption)
                .HasMaxLength(50)
                .HasComment("Tiêu đề");
            entity.Property(e => e.TabCaptionChinese).HasMaxLength(100);
            entity.Property(e => e.TabCaptionEnglish).HasMaxLength(100);
            entity.Property(e => e.TabCaptionKorean).HasMaxLength(100);
            entity.Property(e => e.TabIndex).HasComment("Thứ tự của tab");
            entity.Property(e => e.TabVisible)
                .HasDefaultValueSql("((1))")
                .HasComment("Tab này có được hiển thị không");
            entity.Property(e => e.TemplateConfig).HasComment("Cấu hình của grid tương ứng với tab đang chọn");

            entity.HasOne(d => d.Layout).WithMany(p => p.SysvoucherTemplateDetails)
                .HasForeignKey(d => d.LayoutId)
                .HasConstraintName("FK_SYSVoucherTemplateDetail_SYSVoucherTemplate");
        });

        modelBuilder.Entity<Ta011gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_011GTGT_Detail", tb => tb.HasComment("Bảng kê bán ra thuế GTGT"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản dùng cho khấu trừ thuế để phân biệt thuế đầu ra, thuế đầu vào");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng, sử dụng cho in kèm địa chỉ");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Người mua");
            entity.Property(e => e.AmountDecimalDigits)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Mã nhóm HHDV mua vào: 01, 02, 03, 04");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Mặt hàng");
            entity.Property(e => e.InvoiceTemplate)
                .HasMaxLength(25)
                .HasComment("Ký hiệu mẫu hóa đơn");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxAmount)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Doanh số chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefIdstring).HasColumnName("VoucherRefIDString");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc (sử dụng khi in có tích chọn Hiển thị chứng từ trong phần ghi chú)");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta011gtgtDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_011GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta011tndnDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_011TNDN_Detail", tb => tb.HasComment("Chi tiết phụ lục tờ khai thuế TNDN tạm tính, mẫu PL 01-1/TNDN"));

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền phân bổ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AllocationRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Tỷ lệ phân bổ")
                .HasColumnType("decimal(9, 4)");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .HasComment("Tên doanh nghiệp, Cơ sở sản xuất");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Số thứ tự");
            entity.Property(e => e.TaxCompanyId)
                .HasMaxLength(25)
                .HasComment("Mã cơ quan thuế cấp Cục")
                .HasColumnName("TaxCompanyID");
            entity.Property(e => e.TaxCompanyManagementId)
                .HasMaxLength(25)
                .HasComment("Mã cơ quan thuế quản lý trực tiêp")
                .HasColumnName("TaxCompanyManagementID");
            entity.Property(e => e.TaxCompanyManagementName)
                .HasMaxLength(128)
                .HasComment("Tên cơ quan thuế quản lý trực tiêp");
            entity.Property(e => e.TaxCompanyName)
                .HasMaxLength(128)
                .HasComment("Tên cơ quan thuế cấp Cục");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta011tndnDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_011TNDN_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta011ttdbDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_011TTDB_Detail", tb => tb.HasComment("Phụ lục 01-1/TTDB: Bảng kê bán ra"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Người mua");
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("((0))")
                .HasComment("Doanh số chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày phát hành")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemCategoryCode).HasMaxLength(50);
            entity.Property(e => e.InventoryItemCategoryName)
                .HasMaxLength(255)
                .HasComment("Tên nhóm HHDV");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên hàng hóa, dịch vụ");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.Unit).HasMaxLength(20);
            entity.Property(e => e.UnitPrice)
                .HasDefaultValueSql("((0))")
                .HasComment("Đơn giá")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta011ttdbDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_011TTDB_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta011ttdbDetailTt195>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_011TTDB_Detail_TT195");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.DeductTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityOnUnit)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RemainingTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SpecialTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SpecialTaxAmountOnUnit)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.TotalDeductSpecialTaxAmount).HasColumnType("decimal(22, 8)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta011ttdbDetailTt195s)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_011TTDB_Detail_TT195_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta012gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_012GTGT_Detail", tb => tb.HasComment("Bảng kê mua vào thuế GTGT"));

            entity.HasIndex(e => e.RefId, "IX_TA_012GTGT_Detail_Composite").HasFillFactor(90);

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản dùng cho khấu trừ thuế để phân biệt thuế đầu ra, thuế đầu vào");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng, sử dụng cho in kèm địa chỉ");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên người bán");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Mã nhóm HHDV mua vào: 01, 02, 03, 04");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Mặt hàng");
            entity.Property(e => e.InvestmentProjectCode).HasMaxLength(12);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.InvoiceTemplate)
                .HasMaxLength(25)
                .HasComment("Ký hiệu mẫu hóa đơn");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.OriginRefId).HasColumnName("OriginRefID");
            entity.Property(e => e.PurchasePurposeCode).HasMaxLength(20);
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxAmount)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefIdstring).HasColumnName("VoucherRefIDString");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc (sử dụng khi in có tích chọn Hiển thị chứng từ trong phần ghi chú)");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta012gtgtDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_012GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta012gtgtDetailValid>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_012GTGT_Detail_Valid", tb => tb.HasComment("Bảng tạm lưu trữ dữ liệu bảng kê mua vào để  dùng kiểm tra trùng hóa đơn"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản dùng cho khấu trừ thuế để phân biệt thuế đầu ra, thuế đầu vào");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng, sử dụng cho in kèm địa chỉ");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Tên người bán");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Mã nhóm HHDV mua vào: 01, 02, 03, 04");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Mặt hàng");
            entity.Property(e => e.InvestmentProjectCode).HasMaxLength(12);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.InvoiceTemplate)
                .HasMaxLength(25)
                .HasComment("Ký hiệu mẫu hóa đơn");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.PurchasePurposeCode).HasMaxLength(20);
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxAmount)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Giá trị HHDV chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefIdstring).HasColumnName("VoucherRefIDString");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc (sử dụng khi in có tích chọn Hiển thị chứng từ trong phần ghi chú)");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");
        });

        modelBuilder.Entity<Ta012gtgtDetailVoucher>(entity =>
        {
            entity.ToTable("TA_012GTGT_DetailVoucher");

            entity.HasIndex(e => e.RefDetailId, "IX_TA_012GTGT_DetailVoucher_RefDetailID");

            entity.Property(e => e.Ta012gtgtdetailVoucherId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("TA012GTGTDetailVoucherID");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.VoucherRefDetailId).HasColumnName("VoucherRefDetailID");

            entity.HasOne(d => d.RefDetail).WithMany(p => p.Ta012gtgtDetailVouchers)
                .HasForeignKey(d => d.RefDetailId)
                .HasConstraintName("FK_TA_012GTGT_DetailVoucher_TA_012GTGT_Detail");
        });

        modelBuilder.Entity<Ta012ttdbDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_012TTDB_Detail", tb => tb.HasComment("Phụ lục 01-2/TTDB: Bảng kê mua vào"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.DeductTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số thuế TTĐB đã được khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Nhóm I hay nhóm II");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày phát hành")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên nguyên liệu đã nộp thuế TTDB");
            entity.Property(e => e.ProductName)
                .HasMaxLength(255)
                .HasComment("Tên mặt hàng");
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lượng đơn vị nguyên liệu mua vào/Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityOnUnit)
                .HasDefaultValueSql("((0))")
                .HasComment("Lượng nguyên liệu/1 đơn vị SP tiêu thụ")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainingTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số thuế TTDB chưa được khấu trừ đến kỳ này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.SpecialTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế TTĐB đã nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialTaxAmountOnUnit)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế TTDB trên 1 đơn vị nguyên liệu mua vào")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalDeductSpecialTaxAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta012ttdbDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_012TTDB_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta012ttdbDetailTt80>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_012TTDB_Detail_TT80");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.DeductSpecialTaxNextPeriodAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.DeductTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.ProductName).HasMaxLength(255);
            entity.Property(e => e.Quantity)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityConsumedPeriod)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.QuantityOnUnit)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RemainingTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SpecialTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.SpecialTaxAmountOnUnit)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.TotalDeductSpecialTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.Unit).HasMaxLength(20);

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta012ttdbDetailTt80s)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_012TTDB_Detail_TT80_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta015gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_015GTGT_Detail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.ItemTaxDate)
                .HasComment("Ngày chứng từ nộp thuế")
                .HasColumnType("datetime");
            entity.Property(e => e.ItemTaxNo)
                .HasMaxLength(50)
                .HasComment("Số chứng từ nộp tiền thuế");
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((0))")
                .HasComment("Số thứ tự");
            entity.Property(e => e.TaxAddress)
                .HasMaxLength(255)
                .HasComment("Nơi nộp thuế");
            entity.Property(e => e.TaxAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền thuế đã nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxCompanyDecisionId)
                .HasMaxLength(25)
                .HasComment("Mã cơ quan thuế quản lý")
                .HasColumnName("TaxCompanyDecisionID");
            entity.Property(e => e.TaxCompanyDecisionName)
                .HasMaxLength(255)
                .HasComment("Tên cơ quan thuế quản lý");
            entity.Property(e => e.TaxCompanyId)
                .HasMaxLength(25)
                .HasComment("Mã cơ quan thuế cấp Cục")
                .HasColumnName("TaxCompanyID");
            entity.Property(e => e.TaxCompanyName)
                .HasMaxLength(255)
                .HasComment("Tên cơ quan thuế cấp Cục");
            entity.Property(e => e.TaxOffice)
                .HasMaxLength(255)
                .HasComment("Cơ quan thuế");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta015gtgtDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_015GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta016gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_016GTGT_Detail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.BranchTaxOffice)
                .HasMaxLength(255)
                .HasComment("Chi cục thuế");
            entity.Property(e => e.BranchTaxOfficeId)
                .HasMaxLength(25)
                .HasColumnName("BranchTaxOfficeID");
            entity.Property(e => e.District).HasMaxLength(255);
            entity.Property(e => e.DistrictId)
                .HasMaxLength(255)
                .HasColumnName("DistrictID");
            entity.Property(e => e.FactoryName)
                .HasMaxLength(255)
                .HasComment("Tên cơ sở sản xuất");
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.ProvinceOrCity).HasMaxLength(255);
            entity.Property(e => e.ProvinceOrCityId)
                .HasMaxLength(255)
                .HasColumnName("ProvinceOrCityID");
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("('((0))')")
                .HasComment("Số thứ tự");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.TaxOffice)
                .HasMaxLength(255)
                .HasComment("Cục thuế");
            entity.Property(e => e.TaxOfficeId)
                .HasMaxLength(25)
                .HasColumnName("TaxOfficeID");
            entity.Property(e => e.TaxableAmount)
                .HasComment("Số thuế phải nộp cho từng địa phương nơi có CSSX trực thuộc")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxableAmount6LessThan16)
                .HasComment("Số thuế phải nộp cho từng địa phương nơi có CSSX trực thuộc trường hợp [6] < [16]")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTurnoverAmount)
                .HasComment("Tổng doanh thu")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnoverAmount10)
                .HasComment("Doanh thu của hàng hóa chịu thuế 10%")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnoverAmount5)
                .HasComment("Doanh thu của hàng hóa chịu thuế 5%")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta016gtgtDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_016GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta017gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_017GTGT_Detail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationRate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.ProjectWorkName).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SaleAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.TaxAmount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxCompanyDecisionId)
                .HasMaxLength(25)
                .HasColumnName("TaxCompanyDecisionID");
            entity.Property(e => e.TaxCompanyDecisionName).HasMaxLength(255);
            entity.Property(e => e.TaxCompanyId)
                .HasMaxLength(25)
                .HasColumnName("TaxCompanyID");
            entity.Property(e => e.TaxCompanyName).HasMaxLength(255);

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta017gtgtDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_017GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta01Gtgtdeclaration>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK_TAVATDeclaration");

            entity.ToTable("TA_01_GTGTDeclaration", tb => tb.HasComment("Bảng master tờ khai thuế 01/GTGT"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AdditionTime).HasComment("Lần bổ sung");
            entity.Property(e => e.AdjustDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Ngày lập tờ khai bổ sung")
                .HasColumnType("datetime");
            entity.Property(e => e.AdjustDescription)
                .HasMaxLength(255)
                .HasComment("Lý do khác");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeclarationTerm).HasComment("Kỳ kê khai. 0 = Kê thuế theo Quý; 1 = Kê thuế theo tháng");
            entity.Property(e => e.DescriptionDate)
                .HasComment("KHBS: Ngày của lệnh hoàn thuế")
                .HasColumnType("datetime");
            entity.Property(e => e.DescriptionDayReceive)
                .HasDefaultValueSql("((0))")
                .HasComment("KHBS: Số ngày được nhận tiền hoàn thuế");
            entity.Property(e => e.DescriptionLateAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("KHBS: Số tiền chậm nộp phần giải thích")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DescriptionNo)
                .HasMaxLength(25)
                .HasComment("KHBS: Lệnh hoàn trả khoản thu NSNN hoặc Lệnh hoàn trả kiêm bù trừ khoản thu NSNN số");
            entity.Property(e => e.ExtendReasonType)
                .HasMaxLength(5)
                .HasDefaultValueSql("((0))")
                .HasComment("Lý do gia hạn: 01 = Doanh nghiệp có quy mô nhỏ và vừa; 02 = Doanh nghiệp có nhiều lao động; 03 = Doanh nghiệp kinh doanh ô tô, nhà ở; 99 = Lý do khác");
            entity.Property(e => e.FromDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.IndustryType)
                .HasDefaultValueSql("((0))")
                .HasComment("Danh mục ngành nghề kinh doanh: 0 = kinh doanh hàng hóa thông thường; 1 = khai thác dầu khí; 2 = xổ số kiến thiết");
            entity.Property(e => e.IsAddition).HasComment("False=Tờ khai in lần đầu; True=Tờ khai bổ sung");
            entity.Property(e => e.IsExistPl011gtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 011GTGT")
                .HasColumnName("IsExistPL011GTGT");
            entity.Property(e => e.IsExistPl012gtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 012GTGT")
                .HasColumnName("IsExistPL012GTGT");
            entity.Property(e => e.IsExistPl013gtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 013GTGT")
                .HasColumnName("IsExistPL013GTGT");
            entity.Property(e => e.IsExistPl014aGtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 014aGTGT")
                .HasColumnName("IsExistPL014aGTGT");
            entity.Property(e => e.IsExistPl014bGtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 014bGTGT")
                .HasColumnName("IsExistPL014bGTGT");
            entity.Property(e => e.IsExistPl015gtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 015GTGT")
                .HasColumnName("IsExistPL015GTGT");
            entity.Property(e => e.IsExistPl016gtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 016GTGT")
                .HasColumnName("IsExistPL016GTGT");
            entity.Property(e => e.IsExistPl017gtgt)
                .HasDefaultValueSql("((0))")
                .HasComment("Tờ khai kèm phụ lục 017GTGT")
                .HasColumnName("IsExistPL017GTGT");
            entity.Property(e => e.IsExtension)
                .HasDefaultValueSql("((0))")
                .HasComment("Gia hạn: 1 = có gia hạn; 0 = Không gia hạn");
            entity.Property(e => e.LateAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số tiền chậm nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LateDays).HasComment("Số ngày nộp chậm");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.SignDate)
                .HasComment("Ngày ký")
                .HasColumnType("datetime");
            entity.Property(e => e.Signer)
                .HasMaxLength(128)
                .HasComment("Người ký");
            entity.Property(e => e.Ta013gtgtJournalMemo)
                .HasMaxLength(500)
                .HasComment("Các tài liệu khác (nếu có) trên bảng kê thuế 0%")
                .HasColumnName("TA_013GTGT_JournalMemo");
            entity.Property(e => e.Tamonth)
                .HasComment("Tháng/Quý")
                .HasColumnName("TAMonth");
            entity.Property(e => e.TaxAgentEmployee)
                .HasMaxLength(128)
                .HasComment("Tên nhân viên đại lý thuế");
            entity.Property(e => e.TaxAgentNo)
                .HasMaxLength(50)
                .HasComment("Chứng chỉ hành nghề số của nhân viên đại lý thuế");
            entity.Property(e => e.TaxAmountRedemption)
                .HasComment("KHBS: Số tiền chậm nộp (của phần thuế được hoàn)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxCompanyDecisionId)
                .HasMaxLength(25)
                .HasComment("KHBS: Mã cơ quan thuế quyết định hoàn thuế")
                .HasColumnName("TaxCompanyDecisionID");
            entity.Property(e => e.TaxCompanyDecisionName)
                .HasMaxLength(128)
                .HasComment("KHBS: Tên cơ quan thuế quyết định hoàn thuế");
            entity.Property(e => e.TaxCompanyId)
                .HasMaxLength(25)
                .HasComment("KHBS: Mã cơ quan thuế cấp Cục")
                .HasColumnName("TaxCompanyID");
            entity.Property(e => e.TaxCompanyName)
                .HasMaxLength(128)
                .HasComment("KHBS: Tên cơ quan thuế cấp Cục");
            entity.Property(e => e.Tayear)
                .HasComment("Năm")
                .HasColumnName("TAYear");
            entity.Property(e => e.TemplateNo)
                .HasMaxLength(100)
                .HasComment("Mẫu số");
            entity.Property(e => e.ToDate)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Đến ngày")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Ta01Tbvmtdetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_01_TBVMTDetail");

            entity.HasIndex(e => e.RefId, "IX_TA_01_TBVMTDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Nhóm I, II, III");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Tên hàng hóa");
            entity.Property(e => e.Quantity)
                .HasComment("Số lượng")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxAmount)
                .HasComment("Thuế BVMT phải nộp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxAmountLevel)
                .HasComment("Mức thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");

            entity.HasOne(d => d.Ref).WithMany(p => p.Ta01Tbvmtdetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA_01_TBVMTDetail_TADeclaration");
        });

        modelBuilder.Entity<Ta01ttdbDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA_01_TTDB_Detail");

            entity.ToTable("TA_01TTDB_Detail", tb => tb.HasComment("Chi tiết tờ khai thuế 01/TTĐB"));

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("AppendixID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasComment("Nhóm");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(20)
                .HasComment("Mã chỉ tiều");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasComment("Tên chỉ tiêu");
            entity.Property(e => e.OffsetTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Quantity)
                .HasComment("Sản lượng tiêu thụ")
                .HasColumnType("decimal(22, 8)");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.RemainingSpecialTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.SpecialTaxAmount)
                .HasComment("Thuế TTĐB phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialTaxDeductionAmount)
                .HasComment("Thuế TTĐB được khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SpecialTaxTurnOverAmount)
                .HasComment("Giá tính thuế TTĐB")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate)
                .HasComment("Thuế suất (%)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Doanh số bán (chưa có thuế GTGT)")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đơn vị tính");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta01ttdbDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_01TTDB_Detail_TADeclarationAppendix1");
        });

        modelBuilder.Entity<Ta02GtgtAdjustmentDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_02_GTGT_AdjustmentDetail", tb => tb.HasComment("Bảng giải trình khai bổ sung cho tờ khai thuế GTGT dành cho dự án đầu tư"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AdjustAmount)
                .HasComment("Số điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .HasComment("Mã số chỉ tiêu");
            entity.Property(e => e.DescriptionName)
                .HasMaxLength(255)
                .HasComment("Tên chỉ tiêu");
            entity.Property(e => e.DiffAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Chênh lệch")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrgAmount)
                .HasComment("Số đã kê khai")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Part)
                .HasMaxLength(255)
                .HasComment("Phần : Phần I, phần II, Phần III của  bản giải trình");
            entity.Property(e => e.RefId)
                .HasComment("Khóa ngoại")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasDefaultValueSql("('((0))')");
        });

        modelBuilder.Entity<Ta02gtgtAppendixDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA_02_GTGT_012GTGT_Detail");

            entity.ToTable("TA_02GTGT_AppendixDetail", tb => tb.HasComment("Chi tiết Phụ lục Tờ khai 02/GTGT"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản dùng cho khấu trừ thuế để phân biệt thuế đầu ra, thuế đầu vào");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng, sử dụng cho in kèm địa chỉ");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Người bán");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasComment("Lưu các số từ 0 đến 9 để biết dòng chứng từ thuộc phụ lục nào");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries).HasMaxLength(50);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(50);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.OriginRefId).HasColumnName("OriginRefID");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("ID nhóm HHDV mua vào")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của Tờ khai (TADeclaration)")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự");
            entity.Property(e => e.TaxAmount)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Doanh số chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefIdstring).HasColumnName("VoucherRefIDString");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc (sử dụng khi in có tích chọn Hiển thị chứng từ trong phần ghi chú)");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta02gtgtAppendixDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_02_GTGT_012GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta02gtgtAppendixDetailValid>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_02GTGT_AppendixDetail_Valid", tb => tb.HasComment("Bảng tạm dùng để lưu trữ dữ liệu bảng kê mua vào dành cho dự án đầu tư dùng để kiểm tra trùng hóa đơn"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản dùng cho khấu trừ thuế để phân biệt thuế đầu ra, thuế đầu vào");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng, sử dụng cho in kèm địa chỉ");
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Người bán");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((0))")
                .HasComment("Lưu các số từ 0 đến 9 để biết dòng chứng từ thuộc phụ lục nào");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries).HasMaxLength(50);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(50);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.PurchasePurposeId)
                .HasComment("ID nhóm HHDV mua vào")
                .HasColumnName("PurchasePurposeID");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của Tờ khai (TADeclaration)")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự");
            entity.Property(e => e.TaxAmount)
                .HasComment("Tiền thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Doanh số chưa thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefIdstring).HasColumnName("VoucherRefIDString");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc (sử dụng khi in có tích chọn Hiển thị chứng từ trong phần ghi chú)");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");
        });

        modelBuilder.Entity<Ta02gtgtAppendixDetailVoucher>(entity =>
        {
            entity.HasKey(e => e.Ta012gtgtdetailVoucherId);

            entity.ToTable("TA_02GTGT_AppendixDetailVoucher");

            entity.Property(e => e.Ta012gtgtdetailVoucherId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("TA012GTGTDetailVoucherID");
            entity.Property(e => e.RefDetailId)
                .HasComment("ID của bảng TA_012GTGT_Detail")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("RefID của bảng kê (RefID của bảng TA_012GTGT_Detail)")
                .HasColumnName("RefID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
        });

        modelBuilder.Entity<Ta03TndnDocument>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_03_TNDN_Document");

            entity.HasIndex(e => e.RefId, "IX_TA_03_TNDN_Document_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasComment("Tên tài liệu");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Thứ tự dòng");

            entity.HasOne(d => d.Ref).WithMany(p => p.Ta03TndnDocuments)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA_03_TNDN_Document_TADeclaration");
        });

        modelBuilder.Entity<Ta03gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_03GTGT_Detail");

            entity.HasIndex(e => e.RefId, "IX_TA_03GTGT_Detail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvoiceRefId).HasColumnName("InvoiceRefID");
            entity.Property(e => e.InvoiceTemplate).HasMaxLength(25);
            entity.Property(e => e.JournalMemo).HasMaxLength(500);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.VoucherBranchId).HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.Ta03gtgtDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA_03GTGT_Detail_TADeclaration");
        });

        modelBuilder.Entity<Ta03tndn114detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_03TNDN_114Detail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.DataType).HasComment("Kiểu dữ liệu (Theo Enum kiểu dữ liệu chung của chương trình):EnumDataType");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .HasComment("Mã thông tin chung");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasComment("Tên thông tin chung");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.Value)
                .HasMaxLength(50)
                .HasComment("Giá trị của thông tin");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta03tndn114details)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_03TNDN_114Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta03tndn1adetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA_03_TNDN_1ADetail");

            entity.ToTable("TA_03TNDN_1ADetail", tb => tb.HasComment("Phụ lục 03-1A/TNDN Kết quả sản xuất kinh doanh"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.DataType).HasComment("Kiểu dữ liệu (Theo Enum kiểu dữ liệu chung của chương trình):EnumDataType");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .HasComment("Mã thông tin chung");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasComment("Tên thông tin chung");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.Value)
                .HasMaxLength(50)
                .HasComment("Giá trị của thông tin");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta03tndn1adetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_03TNDN_1ADetail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta03tndn2adetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA_03_TNDN_2ADetail");

            entity.ToTable("TA_03TNDN_2ADetail", tb => tb.HasComment("Phụ lục 03-2A/TNDN: Chuyển lỗ từ hoạt động sản xuất kinh doanh"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasComment("Groupname");
            entity.Property(e => e.LostAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lỗ phát sinh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LostAmountCurrentTranfer)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lỗ đã chuyển trong kỳ này")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LostAmountNextTransfer).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LostAmountRemain)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lỗ còn được chuyển sang các kỳ tính thuế sau")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LostAmountTranfer)
                .HasDefaultValueSql("((0))")
                .HasComment("Số lỗ đã chuyển trong các kỳ trước")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.Tayear)
                .HasComment("Năm phát sinh lỗ")
                .HasColumnName("TAYear");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta03tndn2adetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_03TNDN_2ADetail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta03tndn5detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_03TNDN_5Detail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.Value).HasMaxLength(50);

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta03tndn5details)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_03TNDN_5Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta03tndn8detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_03TNDN_8Detail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AllocationRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.DiffTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DistrictId)
                .HasMaxLength(50)
                .HasColumnName("DistrictID");
            entity.Property(e => e.DistrictName).HasMaxLength(255);
            entity.Property(e => e.ExpenseAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ItemName).HasMaxLength(100);
            entity.Property(e => e.ItemTypeCode).HasMaxLength(20);
            entity.Property(e => e.ItemTypeName).HasMaxLength(150);
            entity.Property(e => e.PaidTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PriorTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ProvinceId)
                .HasMaxLength(50)
                .HasColumnName("ProvinceID");
            entity.Property(e => e.ProvinceName).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RemainingTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxCode).HasMaxLength(50);
            entity.Property(e => e.TaxOfficeBranchId)
                .HasMaxLength(50)
                .HasColumnName("TaxOfficeBranchID");
            entity.Property(e => e.TaxOfficeBranchName).HasMaxLength(255);

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta03tndn8details)
                .HasForeignKey(d => d.AppendixId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TA_03TNDN_8Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta03tndn92detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_03TNDN_92Detail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.Value).HasMaxLength(50);

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta03tndn92details)
                .HasForeignKey(d => d.AppendixId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TA_03TNDN_92Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta041gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_041GTGT_Detail");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .HasComment("Tài khoản dùng cho khấu trừ thuế để phân biệt thuế đầu ra, thuế đầu vào");
            entity.Property(e => e.AccountObjectAddress)
                .HasMaxLength(400)
                .HasComment("Địa chỉ của đối tượng, sử dụng cho in kèm địa chỉ");
            entity.Property(e => e.AccountObjectName)
                .HasMaxLength(400)
                .HasComment("Người mua");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.CompanyTaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Mã nhóm HHDV mua vào: 01, 02, 03, 04");
            entity.Property(e => e.InvDate)
                .HasComment("Ngày hóa đơn")
                .HasColumnType("datetime");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .HasComment("Số hóa đơn");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu hóa đơn");
            entity.Property(e => e.InventoryItemName)
                .HasMaxLength(500)
                .HasComment("Mặt hàng");
            entity.Property(e => e.InvoiceTemplate)
                .HasMaxLength(25)
                .HasComment("Ký hiệu mẫu hóa đơn");
            entity.Property(e => e.Note)
                .HasMaxLength(255)
                .HasComment("Ghi chú");
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TurnOverAmount)
                .HasComment("Doanh số bán")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherBranchId)
                .HasComment("Chi nhánh của chứng từ gốc")
                .HasColumnName("VoucherBranchID");
            entity.Property(e => e.VoucherRefDetailId)
                .HasComment("RefDetailID của chứng từ")
                .HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ")
                .HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefIdstring).HasColumnName("VoucherRefIDString");
            entity.Property(e => e.VoucherRefNo)
                .HasMaxLength(20)
                .HasComment("Số chứng từ gốc (sử dụng khi in có tích chọn Hiển thị chứng từ trong phần ghi chú)");
            entity.Property(e => e.VoucherRefType).HasComment("RefType của chứng từ (bổ sung thêm cho mục đích DrillDown)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta041gtgtDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_041GTGT_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta042gtgtDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_042GTGT_Detail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AmountWithoutVat)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("AmountWithoutVAT");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.CreatedBy).HasMaxLength(100);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Vatrate)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");

            entity.HasOne(d => d.Ref).WithMany(p => p.Ta042gtgtDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TA_042GTGT_Detail_TADeclaration");
        });

        modelBuilder.Entity<Ta05qttncn01Detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_05QTTNCN01_Detail");

            entity.HasIndex(e => e.AppendixId, "IX_TA_05QTTNCN01_Detail_AppendixID");

            entity.HasIndex(e => e.RefId, "IX_TA_05QTTNCN01_Detail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.Col07).HasMaxLength(255);
            entity.Property(e => e.Col08).HasMaxLength(255);
            entity.Property(e => e.Col09).HasMaxLength(255);
            entity.Property(e => e.Col11).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col12).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col13).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col14).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col15).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col16).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col17).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col18).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col19).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col20).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col21).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col22).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col23).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col24).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FamilyCoditionDeductionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReduceSelfTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta05qttncn01Details)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_05QTTNCN01_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta05qttncn01DetailTt80>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_05QTTNCN01_Detail_TT80");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.Col07).HasMaxLength(255);
            entity.Property(e => e.Col08).HasMaxLength(255);
            entity.Property(e => e.Col09).HasMaxLength(255);
            entity.Property(e => e.Col09a).HasMaxLength(255);
            entity.Property(e => e.Col12).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col13).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col14).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col15).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col16).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col17).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col18).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col19).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col20).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col21).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col22).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col23).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col24).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col25).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col26).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FamilyCoditionDeductionAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ReduceSelfTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta05qttncn01DetailTt80s)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_05QTTNCN01_Detail_TT80_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta05qttncn02Detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_05QTTNCN02_Detail");

            entity.HasIndex(e => e.AppendixId, "IX_TA_05QTTNCN02_Detail_AppendixID");

            entity.HasIndex(e => e.RefId, "IX_TA_05QTTNCN02_Detail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.Col07).HasMaxLength(255);
            entity.Property(e => e.Col08).HasMaxLength(255);
            entity.Property(e => e.Col09).HasMaxLength(255);
            entity.Property(e => e.Col11).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col12).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col13).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col14).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col15).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col16).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col17).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta05qttncn02Details)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_05QTTNCN02_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta05qttncn02DetailTt80>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_05QTTNCN02_Detail_TT80");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.Col07).HasMaxLength(255);
            entity.Property(e => e.Col08).HasMaxLength(255);
            entity.Property(e => e.Col09).HasMaxLength(255);
            entity.Property(e => e.Col09a).HasMaxLength(255);
            entity.Property(e => e.Col11).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col12).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col13).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col14).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col15).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Col16).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta05qttncn02DetailTt80s)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_05QTTNCN02_Detail_TT80_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta05qttncn03Detail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_05QTTNCN03_Detail");

            entity.HasIndex(e => e.AppendixId, "IX_TA_05QTTNCN03_Detail_AppendixID");

            entity.HasIndex(e => e.RefId, "IX_TA_05QTTNCN03_Detail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.Col07).HasMaxLength(255);
            entity.Property(e => e.Col08).HasMaxLength(255);
            entity.Property(e => e.Col09).HasMaxLength(255);
            entity.Property(e => e.Col10).HasColumnType("datetime");
            entity.Property(e => e.Col11).HasMaxLength(255);
            entity.Property(e => e.Col12).HasMaxLength(255);
            entity.Property(e => e.Col13).HasMaxLength(255);
            entity.Property(e => e.Col14).HasMaxLength(255);
            entity.Property(e => e.Col15).HasMaxLength(255);
            entity.Property(e => e.Col16).HasMaxLength(255);
            entity.Property(e => e.Col17).HasMaxLength(255);
            entity.Property(e => e.Col18).HasMaxLength(255);
            entity.Property(e => e.Col19).HasMaxLength(255);
            entity.Property(e => e.Col20).HasMaxLength(255);
            entity.Property(e => e.ReduceDependTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta05qttncn03Details)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_05QTTNCN03_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<Ta05qttncn03DetailTt80>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_05QTTNCN03_Detail_TT80");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.Col07).HasMaxLength(255);
            entity.Property(e => e.Col08).HasMaxLength(255);
            entity.Property(e => e.Col09).HasMaxLength(255);
            entity.Property(e => e.Col10).HasColumnType("datetime");
            entity.Property(e => e.Col11).HasMaxLength(255);
            entity.Property(e => e.Col12).HasMaxLength(255);
            entity.Property(e => e.Col13).HasMaxLength(255);
            entity.Property(e => e.Col14).HasMaxLength(255);
            entity.Property(e => e.ReduceDependTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Appendix).WithMany(p => p.Ta05qttncn03DetailTt80s)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_05QTTNCN03_Detail_TT80_TADeclarationAppendix");
        });

        modelBuilder.Entity<TaBc26acInvoiceStatement>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("TA_BC26AC_InvoiceStatement", tb => tb.HasComment("Bảng master báo cáo tình hình sử dụng hóa đơn"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.Circular)
                .HasMaxLength(50)
                .HasComment("Thông tư");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.RefType).HasComment("Loại chứng từ");
            entity.Property(e => e.Reporter)
                .HasMaxLength(255)
                .HasComment("Người lập báo cáo");
            entity.Property(e => e.SignDate)
                .HasComment("Ngày ký")
                .HasColumnType("datetime");
            entity.Property(e => e.Signer)
                .HasMaxLength(255)
                .HasComment("Người ký");
            entity.Property(e => e.Tavatquarter)
                .HasComment("Tháng/Quý")
                .HasColumnName("TAVATQuarter");
            entity.Property(e => e.Tavatyear)
                .HasComment("Năm")
                .HasColumnName("TAVATYear");
            entity.Property(e => e.TemplateNo)
                .HasMaxLength(100)
                .HasComment("Mẫu số");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TaBc26acInvoiceStatementDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_BC26AC_InvoiceStatement_Detail", tb => tb.HasComment("Chi tiết Báo cáo tình hình sử dung hóa đơn"));

            entity.HasIndex(e => e.RefId, "IX_TA_BC26AC_InvoiceStatement_Detail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.CancelInvNo)
                .HasMaxLength(4000)
                .HasComment("Số hóa đơn Hủy");
            entity.Property(e => e.CancelQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Tổng số lượng hóa đơn Hủy")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ClosingFromInvNo)
                .HasMaxLength(20)
                .HasComment("Tồn cuối kỳ - Từ số");
            entity.Property(e => e.ClosingToInvNo)
                .HasMaxLength(20)
                .HasComment("Tồn cuối kỳ - Đến số");
            entity.Property(e => e.DeletedInvNo)
                .HasMaxLength(4000)
                .HasComment("Số hóa đơn xóa");
            entity.Property(e => e.DeletedQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Tổng số lượng hóa đơn xóa")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.InvSeries)
                .HasMaxLength(20)
                .HasComment("Ký hiệu");
            entity.Property(e => e.InvTypeCode)
                .HasMaxLength(25)
                .HasComment("Mã loại hóa đơn");
            entity.Property(e => e.InvTypeId)
                .HasComment("ID của loại hóa đơn từ 1 -> 6")
                .HasColumnName("InvTypeID");
            entity.Property(e => e.InvTypeName)
                .HasMaxLength(255)
                .HasComment("Tên loại hóa đơn");
            entity.Property(e => e.InvoiceTemplate)
                .HasMaxLength(20)
                .HasComment("Mẫu số");
            entity.Property(e => e.IssueFromInvNo)
                .HasMaxLength(25)
                .HasComment("Mua, phát hành trong kỳ - Từ số");
            entity.Property(e => e.IssueToInvNo)
                .HasMaxLength(25)
                .HasComment("Mua, phát hành trong kỳ - Đến số");
            entity.Property(e => e.LostInvNo)
                .HasMaxLength(4000)
                .HasComment("Số hóa đơn Mất, cháy, hỏng");
            entity.Property(e => e.LostQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Tổng số lượng hóa đơn Mất, cháy, hỏng")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OpeningFromInvNo)
                .HasMaxLength(25)
                .HasComment("Tồn đầu kỳ - Từ số");
            entity.Property(e => e.OpeningToInvNo)
                .HasMaxLength(25)
                .HasComment("Tồn đầu kỳ - Đến số");
            entity.Property(e => e.RefId)
                .HasComment("Khóa ngoại")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder)
                .ValueGeneratedOnAdd()
                .HasComment("Số thứ tự");
            entity.Property(e => e.TotalClosingQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Tồn cuối kỳ - Số lượng")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalOpenQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Tổng số tồn đầu kỳ, mua, phát hành trong kỳ")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalUsedFromInvNo)
                .HasMaxLength(25)
                .HasComment("Tổng số sử dụng, xóa bỏ, mất, hủy - Từ số");
            entity.Property(e => e.TotalUsedQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Tổng số sử dụng, xóa bỏ, mất, hủy - Cộng")
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalUsedToInvNo)
                .HasMaxLength(25)
                .HasComment("Tổng số sử dụng, xóa bỏ, mất, hủy - Đến số");
            entity.Property(e => e.UsedQuantity)
                .HasDefaultValueSql("((0))")
                .HasComment("Số sử dụng trong kỳ")
                .HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Ref).WithMany(p => p.TaBc26acInvoiceStatementDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA_BC26AC_InvoiceStatement_Detail_TA_BC26AC_InvoiceStatement");
        });

        modelBuilder.Entity<TaPlii922021ndcpDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_PLII922021NDCP_Detail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.DeductionsTaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ExportTaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.Htkkcode)
                .HasMaxLength(50)
                .HasColumnName("HTKKCode");
            entity.Property(e => e.Htkkname)
                .HasMaxLength(500)
                .HasColumnName("HTKKName");
            entity.Property(e => e.InventoryItemName).HasMaxLength(500);
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TaxRate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmount).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.TaPlii922021ndcpDetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_PLII922021NDCP_Detail_TADeclarationAppendix");
        });

        modelBuilder.Entity<TaTaindetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TA_01_TAINDetail");

            entity.ToTable("TA_TAINDetail", tb => tb.HasComment("Chi tiết tờ khai thuế tài nguyên, mẫu 01/TAIN và 02/TAIN"));

            entity.HasIndex(e => e.RefId, "IX_TA_TAINDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.DiffAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Chênh lệch giữa số quyết toán với kê khai")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Nhóm I, II, III");
            entity.Property(e => e.Output)
                .HasComment("Sản lượng")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidTaxAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Thuế tài nguyên đã kê khai trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.RefId)
                .HasComment("FK - ID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.ResourcesCategoryName)
                .HasMaxLength(255)
                .HasComment("Tên loại tài nguyên");
            entity.Property(e => e.ResourcesTaxTableCode).HasMaxLength(20);
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.SortOrderText).HasMaxLength(20);
            entity.Property(e => e.TaxAmount)
                .HasComment("Thuế tài nguyên phát sinh phải nộp trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxAmountDeductionExpectation)
                .HasComment("Thuế tài nguyên dự kiến được miễn giảm trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxAmountMovement)
                .HasComment("Thuế tài nguyên phát sinh trong kỳ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRate)
                .HasComment("Thuế suất")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Unit)
                .HasMaxLength(20)
                .HasComment("Đon vị tính");
            entity.Property(e => e.UnitPrice)
                .HasComment("Giá tính thuế đơn vị tài nguyên")
                .HasColumnType("decimal(20, 6)");
            entity.Property(e => e.UnitTaxAmountLevel)
                .HasComment("Mức thuế tài nguyên ấn định/1 đơn vị tài nguyên")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Ref).WithMany(p => p.TaTaindetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA_TAINDetail_TADeclaration");
        });

        modelBuilder.Entity<TaTncn051bkdetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_TNCN_051BKDetail", tb => tb.HasComment("Phụ lục 051BK-TNCN"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(128)
                .HasComment("Họ và tên");
            entity.Property(e => e.EmployeeTaxCode)
                .HasMaxLength(20)
                .HasComment("Mã số thuế");
            entity.Property(e => e.ExtraTaxAmount)
                .HasComment("Số thuế đã nộp thừa")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FamilyConditionDeduction)
                .HasComment("Tổng số tiền giảm trừ gia cảnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ForceInsuranceDeduction)
                .HasComment("Giảm trừ bảo hiểm được trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Nhóm");
            entity.Property(e => e.HumanityDeduction)
                .HasComment("Giảm trừ từ thiện, nhân đạo, khuyến học")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.IdentificationNumber)
                .HasMaxLength(20)
                .HasComment("Số CMTND/Hộ chiếu");
            entity.Property(e => e.IsAuthorized)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Cá nhân ủy quyền quyết toán thay");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.RetireSpontaneousDeduction)
                .HasComment("Giảm trừ hưu trí tự nguyện")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxAmountMustDeduct)
                .HasComment("Số thuế phải khấu trừ thêm")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxCalculationIncome)
                .HasComment("Thu nhập tính thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxIncomeDeducted)
                .HasComment("Số thuế TNCN đã khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxIncomeDeductedByWorkInEz)
                .HasComment("Số thuế TNCN được giảm do làm việc trong KKT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TaxIncomeDeductedByWorkInEZ");
            entity.Property(e => e.TaxIncomeMustDeduct)
                .HasComment("Số thuế TNCN phải khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxReduceByAgreement)
                .HasComment("Thuế TNCN được giảm theo Hiệp định")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxReduceByWorkInEconmicZone)
                .HasComment("Thuế TNCN được giảm do làm việc trong KKT")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTaxAmount)
                .HasComment("Tổng số thuế phải nộp")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTaxableIncome)
                .HasComment("Tổng số thu nhập chịu thuế")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.TaTncn051bkdetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_TNCN_051BKDetail_TADeclarationAppendix");
        });

        modelBuilder.Entity<TaTncn052bkdetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TA_TNCN_052BKDetail", tb => tb.HasComment("Phụ lục 052BK-TNCN"));

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(128)
                .HasComment("Họ và tên");
            entity.Property(e => e.EmployeeTaxCode)
                .HasMaxLength(20)
                .HasComment("Mã số thuế");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasDefaultValueSql("((1))")
                .HasComment("Nhóm");
            entity.Property(e => e.IdentificationNumber)
                .HasMaxLength(20)
                .HasComment("Số CMTND/Hộ chiếu");
            entity.Property(e => e.IsNotResidencePerson)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Cá nhân không cư trú");
            entity.Property(e => e.RefId)
                .HasComment("FK - RefID của tờ khai thuế")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự");
            entity.Property(e => e.TaxIncomeDeducted)
                .HasComment("Số thuế TNCN đã khấu trừ")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxIncomeDeductedByWorkInEz)
                .HasComment("Số thuế TNCN được giảm do làm việc trong KKT")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TaxIncomeDeductedByWorkInEZ");
            entity.Property(e => e.TaxReduceByAgreement)
                .HasComment("Thuế TNCN được giảm theo Hiệp định")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxReduceByWorkInEconmicZone)
                .HasComment("TNCN làm căn cứ giảm thuế")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TotalTaxableIncome)
                .HasComment("Tổng số thu nhập chịu thuế")
                .HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Appendix).WithMany(p => p.TaTncn052bkdetails)
                .HasForeignKey(d => d.AppendixId)
                .HasConstraintName("FK_TA_TNCN_052BKDetail_TADeclarationAppendix");
        });

        modelBuilder.Entity<TaadditionalDeclarationItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TAAdditionalDeclarationItem");

            entity.HasIndex(e => e.RefType, "IX_TAAdditionalDeclarationItem_RefType");

            entity.Property(e => e.ItemCodeKey).HasMaxLength(50);
            entity.Property(e => e.ItemCodeValue).HasMaxLength(255);
            entity.Property(e => e.ItemNameValue).HasMaxLength(255);
        });

        modelBuilder.Entity<TaadjustmentDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_VAT_ADJUSTMENT_DETAIL_1");

            entity.ToTable("TAAdjustmentDetail", tb => tb.HasComment("Bảng giải trình khai bổ sung điều chỉnh"));

            entity.HasIndex(e => e.RefId, "IX_TAAdjustmentDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AdjustAmount)
                .HasComment("Số điều chỉnh")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AdjustTaxLiability).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.AdjustValue).HasMaxLength(255);
            entity.Property(e => e.AppendixId)
                .HasComment("ID phụ lục")
                .HasColumnName("AppendixID");
            entity.Property(e => e.Code)
                .HasMaxLength(255)
                .HasComment("Mã số chỉ tiêu");
            entity.Property(e => e.CustomField1).HasMaxLength(255);
            entity.Property(e => e.DescriptionName)
                .HasMaxLength(500)
                .HasComment("Tên chỉ tiêu");
            entity.Property(e => e.DiffAmount)
                .HasDefaultValueSql("((0))")
                .HasComment("Chênh lệch")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DitaxAmount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("DITaxAmount");
            entity.Property(e => e.GroupName)
                .HasMaxLength(50)
                .HasComment("Phần : Phần I, phần II, Phần III của  bản giải trình");
            entity.Property(e => e.OrgAmount)
                .HasComment("Số đã kê khai")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.OrgValue).HasMaxLength(255);
            entity.Property(e => e.Reason).HasMaxLength(255);
            entity.Property(e => e.RefId)
                .HasComment("ID tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.SortOrderText).HasMaxLength(20);
            entity.Property(e => e.SubsectionCode).HasMaxLength(20);
            entity.Property(e => e.SubsectionName).HasMaxLength(500);

            entity.HasOne(d => d.Ref).WithMany(p => p.TaadjustmentDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TA_AdjustmentDetail_TADeclaration");
        });

        modelBuilder.Entity<TaadjustmentDetail01>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TAAdjustmentDetail01");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.AppendixId).HasColumnName("AppendixID");
            entity.Property(e => e.District).HasMaxLength(255);
            entity.Property(e => e.DistrictId)
                .HasMaxLength(20)
                .HasColumnName("DistrictID");
            entity.Property(e => e.GroupName).HasMaxLength(50);
            entity.Property(e => e.PlaceName).HasMaxLength(255);
            entity.Property(e => e.PlaceTaxCode).HasMaxLength(20);
            entity.Property(e => e.ProvinceOrCity).HasMaxLength(255);
            entity.Property(e => e.ProvinceOrCityId)
                .HasMaxLength(20)
                .HasColumnName("ProvinceOrCityID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TaxAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxCompanyDecisionId)
                .HasMaxLength(25)
                .HasColumnName("TaxCompanyDecisionID");
            entity.Property(e => e.TaxCompanyDecisionName).HasMaxLength(255);
            entity.Property(e => e.TaxCompanyId)
                .HasMaxLength(25)
                .HasColumnName("TaxCompanyID");
            entity.Property(e => e.TaxCompanyName).HasMaxLength(255);

            entity.HasOne(d => d.Ref).WithMany(p => p.TaadjustmentDetail01s)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TAAdjustmentDetail01_TADeclaration");
        });

        modelBuilder.Entity<TaappendixType>(entity =>
        {
            entity.HasKey(e => e.AppendixTypeId);

            entity.ToTable("TAAppendixType", tb => tb.HasComment("Danh mục Loại phụ lục tờ khai thuế"));

            entity.Property(e => e.AppendixTypeId)
                .HasDefaultValueSql("(newid())")
                .HasComment("ID loại phụ lục")
                .HasColumnName("AppendixTypeID");
            entity.Property(e => e.AppendixTypeCode)
                .HasMaxLength(50)
                .HasComment("Mã phụ lục");
            entity.Property(e => e.AppendixTypeName)
                .HasMaxLength(255)
                .HasComment("Tên phụ lục");
            entity.Property(e => e.IsAppendix)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasComment("Là phụ lục hay tờ khai: 1-phụ lục, 0-tờ khai");
            entity.Property(e => e.ProcedureName)
                .HasMaxLength(255)
                .HasComment("Tên store lấy dữ liệu");
            entity.Property(e => e.ProcedureNameInvalidInvoice).HasMaxLength(255);
            entity.Property(e => e.RefType).HasComment("Loại Tờ khai (lấy trong bảng SysRefType)");
            entity.Property(e => e.SortOrder).HasComment("Số thứ tự dòng");
            entity.Property(e => e.TableName)
                .HasMaxLength(50)
                .HasComment("Tên bảng lưu dữ liệu chi tiết phụ lục");
            entity.Property(e => e.TemplateSheetName)
                .HasMaxLength(255)
                .HasComment("Tên sheet tuong ứng trên template");
        });

        modelBuilder.Entity<TacareerGroup>(entity =>
        {
            entity.ToTable("TACareerGroup", tb => tb.HasComment("Danh mục Nhóm ngành nghề cho pp khấu trừ thuế GTGT trực tiếp trên doanh thu"));

            entity.Property(e => e.TacareerGroupId)
                .ValueGeneratedNever()
                .HasComment("PK")
                .HasColumnName("TACareerGroupID");
            entity.Property(e => e.TacareerGroupCode)
                .HasMaxLength(25)
                .HasColumnName("TACareerGroupCode");
            entity.Property(e => e.TacareerGroupName)
                .HasMaxLength(128)
                .HasComment("Tên nhóm ngành nghề")
                .HasColumnName("TACareerGroupName");
        });

        modelBuilder.Entity<TacareerList>(entity =>
        {
            entity.ToTable("TACareerList", tb => tb.HasComment("Bảng lưu danh mục ngành nghề của từng tờ khai thuế"));

            entity.Property(e => e.TacareerListId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("TACareerListID");
            entity.Property(e => e.CareerCode)
                .HasMaxLength(10)
                .HasComment("mã ngành nghề");
            entity.Property(e => e.CareerType).HasComment("mã tiểu mục hạch toán");
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasComment("Tên của danh mục ngành nghề");
            entity.Property(e => e.RefTypeList)
                .HasMaxLength(100)
                .HasComment("Danh sách RefType của tờ khai thuế");
            entity.Property(e => e.ToDate)
                .HasComment("Ngày hết hạn")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TachangedateLunarAndSolar>(entity =>
        {
            entity.HasKey(e => e.SortOrder);

            entity.ToTable("TAChangedateLunarAndSolar");

            entity.Property(e => e.SortOrder).ValueGeneratedNever();
            entity.Property(e => e.DateLunar).HasMaxLength(50);
            entity.Property(e => e.DateSolar).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tadeclaration>(entity =>
        {
            entity.HasKey(e => e.RefId);

            entity.ToTable("TADeclaration", tb => tb.HasComment("Bảng master lưu trữ thông tin chung các tờ khai thuế"));

            entity.Property(e => e.RefId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefID");
            entity.Property(e => e.AdditionTime)
                .HasDefaultValueSql("((0))")
                .HasComment("Lần bổ sung");
            entity.Property(e => e.BranchId)
                .HasComment("Mã chi nhánh")
                .HasColumnName("BranchID");
            entity.Property(e => e.CareerCode).HasMaxLength(10);
            entity.Property(e => e.CareerName).HasMaxLength(255);
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người lập tờ khai");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày lập tờ khai")
                .HasColumnType("datetime");
            entity.Property(e => e.DeclarationName)
                .HasMaxLength(128)
                .HasComment("Tên tờ khai");
            entity.Property(e => e.DeclarationTerm)
                .HasMaxLength(50)
                .HasComment("Kỳ tính thuế (hiển thị dạng Text)");
            entity.Property(e => e.DepartmentTaxCode).HasMaxLength(100);
            entity.Property(e => e.DepartmentTaxName).HasMaxLength(255);
            entity.Property(e => e.Editversion)
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.FromDate)
                .HasComment("Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.GlvoucherRefId).HasColumnName("GLVoucherRefID");
            entity.Property(e => e.IsCreateNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsFirstDeclaration).HasComment("1 = Tờ khai in lần đầu; 0 = Tờ khai bổ sung");
            entity.Property(e => e.IsSelectPayroll).HasComment("Có tích vào Cách tính thu nhập chịu thuế - Dựa vào bảng lương cho tờ khai 05/QTT-TNCN theo TT80 hay không");
            entity.Property(e => e.IsTt195).HasColumnName("IsTT195");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa tờ khai lần cuối");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa tờ khai  lần cuối")
                .HasColumnType("datetime");
            entity.Property(e => e.PaymentTaxCode).HasMaxLength(100);
            entity.Property(e => e.PaymentTaxName).HasMaxLength(255);
            entity.Property(e => e.PayrollDescription)
                .HasMaxLength(255)
                .HasComment("Mô tả Cách tính thu nhập chịu thuế - Dựa vào bảng lương cho tờ khai 05/QTT-TNCN theo TT80");
            entity.Property(e => e.PayrollFromDate)
                .HasComment(" Cách tính thu nhập chịu thuế - Dựa vào bảng lương cho tờ khai 05/QTT-TNCN theo TT80: Từ ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.PayrollToDate)
                .HasComment("Cách tính thu nhập chịu thuế - Dựa vào bảng lương cho tờ khai 05/QTT-TNCN theo TT80: Đến ngày")
                .HasColumnType("datetime");
            entity.Property(e => e.ProjectCode).HasMaxLength(12);
            entity.Property(e => e.ProjectName).HasMaxLength(200);
            entity.Property(e => e.ProvinceCode).HasMaxLength(100);
            entity.Property(e => e.ProvinceName).HasMaxLength(255);
            entity.Property(e => e.RefType).HasComment("Loại Tờ khai (lấy trong bảng SysRefType)");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.TemplateNo)
                .HasMaxLength(100)
                .HasComment("Mẫu số");
            entity.Property(e => e.ToDate)
                .HasComment("Đến ngày")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Template).WithMany(p => p.Tadeclarations)
                .HasForeignKey(d => d.TemplateId)
                .HasConstraintName("FK_TADeclaration_TATemplate");
        });

        modelBuilder.Entity<TadeclarationAfterR30>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK__TADeclar__2D2A2CD1275C5FBA");

            entity.ToTable("TADeclaration_AfterR30");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
        });

        modelBuilder.Entity<TadeclarationAppendix>(entity =>
        {
            entity.HasKey(e => e.AppendixId);

            entity.ToTable("TADeclarationAppendix", tb => tb.HasComment("Bảng lưu trữ các phụ lục được kê khai"));

            entity.HasIndex(e => e.RefId, "IX_TADeclarationAppendix_RefID");

            entity.Property(e => e.AppendixId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("AppendixID");
            entity.Property(e => e.AppendixTypeId)
                .HasComment("ID loại phụ lục")
                .HasColumnName("AppendixTypeID");
            entity.Property(e => e.RefId)
                .HasComment("ID tờ  khai")
                .HasColumnName("RefID");

            entity.HasOne(d => d.AppendixType).WithMany(p => p.TadeclarationAppendices)
                .HasForeignKey(d => d.AppendixTypeId)
                .HasConstraintName("FK_TADeclarationAppendix_TAAppendixType");

            entity.HasOne(d => d.Ref).WithMany(p => p.TadeclarationAppendices)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TADeclarationAppendix_TADeclaration");
        });

        modelBuilder.Entity<TadeclarationBeforeR28>(entity =>
        {
            entity.HasKey(e => e.RefId).HasName("PK__TADeclar__2D2A2CD1332C6E6B");

            entity.ToTable("TADeclaration_BeforeR28");

            entity.Property(e => e.RefId)
                .ValueGeneratedNever()
                .HasColumnName("RefID");
        });

        modelBuilder.Entity<TadeclarationConfig>(entity =>
        {
            entity.HasKey(e => e.RefType).HasName("PK_TADeclrationConfig");

            entity.ToTable("TADeclarationConfig", tb => tb.HasComment("Lưu 1 số thông tin của các tờ khai"));

            entity.Property(e => e.RefType)
                .ValueGeneratedNever()
                .HasComment("Loại tờ khai");
            entity.Property(e => e.DeclarationName)
                .HasMaxLength(255)
                .HasComment("Tên tờ khai");
            entity.Property(e => e.IsShowSetupFormWhenEdit)
                .HasDefaultValueSql("((0))")
                .HasComment("Loại form tham số: 0: không show form tham số khi ở trạng thái sửa, 1: có show form tham số ở cả trạng thái sửa và thêm mới - 2: Không show luôn form tham số");
            entity.Property(e => e.MenuName)
                .HasMaxLength(100)
                .HasComment("Tên menu gọi form thêm mới tương ứng");
            entity.Property(e => e.RefTypeName)
                .HasMaxLength(100)
                .HasComment("Tên tờ khai");
            entity.Property(e => e.SetupFormName)
                .HasMaxLength(100)
                .HasComment("Tên form tham số");
            entity.Property(e => e.TemplateFileName)
                .HasMaxLength(100)
                .IsFixedLength()
                .HasComment("Tên của file Excel mẫu");
            entity.Property(e => e.TemplateNo)
                .HasMaxLength(100)
                .HasComment("Mẫu số");
        });

        modelBuilder.Entity<TadeclarationDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TADeclarationDetail", tb => tb.HasComment("Bảng lưu trữ thông tin chi tiết của tờ khai"));

            entity.HasIndex(e => e.RefId, "IX_TADeclarationDetail_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.DataType).HasComment("Kiểu dữ liệu (Theo Enum kiểu dữ liệu chung của chương trình):EnumDataType");
            entity.Property(e => e.GroupName)
                .HasMaxLength(100)
                .HasComment("Mã nhóm");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .HasComment("Mã thông tin chung");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasComment("Tên thông tin chung");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Value)
                .HasMaxLength(500)
                .HasComment("Giá trị của thông tin");

            entity.HasOne(d => d.Ref).WithMany(p => p.TadeclarationDetails)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TADeclarationDetail_TADeclaration");
        });

        modelBuilder.Entity<TadeclarationGeneral>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TADeclarationGeneral", tb => tb.HasComment("Bảng lưu trữ các thông tin chung của tờ khai"));

            entity.HasIndex(e => e.RefId, "IX_TADeclarationGeneral_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.DataType).HasComment("Kiểu dữ liệu (Theo Enum kiểu dữ liệu chung của chương trình):EnumDataType");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(50)
                .HasComment("Mã thông tin chung");
            entity.Property(e => e.ItemName)
                .HasMaxLength(255)
                .HasComment("Tên thông tin chung");
            entity.Property(e => e.RefId)
                .HasComment("FK")
                .HasColumnName("RefID");
            entity.Property(e => e.Value)
                .HasMaxLength(500)
                .HasComment("Giá trị của thông tin");

            entity.HasOne(d => d.Ref).WithMany(p => p.TadeclarationGenerals)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TADeclarationGeneral_TADeclaration");
        });

        modelBuilder.Entity<TaestimatedEnterpriseIncomeDefault>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("TAEstimatedEnterpriseIncomeDefault");

            entity.Property(e => e.ItemId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ItemID");
            entity.Property(e => e.AllowDbnull)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("AllowDBNull");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemIndex)
                .HasMaxLength(20)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ParentId).HasColumnName("ParentID");
        });

        modelBuilder.Entity<TaestimatedEnterpriseIncomeDetail>(entity =>
        {
            entity.HasKey(e => e.RefDetailId);

            entity.ToTable("TAEstimatedEnterpriseIncomeDetail");

            entity.Property(e => e.RefDetailId)
                .ValueGeneratedNever()
                .HasColumnName("RefDetailID");
            entity.Property(e => e.Amount)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.ItemCode).HasMaxLength(50);
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemIndex).HasMaxLength(20);
            entity.Property(e => e.ItemName).HasMaxLength(255);
            entity.Property(e => e.ItemNameChinese).HasMaxLength(255);
            entity.Property(e => e.ItemNameEnglish).HasMaxLength(255);
            entity.Property(e => e.ItemNameKorean).HasMaxLength(255);
            entity.Property(e => e.RefId).HasColumnName("RefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.TaestimatedEnterpriseIncomeDetails)
                .HasForeignKey(d => d.RefId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TAEstimatedEnterpriseIncomeDetail_TADeclaration");
        });

        modelBuilder.Entity<TanoTaxableGood>(entity =>
        {
            entity.HasKey(e => e.RefDetailId).HasName("PK_TANoTaxableGoods_1");

            entity.ToTable("TANoTaxableGoods", tb => tb.HasComment("bảng chứa danh sách hàng hóa không chịu thuế"));

            entity.HasIndex(e => e.RefId, "IX_TANoTaxableGoods_RefID");

            entity.Property(e => e.RefDetailId)
                .HasDefaultValueSql("(newid())")
                .HasComment("Khóa chính")
                .HasColumnName("RefDetailID");
            entity.Property(e => e.RefId)
                .HasComment("Khóa ngoại ID của tờ khai")
                .HasColumnName("RefID");
            entity.Property(e => e.VoucherRefId)
                .HasComment("RefID của chứng từ gốc")
                .HasColumnName("VoucherRefID");

            entity.HasOne(d => d.Ref).WithMany(p => p.TanoTaxableGoods)
                .HasForeignKey(d => d.RefId)
                .HasConstraintName("FK_TANoTaxableGoods_TADeclaration");
        });

        modelBuilder.Entity<Tanotification>(entity =>
        {
            entity.ToTable("TANotification");

            entity.HasIndex(e => e.SubmissionId, "IX_TANotification");

            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.FilePath).HasMaxLength(255);
            entity.Property(e => e.SubmissionCode).HasMaxLength(128);
            entity.Property(e => e.SubmissionId).HasMaxLength(128);
            entity.Property(e => e.TaxCode).HasMaxLength(50);
        });

        modelBuilder.Entity<TapaymentSlip>(entity =>
        {
            entity.HasKey(e => e.SubmissionId);

            entity.ToTable("TAPaymentSlip");

            entity.HasIndex(e => e.TaxCode, "IX_TAPaymentSlip");

            entity.Property(e => e.SubmissionId).HasMaxLength(50);
            entity.Property(e => e.AuthorizingTaxCode).HasMaxLength(25);
            entity.Property(e => e.BankPaymentCode).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.OrgCollectTaxAgentName).HasMaxLength(255);
            entity.Property(e => e.PayerBankName).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(128);
            entity.Property(e => e.TaxCode).HasMaxLength(50);
            entity.Property(e => e.TotalMoney).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TypeMoney).HasMaxLength(10);
        });

        modelBuilder.Entity<Tasubmission>(entity =>
        {
            entity.HasKey(e => e.SubmissionId);

            entity.ToTable("TASubmission");

            entity.HasIndex(e => new { e.TaxCode, e.CreatedDate, e.ParentCode }, "IX_TASubmission");

            entity.Property(e => e.SubmissionId).HasMaxLength(128);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DeclareSubmissionType).HasMaxLength(50);
            entity.Property(e => e.ParentCode).HasMaxLength(50);
            entity.Property(e => e.PeriodTypeId).HasMaxLength(128);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubmissionCode).HasMaxLength(128);
            entity.Property(e => e.TaxCode).HasMaxLength(50);
            entity.Property(e => e.TaxPeriod).HasMaxLength(50);
            entity.Property(e => e.TaxReturnCode).HasMaxLength(50);
            entity.Property(e => e.TaxReturnName).HasMaxLength(255);
        });

        modelBuilder.Entity<TataxAgentInfo>(entity =>
        {
            entity.HasKey(e => e.TaxAgentId);

            entity.ToTable("TATaxAgentInfo", tb => tb.HasComment("Thiết lập thông tin đại lý thuế"));

            entity.Property(e => e.TaxAgentId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("TaxAgentID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasComment("Địa chỉ");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CertificateNo)
                .HasMaxLength(50)
                .HasComment("Chứng chỉ hành nghề số");
            entity.Property(e => e.CertificateNoUnit)
                .HasMaxLength(50)
                .HasComment("Số chứng chỉ hành nghề của đơn vị cung cấp DV kế toán");
            entity.Property(e => e.ContractCode)
                .HasMaxLength(50)
                .HasComment("Hợp đồng số");
            entity.Property(e => e.ContractDate)
                .HasComment("Ngày hợp đồng")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedBy)
                .HasMaxLength(50)
                .HasComment("Người lập chứng từ");
            entity.Property(e => e.CreatedDate)
                .HasComment("Ngày lập chứng từ")
                .HasColumnType("datetime");
            entity.Property(e => e.District)
                .HasMaxLength(100)
                .HasComment("Quận/huyện");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .HasComment("Email");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(128)
                .HasComment("Nhân viên đại lý thuế");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasComment("Fax");
            entity.Property(e => e.IsDisplayOnDeclaration).HasComment("Có hiển thị thông tin đại lý thuế lên tờ khai hay không");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(50)
                .HasComment("Người sửa chứng từ lần cuối");
            entity.Property(e => e.ModifiedDate)
                .HasComment("Ngày sửa chứng từ lần cuối")
                .HasColumnType("datetime");
            entity.Property(e => e.ProvideUnit)
                .HasMaxLength(128)
                .HasComment("Đơn vị cung cấp dịch vụ kế toán");
            entity.Property(e => e.ProvinceOrCity)
                .HasMaxLength(100)
                .HasComment("Tỉnh/ Thành phố");
            entity.Property(e => e.TaxAgentName)
                .HasMaxLength(128)
                .HasComment("Tên đại lý thuế");
            entity.Property(e => e.TaxCode)
                .HasMaxLength(50)
                .HasComment("Mã số thuế");
            entity.Property(e => e.TaxOrganManagementCode).HasMaxLength(25);
            entity.Property(e => e.TaxationBureauCode).HasMaxLength(25);
            entity.Property(e => e.Tel)
                .HasMaxLength(50)
                .HasComment("Điện thoại");
        });

        modelBuilder.Entity<Tatemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);

            entity.ToTable("TATemplate");

            entity.Property(e => e.TemplateId)
                .ValueGeneratedNever()
                .HasColumnName("TemplateID");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DecisionId)
                .HasMaxLength(50)
                .HasColumnName("DecisionID");
            entity.Property(e => e.Description).HasMaxLength(128);
            entity.Property(e => e.ModifiedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TaxLedger>(entity =>
        {
            entity.ToTable("TaxLedger");

            entity.HasIndex(e => new { e.InvDate, e.PostedDate, e.PurchasePurposeCode, e.TableListType, e.IsPostToManagementBook }, "IX_TaxLedger_Composite").HasFillFactor(90);

            entity.HasIndex(e => e.IsUpdateRedundant, "IX_TaxLedger_IsUpdateRedundant")
                .IsDescending()
                .HasFilter("([IsUpdateRedundant]=(1))");

            entity.HasIndex(e => new { e.BranchId, e.TableListType, e.IsPostToManagementBook, e.InvDate, e.PurchasePurposeId, e.RefType, e.OriginInvoicePostedDate, e.OriginInvoiceRefType, e.OriginRefType }, "IX_TaxLedger_OrgInvoice");

            entity.HasIndex(e => e.RefDetailId, "IX_TaxLedger_RefDetailID");

            entity.HasIndex(e => new { e.RefId, e.IsPostToManagementBook }, "IX_TaxLedger_RefID");

            entity.Property(e => e.TaxLedgerId).HasColumnName("TaxLedgerID");
            entity.Property(e => e.AccountObjectAddress).HasMaxLength(400);
            entity.Property(e => e.AccountObjectCode).HasMaxLength(50);
            entity.Property(e => e.AccountObjectId).HasColumnName("AccountObjectID");
            entity.Property(e => e.AccountObjectName).HasMaxLength(400);
            entity.Property(e => e.AccountObjectNameDi)
                .HasMaxLength(400)
                .HasColumnName("AccountObjectNameDI");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompanyTaxCode).HasMaxLength(50);
            entity.Property(e => e.CorespondingAccountNumber).HasMaxLength(20);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(500);
            entity.Property(e => e.InvRefId).HasColumnName("InvRefID");
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.InvestmentProjectId).HasColumnName("InvestmentProjectID");
            entity.Property(e => e.IsUpdateRedundant)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.JournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master của hóa đơn");
            entity.Property(e => e.NotInVatdeclaration)
                .HasComment("HHDV không tổng hợp trên tờ khai GTGT")
                .HasColumnName("NotInVATDeclaration");
            entity.Property(e => e.OriginInvoiceJournalMemo)
                .HasMaxLength(500)
                .HasComment("Diễn giải master chứng từ liên quan (dùng để lên bảng kê)");
            entity.Property(e => e.OriginInvoicePostedDate)
                .HasComment("Posteddate của chứng từ liên quan (dùng để lên bảng kê)")
                .HasColumnType("datetime");
            entity.Property(e => e.OriginInvoiceRefDate)
                .HasComment("RefDate của chứng từ liên quan (dùng để lên bảng kê)")
                .HasColumnType("datetime");
            entity.Property(e => e.OriginInvoiceRefId)
                .HasComment("RefID của chứng từ liên quan (dùng để lên bảng kê)")
                .HasColumnName("OriginInvoiceRefID");
            entity.Property(e => e.OriginInvoiceRefNo)
                .HasMaxLength(25)
                .HasComment("Refno của chứng từ liên quan (dùng để lên bảng kê)");
            entity.Property(e => e.OriginInvoiceRefType).HasComment("Reftype của chứng từ liên quan (dùng để lên bảng kê)");
            entity.Property(e => e.OriginRefId)
                .HasComment("RefID của chứng từ gốc")
                .HasColumnName("OriginRefID");
            entity.Property(e => e.OriginRefType).HasComment("Reftype của chứng từ gốc");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.PurchasePurposeCode).HasMaxLength(20);
            entity.Property(e => e.PurchasePurposeId).HasColumnName("PurchasePurposeID");
            entity.Property(e => e.PurchasePurposeName).HasMaxLength(255);
            entity.Property(e => e.RefDate).HasColumnType("datetime");
            entity.Property(e => e.RefDetailId).HasColumnName("RefDetailID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.RefNo).HasMaxLength(20);
            entity.Property(e => e.TacareerGroupId).HasColumnName("TACareerGroupID");
            entity.Property(e => e.TurnOverAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TurnOverAmountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("TurnOverAmountOC");
            entity.Property(e => e.Vataccount)
                .HasMaxLength(20)
                .HasColumnName("VATAccount");
            entity.Property(e => e.Vatamount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmount");
            entity.Property(e => e.VatamountOc)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATAmountOC");
            entity.Property(e => e.Vatrate)
                .HasDefaultValueSql("((0))")
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRate");
            entity.Property(e => e.VatrateOther)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("VATRateOther");
            entity.Property(e => e.VoucherPostedDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherRefDetailId).HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");
            entity.Property(e => e.VoucherRefNo).HasMaxLength(25);
        });

        modelBuilder.Entity<TaxLocation>(entity =>
        {
            entity.ToTable("TaxLocation");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CreatedBy).HasMaxLength(255);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LocationId)
                .HasMaxLength(20)
                .HasColumnName("LocationID");
            entity.Property(e => e.LocationName).HasMaxLength(255);
            entity.Property(e => e.MisaCodeId).HasColumnName("MisaCodeID");
            entity.Property(e => e.ModifiedBy).HasMaxLength(255);
            entity.Property(e => e.ModifiedDate).HasMaxLength(255);
            entity.Property(e => e.ParentId)
                .HasMaxLength(20)
                .HasColumnName("ParentID");
        });

        modelBuilder.Entity<TaxRate>(entity =>
        {
            entity.HasKey(e => e.TaxRateValue);

            entity.ToTable("TaxRate", tb => tb.HasComment("Bảng lưu các giá trị thuế suất GTGT"));

            entity.Property(e => e.TaxRateValue).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TaxRateName).HasMaxLength(50);
        });

        modelBuilder.Entity<TaxReductionInfo>(entity =>
        {
            entity.HasKey(e => e.TaxReductionType).HasName("PK__TaxReduc__547073FC5EBB4027");

            entity.ToTable("TaxReductionInfo");

            entity.Property(e => e.TaxReductionType).ValueGeneratedNever();
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.TaxReductionDescription).HasMaxLength(255);
            entity.Property(e => e.ToDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TaxReturnVersion>(entity =>
        {
            entity.HasKey(e => e.TaxReturnId).HasName("PK__TaxRetur__F812F1ED7A809094");

            entity.ToTable("TaxReturnVersion");

            entity.Property(e => e.TaxReturnId)
                .HasMaxLength(15)
                .HasColumnName("TaxReturnID");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.SmeversionAdditional)
                .HasMaxLength(128)
                .HasColumnName("SMEVersionAdditional");
            entity.Property(e => e.SmeversionOfficial)
                .HasMaxLength(128)
                .HasColumnName("SMEVersionOfficial");
            entity.Property(e => e.TaxReturnName).HasMaxLength(255);
            entity.Property(e => e.TaxReturnVersionAdditional).HasMaxLength(15);
            entity.Property(e => e.TaxReturnVersionOfficial).HasMaxLength(15);
        });

        modelBuilder.Entity<Temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp");

            entity.Property(e => e.Amount1).HasColumnType("money");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<ThirdPartyServiceConfig>(entity =>
        {
            entity.HasKey(e => new { e.ServiceCode, e.PartnerCode, e.BranchId });

            entity.ToTable("ThirdPartyServiceConfig");

            entity.Property(e => e.ServiceCode).HasMaxLength(20);
            entity.Property(e => e.PartnerCode)
                .HasMaxLength(50)
                .HasDefaultValueSql("('VIETTEL-VINACOMIN')");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TimeSheetSign>(entity =>
        {
            entity.ToTable("TimeSheetSign", tb => tb.HasComment("Bảng ký hiệu chấm công"));

            entity.Property(e => e.TimeSheetSignId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("TimeSheetSignID");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.IsDefault).HasComment("Là ký hiệu mặc định");
            entity.Property(e => e.IsSystem).HasComment("Là ký hiệu mặc định của hệ thống");
            entity.Property(e => e.SalaryRate)
                .HasComment("Tỉ lệ hưởng lương")
                .HasColumnType("decimal(9, 4)");
            entity.Property(e => e.TimeSheetSignCode)
                .HasMaxLength(20)
                .HasComment("Ký hiệu chấm công");
            entity.Property(e => e.TimeSheetSignName)
                .HasMaxLength(255)
                .HasComment("Diễn giải");
        });

        modelBuilder.Entity<TrackingPrintBadeposit>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.ReportId });

            entity.ToTable("TrackingPrintBADeposit");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
        });

        modelBuilder.Entity<TrackingPrintBapaymentOrder>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.ReportId });

            entity.ToTable("TrackingPrintBAPaymentOrder");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
        });

        modelBuilder.Entity<TrackingPrintCapayment>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.ReportId });

            entity.ToTable("TrackingPrintCAPayment");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
        });

        modelBuilder.Entity<TrackingPrintCareceipt>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.ReportId });

            entity.ToTable("TrackingPrintCAReceipt");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
        });

        modelBuilder.Entity<TrackingPrintInoutward>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.ReportId });

            entity.ToTable("TrackingPrintINOutward");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
        });

        modelBuilder.Entity<TrackingPrintInvoice>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.InvTypeId }).HasName("PK_TrackingPrintInvoice_1");

            entity.ToTable("TrackingPrintInvoice");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.InvTypeId).HasColumnName("InvTypeID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.InvDate).HasColumnType("datetime");
            entity.Property(e => e.InvNo).HasMaxLength(25);
            entity.Property(e => e.InvSeries).HasMaxLength(20);
            entity.Property(e => e.InvTemplateNo).HasMaxLength(25);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
        });

        modelBuilder.Entity<TrackingPrintVoucherAccounting>(entity =>
        {
            entity.HasKey(e => new { e.RefId, e.ReportId });

            entity.ToTable("TrackingPrintVoucherAccounting");

            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReportID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.FirstPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.FirstPrintedUser).HasMaxLength(128);
            entity.Property(e => e.LastPrintedDate).HasColumnType("datetime");
            entity.Property(e => e.LastPrintedUser).HasMaxLength(128);
            entity.Property(e => e.RefNoFinance).HasMaxLength(50);
            entity.Property(e => e.RefNoManagement).HasMaxLength(50);
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.ToTable("Unit", tb => tb.HasComment("Danh mục Đơn vị tính"));

            entity.HasIndex(e => e.UnitName, "IX_UnitName")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.UnitId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK")
                .HasColumnName("UnitID");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasComment("Mô tả");
            entity.Property(e => e.Inactive).HasComment("Ngừng theo dõi");
            entity.Property(e => e.UnitName)
                .HasMaxLength(20)
                .HasComment("Tên đơn vị tính");
        });

        modelBuilder.Entity<UpdateStatus123Log>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UpdateStatus123Log");

            entity.Property(e => e.ModifiedBy).HasMaxLength(100);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.NewValue).HasMaxLength(100);
            entity.Property(e => e.OldValue).HasMaxLength(100);
            entity.Property(e => e.PropertyName).HasMaxLength(50);
            entity.Property(e => e.TransactionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TransactionID");
        });

        modelBuilder.Entity<VoucherReference>(entity =>
        {
            entity.HasKey(e => e.ReferenceId).HasName("PK_VoucherReference_1");

            entity.ToTable("VoucherReference");

            entity.HasIndex(e => e.RefId1, "IX_VoucherReference_RefID1").HasFillFactor(90);

            entity.HasIndex(e => e.RefId2, "IX_VoucherReference_RefID2").HasFillFactor(90);

            entity.Property(e => e.ReferenceId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ReferenceID");
            entity.Property(e => e.RefId1)
                .HasComment("Chứng từ chính")
                .HasColumnName("RefID1");
            entity.Property(e => e.RefId2)
                .HasComment("Chứng từ tham chiếu")
                .HasColumnName("RefID2");
            entity.Property(e => e.RefNoFinance1)
                .HasMaxLength(100)
                .HasComment("Số chứng từ chính");
            entity.Property(e => e.RefNoFinance2)
                .HasMaxLength(100)
                .HasComment("Số chứng từ tham chiếu");
            entity.Property(e => e.RefNoManagement1).HasMaxLength(100);
            entity.Property(e => e.RefNoManagement2).HasMaxLength(100);
            entity.Property(e => e.RefType1).HasComment("Loại chứng từ trên chứng từ chính");
            entity.Property(e => e.RefType2).HasComment("Loại chứng từ trên chứng từ tham chiếu");
            entity.Property(e => e.ReferenceType).HasComment("Kiểu reference");
            entity.Property(e => e.SortOrder).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<VoucherToOpening>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VoucherToOpening");

            entity.Property(e => e.OpeningPostedDate).HasColumnType("datetime");
            entity.Property(e => e.OpeningQuantity).HasColumnType("decimal(22, 8)");
            entity.Property(e => e.OpeningRefId).HasColumnName("OpeningRefID");
            entity.Property(e => e.VoucherRefDetailId).HasColumnName("VoucherRefDetailID");
            entity.Property(e => e.VoucherRefId).HasColumnName("VoucherRefID");
        });

        modelBuilder.Entity<VoucherType>(entity =>
        {
            entity.ToTable("VoucherType", tb => tb.HasComment("Loại chứng từ"));

            entity.HasIndex(e => e.VoucherTypeCode, "IX_VoucherType")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.VoucherTypeId)
                .HasDefaultValueSql("(newid())")
                .HasComment("PK của bảng")
                .HasColumnName("VoucherTypeID");
            entity.Property(e => e.CorrespondingSummary).HasDefaultValueSql("((0))");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasComment("Tài khoản có");
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasComment("Tài khoản nợ");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')")
                .HasComment("Diễn giải");
            entity.Property(e => e.IsSystem).HasComment("Là dữ liệu hệ thống ");
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.MovementBy).HasComment("Phát sinh theo. 0: Phát sinh theo TK; 1: Phát sinh theo nhóm chứng từ");
            entity.Property(e => e.VoucherTypeCategory).HasComment("Nhóm loại chứng từ");
            entity.Property(e => e.VoucherTypeCode)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')")
                .HasComment("Mã loại chứng từ");
            entity.Property(e => e.VoucherTypeName)
                .HasMaxLength(128)
                .HasDefaultValueSql("('')")
                .HasComment("Tên loại chứng từ");
        });

        modelBuilder.Entity<VoucherTypeCategory>(entity =>
        {
            entity.HasKey(e => e.VoucherTypeCategory1);

            entity.ToTable("VoucherTypeCategory");

            entity.Property(e => e.VoucherTypeCategory1)
                .ValueGeneratedNever()
                .HasColumnName("VoucherTypeCategory");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.VoucherTypeCategoryName).HasMaxLength(50);
        });

        modelBuilder.Entity<VoucherTypeCategoryRefType>(entity =>
        {
            entity.ToTable("VoucherTypeCategoryRefType");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("ID");

            entity.HasOne(d => d.RefTypeNavigation).WithMany(p => p.VoucherTypeCategoryRefTypes)
                .HasForeignKey(d => d.RefType)
                .HasConstraintName("FK_VoucherTypeCategoryRefType_SYSRefType");

            entity.HasOne(d => d.VoucherTypeCategoryNavigation).WithMany(p => p.VoucherTypeCategoryRefTypes)
                .HasForeignKey(d => d.VoucherTypeCategory)
                .HasConstraintName("FK_VoucherTypeCategoryRefType_VoucherTypeCategory");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}